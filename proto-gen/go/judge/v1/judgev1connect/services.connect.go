// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: judge/v1/services.proto

package judgev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/szpp-dev-team/szpp-judge/proto-gen/go/judge/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// HealthcheckServiceName is the fully-qualified name of the HealthcheckService service.
	HealthcheckServiceName = "judge.v1.HealthcheckService"
	// JudgeServiceName is the fully-qualified name of the JudgeService service.
	JudgeServiceName = "judge.v1.JudgeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthcheckServicePingProcedure is the fully-qualified name of the HealthcheckService's Ping RPC.
	HealthcheckServicePingProcedure = "/judge.v1.HealthcheckService/Ping"
	// JudgeServiceJudgeProcedure is the fully-qualified name of the JudgeService's Judge RPC.
	JudgeServiceJudgeProcedure = "/judge.v1.JudgeService/Judge"
	// JudgeServiceRunProcedure is the fully-qualified name of the JudgeService's Run RPC.
	JudgeServiceRunProcedure = "/judge.v1.JudgeService/Run"
)

// HealthcheckServiceClient is a client for the judge.v1.HealthcheckService service.
type HealthcheckServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewHealthcheckServiceClient constructs a client for the judge.v1.HealthcheckService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthcheckServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthcheckServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &healthcheckServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+HealthcheckServicePingProcedure,
			opts...,
		),
	}
}

// healthcheckServiceClient implements HealthcheckServiceClient.
type healthcheckServiceClient struct {
	ping *connect.Client[v1.PingRequest, v1.PingResponse]
}

// Ping calls judge.v1.HealthcheckService.Ping.
func (c *healthcheckServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// HealthcheckServiceHandler is an implementation of the judge.v1.HealthcheckService service.
type HealthcheckServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewHealthcheckServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthcheckServiceHandler(svc HealthcheckServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthcheckServicePingHandler := connect.NewUnaryHandler(
		HealthcheckServicePingProcedure,
		svc.Ping,
		opts...,
	)
	return "/judge.v1.HealthcheckService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthcheckServicePingProcedure:
			healthcheckServicePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthcheckServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthcheckServiceHandler struct{}

func (UnimplementedHealthcheckServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("judge.v1.HealthcheckService.Ping is not implemented"))
}

// JudgeServiceClient is a client for the judge.v1.JudgeService service.
type JudgeServiceClient interface {
	Judge(context.Context, *connect.Request[v1.JudgeRequest]) (*connect.ServerStreamForClient[v1.JudgeResponse], error)
	Run(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error)
}

// NewJudgeServiceClient constructs a client for the judge.v1.JudgeService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJudgeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JudgeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &judgeServiceClient{
		judge: connect.NewClient[v1.JudgeRequest, v1.JudgeResponse](
			httpClient,
			baseURL+JudgeServiceJudgeProcedure,
			opts...,
		),
		run: connect.NewClient[v1.RunRequest, v1.RunResponse](
			httpClient,
			baseURL+JudgeServiceRunProcedure,
			opts...,
		),
	}
}

// judgeServiceClient implements JudgeServiceClient.
type judgeServiceClient struct {
	judge *connect.Client[v1.JudgeRequest, v1.JudgeResponse]
	run   *connect.Client[v1.RunRequest, v1.RunResponse]
}

// Judge calls judge.v1.JudgeService.Judge.
func (c *judgeServiceClient) Judge(ctx context.Context, req *connect.Request[v1.JudgeRequest]) (*connect.ServerStreamForClient[v1.JudgeResponse], error) {
	return c.judge.CallServerStream(ctx, req)
}

// Run calls judge.v1.JudgeService.Run.
func (c *judgeServiceClient) Run(ctx context.Context, req *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error) {
	return c.run.CallUnary(ctx, req)
}

// JudgeServiceHandler is an implementation of the judge.v1.JudgeService service.
type JudgeServiceHandler interface {
	Judge(context.Context, *connect.Request[v1.JudgeRequest], *connect.ServerStream[v1.JudgeResponse]) error
	Run(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error)
}

// NewJudgeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJudgeServiceHandler(svc JudgeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	judgeServiceJudgeHandler := connect.NewServerStreamHandler(
		JudgeServiceJudgeProcedure,
		svc.Judge,
		opts...,
	)
	judgeServiceRunHandler := connect.NewUnaryHandler(
		JudgeServiceRunProcedure,
		svc.Run,
		opts...,
	)
	return "/judge.v1.JudgeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JudgeServiceJudgeProcedure:
			judgeServiceJudgeHandler.ServeHTTP(w, r)
		case JudgeServiceRunProcedure:
			judgeServiceRunHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJudgeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJudgeServiceHandler struct{}

func (UnimplementedJudgeServiceHandler) Judge(context.Context, *connect.Request[v1.JudgeRequest], *connect.ServerStream[v1.JudgeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("judge.v1.JudgeService.Judge is not implemented"))
}

func (UnimplementedJudgeServiceHandler) Run(context.Context, *connect.Request[v1.RunRequest]) (*connect.Response[v1.RunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("judge.v1.JudgeService.Run is not implemented"))
}
