// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: judge/v1/messages.proto

package judgev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_judge_v1_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_judge_v1_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_judge_v1_messages_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_judge_v1_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_judge_v1_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_judge_v1_messages_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JudgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCodePath     string      `protobuf:"bytes,1,opt,name=source_code_path,json=sourceCodePath,proto3" json:"source_code_path,omitempty"` // GCS上のパス
	LangId             string      `protobuf:"bytes,2,opt,name=lang_id,json=langId,proto3" json:"lang_id,omitempty"`
	JudgeType          *JudgeType  `protobuf:"bytes,3,opt,name=judge_type,json=judgeType,proto3" json:"judge_type,omitempty"`
	ExecTimeLimitMs    uint32      `protobuf:"varint,4,opt,name=exec_time_limit_ms,json=execTimeLimitMs,proto3" json:"exec_time_limit_ms,omitempty"`          // 実行時間制限 [ms]
	ExecMemoryLimitMib uint32      `protobuf:"varint,5,opt,name=exec_memory_limit_mib,json=execMemoryLimitMib,proto3" json:"exec_memory_limit_mib,omitempty"` // 実行時メモリ制限 [MiB]
	Testcases          []*Testcase `protobuf:"bytes,7,rep,name=testcases,proto3" json:"testcases,omitempty"`
	WantResultDetail   *bool       `protobuf:"varint,8,opt,name=want_result_detail,json=wantResultDetail,proto3,oneof" json:"want_result_detail,omitempty"`
	StdoutLimitKib     *uint32     `protobuf:"varint,9,opt,name=stdout_limit_kib,json=stdoutLimitKib,proto3,oneof" json:"stdout_limit_kib,omitempty"`
	StderrLimitKib     *uint32     `protobuf:"varint,10,opt,name=stderr_limit_kib,json=stderrLimitKib,proto3,oneof" json:"stderr_limit_kib,omitempty"`
}

func (x *JudgeRequest) Reset() {
	*x = JudgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_judge_v1_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeRequest) ProtoMessage() {}

func (x *JudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_judge_v1_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeRequest.ProtoReflect.Descriptor instead.
func (*JudgeRequest) Descriptor() ([]byte, []int) {
	return file_judge_v1_messages_proto_rawDescGZIP(), []int{2}
}

func (x *JudgeRequest) GetSourceCodePath() string {
	if x != nil {
		return x.SourceCodePath
	}
	return ""
}

func (x *JudgeRequest) GetLangId() string {
	if x != nil {
		return x.LangId
	}
	return ""
}

func (x *JudgeRequest) GetJudgeType() *JudgeType {
	if x != nil {
		return x.JudgeType
	}
	return nil
}

func (x *JudgeRequest) GetExecTimeLimitMs() uint32 {
	if x != nil {
		return x.ExecTimeLimitMs
	}
	return 0
}

func (x *JudgeRequest) GetExecMemoryLimitMib() uint32 {
	if x != nil {
		return x.ExecMemoryLimitMib
	}
	return 0
}

func (x *JudgeRequest) GetTestcases() []*Testcase {
	if x != nil {
		return x.Testcases
	}
	return nil
}

func (x *JudgeRequest) GetWantResultDetail() bool {
	if x != nil && x.WantResultDetail != nil {
		return *x.WantResultDetail
	}
	return false
}

func (x *JudgeRequest) GetStdoutLimitKib() uint32 {
	if x != nil && x.StdoutLimitKib != nil {
		return *x.StdoutLimitKib
	}
	return 0
}

func (x *JudgeRequest) GetStderrLimitKib() uint32 {
	if x != nil && x.StderrLimitKib != nil {
		return *x.StderrLimitKib
	}
	return 0
}

type JudgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestcaseId      uint32                 `protobuf:"varint,1,opt,name=testcase_id,json=testcaseId,proto3" json:"testcase_id,omitempty"` // テストケースの ID(DB に保存するときに使う)
	Status          JudgeStatus            `protobuf:"varint,2,opt,name=status,proto3,enum=judge.v1.JudgeStatus" json:"status,omitempty"`
	ExecTimeMs      uint32                 `protobuf:"varint,3,opt,name=exec_time_ms,json=execTimeMs,proto3" json:"exec_time_ms,omitempty"`
	ExecMemoryKib   uint32                 `protobuf:"varint,4,opt,name=exec_memory_kib,json=execMemoryKib,proto3" json:"exec_memory_kib,omitempty"`
	CompilerMessage string                 `protobuf:"bytes,5,opt,name=compiler_message,json=compilerMessage,proto3" json:"compiler_message,omitempty"`
	Detail          *ExecutionResultDetail `protobuf:"bytes,6,opt,name=detail,proto3,oneof" json:"detail,omitempty"` // want_result_detail=true のときに値がセットされる
}

func (x *JudgeResponse) Reset() {
	*x = JudgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_judge_v1_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeResponse) ProtoMessage() {}

func (x *JudgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_judge_v1_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeResponse.ProtoReflect.Descriptor instead.
func (*JudgeResponse) Descriptor() ([]byte, []int) {
	return file_judge_v1_messages_proto_rawDescGZIP(), []int{3}
}

func (x *JudgeResponse) GetTestcaseId() uint32 {
	if x != nil {
		return x.TestcaseId
	}
	return 0
}

func (x *JudgeResponse) GetStatus() JudgeStatus {
	if x != nil {
		return x.Status
	}
	return JudgeStatus_JUDGE_STATUS_UNSPECIFIED
}

func (x *JudgeResponse) GetExecTimeMs() uint32 {
	if x != nil {
		return x.ExecTimeMs
	}
	return 0
}

func (x *JudgeResponse) GetExecMemoryKib() uint32 {
	if x != nil {
		return x.ExecMemoryKib
	}
	return 0
}

func (x *JudgeResponse) GetCompilerMessage() string {
	if x != nil {
		return x.CompilerMessage
	}
	return ""
}

func (x *JudgeResponse) GetDetail() *ExecutionResultDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// AtCoder でいうコードテスト向けのリクエスト
type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCode         string  `protobuf:"bytes,1,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	LangId             string  `protobuf:"bytes,2,opt,name=lang_id,json=langId,proto3" json:"lang_id,omitempty"`
	Stdin              string  `protobuf:"bytes,3,opt,name=stdin,proto3" json:"stdin,omitempty"`
	ExecTimeLimitMs    uint32  `protobuf:"varint,4,opt,name=exec_time_limit_ms,json=execTimeLimitMs,proto3" json:"exec_time_limit_ms,omitempty"`          // 実行時間制限 [ms]
	ExecMemoryLimitMib uint32  `protobuf:"varint,5,opt,name=exec_memory_limit_mib,json=execMemoryLimitMib,proto3" json:"exec_memory_limit_mib,omitempty"` // 実行時メモリ制限 [MiB]
	StdoutLimitKib     *uint32 `protobuf:"varint,6,opt,name=stdout_limit_kib,json=stdoutLimitKib,proto3,oneof" json:"stdout_limit_kib,omitempty"`
	StderrLimitKib     *uint32 `protobuf:"varint,7,opt,name=stderr_limit_kib,json=stderrLimitKib,proto3,oneof" json:"stderr_limit_kib,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_judge_v1_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_judge_v1_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_judge_v1_messages_proto_rawDescGZIP(), []int{4}
}

func (x *RunRequest) GetSourceCode() string {
	if x != nil {
		return x.SourceCode
	}
	return ""
}

func (x *RunRequest) GetLangId() string {
	if x != nil {
		return x.LangId
	}
	return ""
}

func (x *RunRequest) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *RunRequest) GetExecTimeLimitMs() uint32 {
	if x != nil {
		return x.ExecTimeLimitMs
	}
	return 0
}

func (x *RunRequest) GetExecMemoryLimitMib() uint32 {
	if x != nil {
		return x.ExecMemoryLimitMib
	}
	return 0
}

func (x *RunRequest) GetStdoutLimitKib() uint32 {
	if x != nil && x.StdoutLimitKib != nil {
		return *x.StdoutLimitKib
	}
	return 0
}

func (x *RunRequest) GetStderrLimitKib() uint32 {
	if x != nil && x.StderrLimitKib != nil {
		return *x.StderrLimitKib
	}
	return 0
}

type RunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecTimeMs      uint32                 `protobuf:"varint,1,opt,name=exec_time_ms,json=execTimeMs,proto3" json:"exec_time_ms,omitempty"`
	ExecMemoryKib   uint32                 `protobuf:"varint,2,opt,name=exec_memory_kib,json=execMemoryKib,proto3" json:"exec_memory_kib,omitempty"`
	CompilerMessage string                 `protobuf:"bytes,3,opt,name=compiler_message,json=compilerMessage,proto3" json:"compiler_message,omitempty"`
	Detail          *ExecutionResultDetail `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_judge_v1_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_judge_v1_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_judge_v1_messages_proto_rawDescGZIP(), []int{5}
}

func (x *RunResponse) GetExecTimeMs() uint32 {
	if x != nil {
		return x.ExecTimeMs
	}
	return 0
}

func (x *RunResponse) GetExecMemoryKib() uint32 {
	if x != nil {
		return x.ExecMemoryKib
	}
	return 0
}

func (x *RunResponse) GetCompilerMessage() string {
	if x != nil {
		return x.CompilerMessage
	}
	return ""
}

func (x *RunResponse) GetDetail() *ExecutionResultDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

var File_judge_v1_messages_proto protoreflect.FileDescriptor

var file_judge_v1_messages_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x19, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe9, 0x03, 0x0a, 0x0c, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6d, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x62, 0x12, 0x30, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x12, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x77,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6b, 0x69, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0e,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4b, 0x69, 0x62, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x6b, 0x69, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0e, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4b, 0x69, 0x62, 0x88, 0x01, 0x01,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6b, 0x69, 0x62, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6b, 0x69,
	0x62, 0x22, 0x9d, 0x02, 0x0a, 0x0d, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x62, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0xc4, 0x02, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x64, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e,
	0x12, 0x2b, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6d, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x78,
	0x65, 0x63, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x62,
	0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x6b, 0x69, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4b, 0x69, 0x62, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6b, 0x69, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x64,
	0x65, 0x72, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4b, 0x69, 0x62, 0x88, 0x01, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6b, 0x69, 0x62, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6b, 0x69, 0x62, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b,
	0x69, 0x62, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0xa1, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x7a, 0x70, 0x70, 0x2d, 0x64, 0x65, 0x76, 0x2d, 0x74, 0x65,
	0x61, 0x6d, 0x2f, 0x73, 0x7a, 0x70, 0x70, 0x2d, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2f, 0x76, 0x31, 0x3b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4a, 0x58,
	0x58, 0xaa, 0x02, 0x08, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x09, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_judge_v1_messages_proto_rawDescOnce sync.Once
	file_judge_v1_messages_proto_rawDescData = file_judge_v1_messages_proto_rawDesc
)

func file_judge_v1_messages_proto_rawDescGZIP() []byte {
	file_judge_v1_messages_proto_rawDescOnce.Do(func() {
		file_judge_v1_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_judge_v1_messages_proto_rawDescData)
	})
	return file_judge_v1_messages_proto_rawDescData
}

var file_judge_v1_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_judge_v1_messages_proto_goTypes = []interface{}{
	(*PingRequest)(nil),           // 0: judge.v1.PingRequest
	(*PingResponse)(nil),          // 1: judge.v1.PingResponse
	(*JudgeRequest)(nil),          // 2: judge.v1.JudgeRequest
	(*JudgeResponse)(nil),         // 3: judge.v1.JudgeResponse
	(*RunRequest)(nil),            // 4: judge.v1.RunRequest
	(*RunResponse)(nil),           // 5: judge.v1.RunResponse
	(*JudgeType)(nil),             // 6: judge.v1.JudgeType
	(*Testcase)(nil),              // 7: judge.v1.Testcase
	(JudgeStatus)(0),              // 8: judge.v1.JudgeStatus
	(*ExecutionResultDetail)(nil), // 9: judge.v1.ExecutionResultDetail
}
var file_judge_v1_messages_proto_depIdxs = []int32{
	6, // 0: judge.v1.JudgeRequest.judge_type:type_name -> judge.v1.JudgeType
	7, // 1: judge.v1.JudgeRequest.testcases:type_name -> judge.v1.Testcase
	8, // 2: judge.v1.JudgeResponse.status:type_name -> judge.v1.JudgeStatus
	9, // 3: judge.v1.JudgeResponse.detail:type_name -> judge.v1.ExecutionResultDetail
	9, // 4: judge.v1.RunResponse.detail:type_name -> judge.v1.ExecutionResultDetail
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_judge_v1_messages_proto_init() }
func file_judge_v1_messages_proto_init() {
	if File_judge_v1_messages_proto != nil {
		return
	}
	file_judge_v1_judge_type_proto_init()
	file_judge_v1_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_judge_v1_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_judge_v1_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_judge_v1_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_judge_v1_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_judge_v1_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_judge_v1_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_judge_v1_messages_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_judge_v1_messages_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_judge_v1_messages_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_judge_v1_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_judge_v1_messages_proto_goTypes,
		DependencyIndexes: file_judge_v1_messages_proto_depIdxs,
		MessageInfos:      file_judge_v1_messages_proto_msgTypes,
	}.Build()
	File_judge_v1_messages_proto = out.File
	file_judge_v1_messages_proto_rawDesc = nil
	file_judge_v1_messages_proto_goTypes = nil
	file_judge_v1_messages_proto_depIdxs = nil
}
