// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: backend/v1/judge_service.proto

package backendv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JudgeService_Submit_FullMethodName              = "/backend.v1.JudgeService/Submit"
	JudgeService_GetSubmissionDetail_FullMethodName = "/backend.v1.JudgeService/GetSubmissionDetail"
	JudgeService_ListSubmissions_FullMethodName     = "/backend.v1.JudgeService/ListSubmissions"
	JudgeService_GetJudgeProgress_FullMethodName    = "/backend.v1.JudgeService/GetJudgeProgress"
)

// JudgeServiceClient is the client API for JudgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JudgeServiceClient interface {
	// 提出する
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	// 提出の詳細を取得
	GetSubmissionDetail(ctx context.Context, in *GetSubmissionDetailRequest, opts ...grpc.CallOption) (*GetSubmissionDetailResponse, error)
	// 提出一覧を取得
	ListSubmissions(ctx context.Context, in *ListSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error)
	// ジャッジの進捗を取得
	GetJudgeProgress(ctx context.Context, in *GetJudgeProgressRequest, opts ...grpc.CallOption) (JudgeService_GetJudgeProgressClient, error)
}

type judgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJudgeServiceClient(cc grpc.ClientConnInterface) JudgeServiceClient {
	return &judgeServiceClient{cc}
}

func (c *judgeServiceClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, JudgeService_Submit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) GetSubmissionDetail(ctx context.Context, in *GetSubmissionDetailRequest, opts ...grpc.CallOption) (*GetSubmissionDetailResponse, error) {
	out := new(GetSubmissionDetailResponse)
	err := c.cc.Invoke(ctx, JudgeService_GetSubmissionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) ListSubmissions(ctx context.Context, in *ListSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error) {
	out := new(ListSubmissionsResponse)
	err := c.cc.Invoke(ctx, JudgeService_ListSubmissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) GetJudgeProgress(ctx context.Context, in *GetJudgeProgressRequest, opts ...grpc.CallOption) (JudgeService_GetJudgeProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &JudgeService_ServiceDesc.Streams[0], JudgeService_GetJudgeProgress_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &judgeServiceGetJudgeProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JudgeService_GetJudgeProgressClient interface {
	Recv() (*GetJudgeProgressResponse, error)
	grpc.ClientStream
}

type judgeServiceGetJudgeProgressClient struct {
	grpc.ClientStream
}

func (x *judgeServiceGetJudgeProgressClient) Recv() (*GetJudgeProgressResponse, error) {
	m := new(GetJudgeProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JudgeServiceServer is the server API for JudgeService service.
// All implementations should embed UnimplementedJudgeServiceServer
// for forward compatibility
type JudgeServiceServer interface {
	// 提出する
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
	// 提出の詳細を取得
	GetSubmissionDetail(context.Context, *GetSubmissionDetailRequest) (*GetSubmissionDetailResponse, error)
	// 提出一覧を取得
	ListSubmissions(context.Context, *ListSubmissionsRequest) (*ListSubmissionsResponse, error)
	// ジャッジの進捗を取得
	GetJudgeProgress(*GetJudgeProgressRequest, JudgeService_GetJudgeProgressServer) error
}

// UnimplementedJudgeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJudgeServiceServer struct {
}

func (UnimplementedJudgeServiceServer) Submit(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedJudgeServiceServer) GetSubmissionDetail(context.Context, *GetSubmissionDetailRequest) (*GetSubmissionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionDetail not implemented")
}
func (UnimplementedJudgeServiceServer) ListSubmissions(context.Context, *ListSubmissionsRequest) (*ListSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissions not implemented")
}
func (UnimplementedJudgeServiceServer) GetJudgeProgress(*GetJudgeProgressRequest, JudgeService_GetJudgeProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJudgeProgress not implemented")
}

// UnsafeJudgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JudgeServiceServer will
// result in compilation errors.
type UnsafeJudgeServiceServer interface {
	mustEmbedUnimplementedJudgeServiceServer()
}

func RegisterJudgeServiceServer(s grpc.ServiceRegistrar, srv JudgeServiceServer) {
	s.RegisterService(&JudgeService_ServiceDesc, srv)
}

func _JudgeService_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_GetSubmissionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).GetSubmissionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_GetSubmissionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).GetSubmissionDetail(ctx, req.(*GetSubmissionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_ListSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).ListSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_ListSubmissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).ListSubmissions(ctx, req.(*ListSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_GetJudgeProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJudgeProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JudgeServiceServer).GetJudgeProgress(m, &judgeServiceGetJudgeProgressServer{stream})
}

type JudgeService_GetJudgeProgressServer interface {
	Send(*GetJudgeProgressResponse) error
	grpc.ServerStream
}

type judgeServiceGetJudgeProgressServer struct {
	grpc.ServerStream
}

func (x *judgeServiceGetJudgeProgressServer) Send(m *GetJudgeProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

// JudgeService_ServiceDesc is the grpc.ServiceDesc for JudgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JudgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.v1.JudgeService",
	HandlerType: (*JudgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _JudgeService_Submit_Handler,
		},
		{
			MethodName: "GetSubmissionDetail",
			Handler:    _JudgeService_GetSubmissionDetail_Handler,
		},
		{
			MethodName: "ListSubmissions",
			Handler:    _JudgeService_ListSubmissions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJudgeProgress",
			Handler:       _JudgeService_GetJudgeProgress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend/v1/judge_service.proto",
}
