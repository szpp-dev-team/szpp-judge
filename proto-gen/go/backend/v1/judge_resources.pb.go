// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: backend/v1/judge_resources.proto

package backendv1

import (
	v1 "github.com/szpp-dev-team/szpp-judge/proto-gen/go/judge/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 提出の詳細
type SubmissionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// user
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// contest
	ContestId *int32 `protobuf:"varint,4,opt,name=contest_id,json=contestId,proto3,oneof" json:"contest_id,omitempty"` // コンテスト中の提出でなければ null
	// task
	TaskId    int32  `protobuf:"varint,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskTitle string `protobuf:"bytes,6,opt,name=task_title,json=taskTitle,proto3" json:"task_title,omitempty"`
	Score     int32  `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	// submission
	LangId     string `protobuf:"bytes,8,opt,name=lang_id,json=langId,proto3" json:"lang_id,omitempty"`
	SourceCode string `protobuf:"bytes,9,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	// judge
	Status          v1.JudgeStatus    `protobuf:"varint,10,opt,name=status,proto3,enum=judge.v1.JudgeStatus" json:"status,omitempty"`                  // ジャッジ中は judge.v1.JudgeStatus.WJ
	ExecTimeMs      *uint32           `protobuf:"varint,11,opt,name=exec_time_ms,json=execTimeMs,proto3,oneof" json:"exec_time_ms,omitempty"`          // ジャッジ中はnull
	ExecMemoryKib   *uint32           `protobuf:"varint,12,opt,name=exec_memory_kib,json=execMemoryKib,proto3,oneof" json:"exec_memory_kib,omitempty"` // ジャッジ中はnull
	TestcaseResults []*TestcaseResult `protobuf:"bytes,13,rep,name=testcase_results,json=testcaseResults,proto3" json:"testcase_results,omitempty"`    // ジャッジ完了したテストケースの実行情報
	// timestamp
	SubmittedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
}

func (x *SubmissionDetail) Reset() {
	*x = SubmissionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_judge_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionDetail) ProtoMessage() {}

func (x *SubmissionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_judge_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionDetail.ProtoReflect.Descriptor instead.
func (*SubmissionDetail) Descriptor() ([]byte, []int) {
	return file_backend_v1_judge_resources_proto_rawDescGZIP(), []int{0}
}

func (x *SubmissionDetail) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubmissionDetail) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubmissionDetail) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SubmissionDetail) GetContestId() int32 {
	if x != nil && x.ContestId != nil {
		return *x.ContestId
	}
	return 0
}

func (x *SubmissionDetail) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SubmissionDetail) GetTaskTitle() string {
	if x != nil {
		return x.TaskTitle
	}
	return ""
}

func (x *SubmissionDetail) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SubmissionDetail) GetLangId() string {
	if x != nil {
		return x.LangId
	}
	return ""
}

func (x *SubmissionDetail) GetSourceCode() string {
	if x != nil {
		return x.SourceCode
	}
	return ""
}

func (x *SubmissionDetail) GetStatus() v1.JudgeStatus {
	if x != nil {
		return x.Status
	}
	return v1.JudgeStatus(0)
}

func (x *SubmissionDetail) GetExecTimeMs() uint32 {
	if x != nil && x.ExecTimeMs != nil {
		return *x.ExecTimeMs
	}
	return 0
}

func (x *SubmissionDetail) GetExecMemoryKib() uint32 {
	if x != nil && x.ExecMemoryKib != nil {
		return *x.ExecMemoryKib
	}
	return 0
}

func (x *SubmissionDetail) GetTestcaseResults() []*TestcaseResult {
	if x != nil {
		return x.TestcaseResults
	}
	return nil
}

func (x *SubmissionDetail) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *SubmissionDetail) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SubmissionDetail) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 提出一覧用
type SubmissionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// user
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// contest
	ContestId *int32 `protobuf:"varint,4,opt,name=contest_id,json=contestId,proto3,oneof" json:"contest_id,omitempty"`
	// task
	TaskId    int32  `protobuf:"varint,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskTitle string `protobuf:"bytes,6,opt,name=task_title,json=taskTitle,proto3" json:"task_title,omitempty"`
	Score     int32  `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	// submission
	LangId string `protobuf:"bytes,8,opt,name=lang_id,json=langId,proto3" json:"lang_id,omitempty"`
	// judge
	JudgeStatus   v1.JudgeStatus `protobuf:"varint,9,opt,name=judge_status,json=judgeStatus,proto3,enum=judge.v1.JudgeStatus" json:"judge_status,omitempty"` // ジャッジ中は judge.v1.JudgeStatus.WJ
	ExecTimeMs    *uint32        `protobuf:"varint,10,opt,name=exec_time_ms,json=execTimeMs,proto3,oneof" json:"exec_time_ms,omitempty"`                     // ジャッジ中はnull
	ExecMemoryKib *uint32        `protobuf:"varint,11,opt,name=exec_memory_kib,json=execMemoryKib,proto3,oneof" json:"exec_memory_kib,omitempty"`            // ジャッジ中はnull
	// timestamp
	SubmittedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
}

func (x *SubmissionSummary) Reset() {
	*x = SubmissionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_judge_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionSummary) ProtoMessage() {}

func (x *SubmissionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_judge_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionSummary.ProtoReflect.Descriptor instead.
func (*SubmissionSummary) Descriptor() ([]byte, []int) {
	return file_backend_v1_judge_resources_proto_rawDescGZIP(), []int{1}
}

func (x *SubmissionSummary) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubmissionSummary) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubmissionSummary) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SubmissionSummary) GetContestId() int32 {
	if x != nil && x.ContestId != nil {
		return *x.ContestId
	}
	return 0
}

func (x *SubmissionSummary) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SubmissionSummary) GetTaskTitle() string {
	if x != nil {
		return x.TaskTitle
	}
	return ""
}

func (x *SubmissionSummary) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SubmissionSummary) GetLangId() string {
	if x != nil {
		return x.LangId
	}
	return ""
}

func (x *SubmissionSummary) GetJudgeStatus() v1.JudgeStatus {
	if x != nil {
		return x.JudgeStatus
	}
	return v1.JudgeStatus(0)
}

func (x *SubmissionSummary) GetExecTimeMs() uint32 {
	if x != nil && x.ExecTimeMs != nil {
		return *x.ExecTimeMs
	}
	return 0
}

func (x *SubmissionSummary) GetExecMemoryKib() uint32 {
	if x != nil && x.ExecMemoryKib != nil {
		return *x.ExecMemoryKib
	}
	return 0
}

func (x *SubmissionSummary) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

// テストケース一つあたりの結果
type TestcaseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestcaseName  string         `protobuf:"bytes,1,opt,name=testcase_name,json=testcaseName,proto3" json:"testcase_name,omitempty"`
	JudgeStatus   v1.JudgeStatus `protobuf:"varint,2,opt,name=judge_status,json=judgeStatus,proto3,enum=judge.v1.JudgeStatus" json:"judge_status,omitempty"`
	ExecTimeMs    uint32         `protobuf:"varint,3,opt,name=exec_time_ms,json=execTimeMs,proto3" json:"exec_time_ms,omitempty"`
	ExecMemoryKib uint32         `protobuf:"varint,4,opt,name=exec_memory_kib,json=execMemoryKib,proto3" json:"exec_memory_kib,omitempty"`
}

func (x *TestcaseResult) Reset() {
	*x = TestcaseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_judge_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestcaseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestcaseResult) ProtoMessage() {}

func (x *TestcaseResult) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_judge_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestcaseResult.ProtoReflect.Descriptor instead.
func (*TestcaseResult) Descriptor() ([]byte, []int) {
	return file_backend_v1_judge_resources_proto_rawDescGZIP(), []int{2}
}

func (x *TestcaseResult) GetTestcaseName() string {
	if x != nil {
		return x.TestcaseName
	}
	return ""
}

func (x *TestcaseResult) GetJudgeStatus() v1.JudgeStatus {
	if x != nil {
		return x.JudgeStatus
	}
	return v1.JudgeStatus(0)
}

func (x *TestcaseResult) GetExecTimeMs() uint32 {
	if x != nil {
		return x.ExecTimeMs
	}
	return 0
}

func (x *TestcaseResult) GetExecMemoryKib() uint32 {
	if x != nil {
		return x.ExecMemoryKib
	}
	return 0
}

// ジャッジの途中経過　WA(2/10) など。
type JudgeProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             v1.JudgeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=judge.v1.JudgeStatus" json:"status,omitempty"`                         // ジャッジ済みのケースが全てACであれば UNSPECIFIED そうでなければ最初に出た非ACの結果
	TotalTestcases     int32          `protobuf:"varint,2,opt,name=total_testcases,json=totalTestcases,proto3" json:"total_testcases,omitempty"`             // テストケースの総数
	CompletedTestcases int32          `protobuf:"varint,3,opt,name=completed_testcases,json=completedTestcases,proto3" json:"completed_testcases,omitempty"` // ジャッジ済みのテストケース数
}

func (x *JudgeProgress) Reset() {
	*x = JudgeProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_judge_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeProgress) ProtoMessage() {}

func (x *JudgeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_judge_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeProgress.ProtoReflect.Descriptor instead.
func (*JudgeProgress) Descriptor() ([]byte, []int) {
	return file_backend_v1_judge_resources_proto_rawDescGZIP(), []int{3}
}

func (x *JudgeProgress) GetStatus() v1.JudgeStatus {
	if x != nil {
		return x.Status
	}
	return v1.JudgeStatus(0)
}

func (x *JudgeProgress) GetTotalTestcases() int32 {
	if x != nil {
		return x.TotalTestcases
	}
	return 0
}

func (x *JudgeProgress) GetCompletedTestcases() int32 {
	if x != nil {
		return x.CompletedTestcases
	}
	return 0
}

var File_backend_v1_judge_resources_proto protoreflect.FileDescriptor

var file_backend_v1_judge_resources_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x05, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02,
	0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x62, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xe4, 0x03, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x62,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x62, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x62, 0x22, 0xb9, 0x01,
	0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x6b, 0x69, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x62, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x4a, 0x75,
	0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x42, 0xb5, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x7a, 0x70, 0x70, 0x2d,
	0x64, 0x65, 0x76, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x7a, 0x70, 0x70, 0x2d, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0b, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_v1_judge_resources_proto_rawDescOnce sync.Once
	file_backend_v1_judge_resources_proto_rawDescData = file_backend_v1_judge_resources_proto_rawDesc
)

func file_backend_v1_judge_resources_proto_rawDescGZIP() []byte {
	file_backend_v1_judge_resources_proto_rawDescOnce.Do(func() {
		file_backend_v1_judge_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_v1_judge_resources_proto_rawDescData)
	})
	return file_backend_v1_judge_resources_proto_rawDescData
}

var file_backend_v1_judge_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_backend_v1_judge_resources_proto_goTypes = []interface{}{
	(*SubmissionDetail)(nil),      // 0: backend.v1.SubmissionDetail
	(*SubmissionSummary)(nil),     // 1: backend.v1.SubmissionSummary
	(*TestcaseResult)(nil),        // 2: backend.v1.TestcaseResult
	(*JudgeProgress)(nil),         // 3: backend.v1.JudgeProgress
	(v1.JudgeStatus)(0),           // 4: judge.v1.JudgeStatus
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_backend_v1_judge_resources_proto_depIdxs = []int32{
	4, // 0: backend.v1.SubmissionDetail.status:type_name -> judge.v1.JudgeStatus
	2, // 1: backend.v1.SubmissionDetail.testcase_results:type_name -> backend.v1.TestcaseResult
	5, // 2: backend.v1.SubmissionDetail.submitted_at:type_name -> google.protobuf.Timestamp
	5, // 3: backend.v1.SubmissionDetail.created_at:type_name -> google.protobuf.Timestamp
	5, // 4: backend.v1.SubmissionDetail.updated_at:type_name -> google.protobuf.Timestamp
	4, // 5: backend.v1.SubmissionSummary.judge_status:type_name -> judge.v1.JudgeStatus
	5, // 6: backend.v1.SubmissionSummary.submitted_at:type_name -> google.protobuf.Timestamp
	4, // 7: backend.v1.TestcaseResult.judge_status:type_name -> judge.v1.JudgeStatus
	4, // 8: backend.v1.JudgeProgress.status:type_name -> judge.v1.JudgeStatus
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_backend_v1_judge_resources_proto_init() }
func file_backend_v1_judge_resources_proto_init() {
	if File_backend_v1_judge_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_v1_judge_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_judge_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_judge_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestcaseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_judge_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_v1_judge_resources_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_backend_v1_judge_resources_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_v1_judge_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_backend_v1_judge_resources_proto_goTypes,
		DependencyIndexes: file_backend_v1_judge_resources_proto_depIdxs,
		MessageInfos:      file_backend_v1_judge_resources_proto_msgTypes,
	}.Build()
	File_backend_v1_judge_resources_proto = out.File
	file_backend_v1_judge_resources_proto_rawDesc = nil
	file_backend_v1_judge_resources_proto_goTypes = nil
	file_backend_v1_judge_resources_proto_depIdxs = nil
}
