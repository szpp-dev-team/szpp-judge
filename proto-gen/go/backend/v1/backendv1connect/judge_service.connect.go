// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/v1/judge_service.proto

package backendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/szpp-dev-team/szpp-judge/proto-gen/go/backend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// JudgeServiceName is the fully-qualified name of the JudgeService service.
	JudgeServiceName = "backend.v1.JudgeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JudgeServiceSubmitProcedure is the fully-qualified name of the JudgeService's Submit RPC.
	JudgeServiceSubmitProcedure = "/backend.v1.JudgeService/Submit"
	// JudgeServiceGetSubmissionDetailProcedure is the fully-qualified name of the JudgeService's
	// GetSubmissionDetail RPC.
	JudgeServiceGetSubmissionDetailProcedure = "/backend.v1.JudgeService/GetSubmissionDetail"
	// JudgeServiceListSubmissionsProcedure is the fully-qualified name of the JudgeService's
	// ListSubmissions RPC.
	JudgeServiceListSubmissionsProcedure = "/backend.v1.JudgeService/ListSubmissions"
	// JudgeServiceGetJudgeProgressProcedure is the fully-qualified name of the JudgeService's
	// GetJudgeProgress RPC.
	JudgeServiceGetJudgeProgressProcedure = "/backend.v1.JudgeService/GetJudgeProgress"
)

// JudgeServiceClient is a client for the backend.v1.JudgeService service.
type JudgeServiceClient interface {
	// 提出する
	Submit(context.Context, *connect.Request[v1.SubmitRequest]) (*connect.Response[v1.SubmitResponse], error)
	// 提出の詳細を取得
	GetSubmissionDetail(context.Context, *connect.Request[v1.GetSubmissionDetailRequest]) (*connect.Response[v1.GetSubmissionDetailResponse], error)
	// 提出一覧を取得
	ListSubmissions(context.Context, *connect.Request[v1.ListSubmissionsRequest]) (*connect.Response[v1.ListSubmissionsResponse], error)
	// ジャッジの進捗を取得
	GetJudgeProgress(context.Context, *connect.Request[v1.GetJudgeProgressRequest]) (*connect.Response[v1.GetJudgeProgressResponse], error)
}

// NewJudgeServiceClient constructs a client for the backend.v1.JudgeService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJudgeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JudgeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &judgeServiceClient{
		submit: connect.NewClient[v1.SubmitRequest, v1.SubmitResponse](
			httpClient,
			baseURL+JudgeServiceSubmitProcedure,
			opts...,
		),
		getSubmissionDetail: connect.NewClient[v1.GetSubmissionDetailRequest, v1.GetSubmissionDetailResponse](
			httpClient,
			baseURL+JudgeServiceGetSubmissionDetailProcedure,
			opts...,
		),
		listSubmissions: connect.NewClient[v1.ListSubmissionsRequest, v1.ListSubmissionsResponse](
			httpClient,
			baseURL+JudgeServiceListSubmissionsProcedure,
			opts...,
		),
		getJudgeProgress: connect.NewClient[v1.GetJudgeProgressRequest, v1.GetJudgeProgressResponse](
			httpClient,
			baseURL+JudgeServiceGetJudgeProgressProcedure,
			opts...,
		),
	}
}

// judgeServiceClient implements JudgeServiceClient.
type judgeServiceClient struct {
	submit              *connect.Client[v1.SubmitRequest, v1.SubmitResponse]
	getSubmissionDetail *connect.Client[v1.GetSubmissionDetailRequest, v1.GetSubmissionDetailResponse]
	listSubmissions     *connect.Client[v1.ListSubmissionsRequest, v1.ListSubmissionsResponse]
	getJudgeProgress    *connect.Client[v1.GetJudgeProgressRequest, v1.GetJudgeProgressResponse]
}

// Submit calls backend.v1.JudgeService.Submit.
func (c *judgeServiceClient) Submit(ctx context.Context, req *connect.Request[v1.SubmitRequest]) (*connect.Response[v1.SubmitResponse], error) {
	return c.submit.CallUnary(ctx, req)
}

// GetSubmissionDetail calls backend.v1.JudgeService.GetSubmissionDetail.
func (c *judgeServiceClient) GetSubmissionDetail(ctx context.Context, req *connect.Request[v1.GetSubmissionDetailRequest]) (*connect.Response[v1.GetSubmissionDetailResponse], error) {
	return c.getSubmissionDetail.CallUnary(ctx, req)
}

// ListSubmissions calls backend.v1.JudgeService.ListSubmissions.
func (c *judgeServiceClient) ListSubmissions(ctx context.Context, req *connect.Request[v1.ListSubmissionsRequest]) (*connect.Response[v1.ListSubmissionsResponse], error) {
	return c.listSubmissions.CallUnary(ctx, req)
}

// GetJudgeProgress calls backend.v1.JudgeService.GetJudgeProgress.
func (c *judgeServiceClient) GetJudgeProgress(ctx context.Context, req *connect.Request[v1.GetJudgeProgressRequest]) (*connect.Response[v1.GetJudgeProgressResponse], error) {
	return c.getJudgeProgress.CallUnary(ctx, req)
}

// JudgeServiceHandler is an implementation of the backend.v1.JudgeService service.
type JudgeServiceHandler interface {
	// 提出する
	Submit(context.Context, *connect.Request[v1.SubmitRequest]) (*connect.Response[v1.SubmitResponse], error)
	// 提出の詳細を取得
	GetSubmissionDetail(context.Context, *connect.Request[v1.GetSubmissionDetailRequest]) (*connect.Response[v1.GetSubmissionDetailResponse], error)
	// 提出一覧を取得
	ListSubmissions(context.Context, *connect.Request[v1.ListSubmissionsRequest]) (*connect.Response[v1.ListSubmissionsResponse], error)
	// ジャッジの進捗を取得
	GetJudgeProgress(context.Context, *connect.Request[v1.GetJudgeProgressRequest]) (*connect.Response[v1.GetJudgeProgressResponse], error)
}

// NewJudgeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJudgeServiceHandler(svc JudgeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	judgeServiceSubmitHandler := connect.NewUnaryHandler(
		JudgeServiceSubmitProcedure,
		svc.Submit,
		opts...,
	)
	judgeServiceGetSubmissionDetailHandler := connect.NewUnaryHandler(
		JudgeServiceGetSubmissionDetailProcedure,
		svc.GetSubmissionDetail,
		opts...,
	)
	judgeServiceListSubmissionsHandler := connect.NewUnaryHandler(
		JudgeServiceListSubmissionsProcedure,
		svc.ListSubmissions,
		opts...,
	)
	judgeServiceGetJudgeProgressHandler := connect.NewUnaryHandler(
		JudgeServiceGetJudgeProgressProcedure,
		svc.GetJudgeProgress,
		opts...,
	)
	return "/backend.v1.JudgeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JudgeServiceSubmitProcedure:
			judgeServiceSubmitHandler.ServeHTTP(w, r)
		case JudgeServiceGetSubmissionDetailProcedure:
			judgeServiceGetSubmissionDetailHandler.ServeHTTP(w, r)
		case JudgeServiceListSubmissionsProcedure:
			judgeServiceListSubmissionsHandler.ServeHTTP(w, r)
		case JudgeServiceGetJudgeProgressProcedure:
			judgeServiceGetJudgeProgressHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJudgeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJudgeServiceHandler struct{}

func (UnimplementedJudgeServiceHandler) Submit(context.Context, *connect.Request[v1.SubmitRequest]) (*connect.Response[v1.SubmitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.JudgeService.Submit is not implemented"))
}

func (UnimplementedJudgeServiceHandler) GetSubmissionDetail(context.Context, *connect.Request[v1.GetSubmissionDetailRequest]) (*connect.Response[v1.GetSubmissionDetailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.JudgeService.GetSubmissionDetail is not implemented"))
}

func (UnimplementedJudgeServiceHandler) ListSubmissions(context.Context, *connect.Request[v1.ListSubmissionsRequest]) (*connect.Response[v1.ListSubmissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.JudgeService.ListSubmissions is not implemented"))
}

func (UnimplementedJudgeServiceHandler) GetJudgeProgress(context.Context, *connect.Request[v1.GetJudgeProgressRequest]) (*connect.Response[v1.GetJudgeProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.JudgeService.GetJudgeProgress is not implemented"))
}
