// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: backend/v1/contest_resources.proto

package backendv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContestTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ExecTimeLimit   int32      `protobuf:"varint,3,opt,name=exec_time_limit,json=execTimeLimit,proto3" json:"exec_time_limit,omitempty"`
	ExecMemoryLimit int32      `protobuf:"varint,4,opt,name=exec_memory_limit,json=execMemoryLimit,proto3" json:"exec_memory_limit,omitempty"`
	Difficulty      Difficulty `protobuf:"varint,5,opt,name=difficulty,proto3,enum=backend.v1.Difficulty" json:"difficulty,omitempty"`
	Score           int32      `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ContestTask) Reset() {
	*x = ContestTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_contest_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestTask) ProtoMessage() {}

func (x *ContestTask) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_contest_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestTask.ProtoReflect.Descriptor instead.
func (*ContestTask) Descriptor() ([]byte, []int) {
	return file_backend_v1_contest_resources_proto_rawDescGZIP(), []int{0}
}

func (x *ContestTask) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContestTask) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ContestTask) GetExecTimeLimit() int32 {
	if x != nil {
		return x.ExecTimeLimit
	}
	return 0
}

func (x *ContestTask) GetExecMemoryLimit() int32 {
	if x != nil {
		return x.ExecMemoryLimit
	}
	return 0
}

func (x *ContestTask) GetDifficulty() Difficulty {
	if x != nil {
		return x.Difficulty
	}
	return Difficulty_DIFFICULTY_UNSPECIFIED
}

func (x *ContestTask) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type Contest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Slug        string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TaskIds     []int32                `protobuf:"varint,5,rep,packed,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	StartAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
}

func (x *Contest) Reset() {
	*x = Contest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_contest_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest) ProtoMessage() {}

func (x *Contest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_contest_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest.ProtoReflect.Descriptor instead.
func (*Contest) Descriptor() ([]byte, []int) {
	return file_backend_v1_contest_resources_proto_rawDescGZIP(), []int{1}
}

func (x *Contest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Contest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Contest) GetTaskIds() []int32 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *Contest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Contest) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type StandingsElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank              int32                          `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	UserId            int32                          `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName          string                         `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	TotalScore        int32                          `protobuf:"varint,4,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	TotalPenaltyCount int32                          `protobuf:"varint,5,opt,name=total_penalty_count,json=totalPenaltyCount,proto3" json:"total_penalty_count,omitempty"`
	LatestAcAt        *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=latest_ac_at,json=latestAcAt,proto3" json:"latest_ac_at,omitempty"`
	TaskDetailList    []*StandingsElement_TaskDetail `protobuf:"bytes,7,rep,name=task_detail_list,json=taskDetailList,proto3" json:"task_detail_list,omitempty"`
}

func (x *StandingsElement) Reset() {
	*x = StandingsElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_contest_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandingsElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandingsElement) ProtoMessage() {}

func (x *StandingsElement) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_contest_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandingsElement.ProtoReflect.Descriptor instead.
func (*StandingsElement) Descriptor() ([]byte, []int) {
	return file_backend_v1_contest_resources_proto_rawDescGZIP(), []int{2}
}

func (x *StandingsElement) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *StandingsElement) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StandingsElement) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *StandingsElement) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *StandingsElement) GetTotalPenaltyCount() int32 {
	if x != nil {
		return x.TotalPenaltyCount
	}
	return 0
}

func (x *StandingsElement) GetLatestAcAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestAcAt
	}
	return nil
}

func (x *StandingsElement) GetTaskDetailList() []*StandingsElement_TaskDetail {
	if x != nil {
		return x.TaskDetailList
	}
	return nil
}

type SubmissionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int32  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Score  *int32 `protobuf:"varint,2,opt,name=score,proto3,oneof" json:"score,omitempty"`
}

func (x *SubmissionStatus) Reset() {
	*x = SubmissionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_contest_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionStatus) ProtoMessage() {}

func (x *SubmissionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_contest_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionStatus.ProtoReflect.Descriptor instead.
func (*SubmissionStatus) Descriptor() ([]byte, []int) {
	return file_backend_v1_contest_resources_proto_rawDescGZIP(), []int{3}
}

func (x *SubmissionStatus) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SubmissionStatus) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type StandingsElement_TaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	PenaltyCount int32                  `protobuf:"varint,2,opt,name=penalty_count,json=penaltyCount,proto3" json:"penalty_count,omitempty"`
	AcSubmitId   int32                  `protobuf:"varint,3,opt,name=ac_submit_id,json=acSubmitId,proto3" json:"ac_submit_id,omitempty"`
	AcElapsed    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ac_elapsed,json=acElapsed,proto3" json:"ac_elapsed,omitempty"`
}

func (x *StandingsElement_TaskDetail) Reset() {
	*x = StandingsElement_TaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1_contest_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandingsElement_TaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandingsElement_TaskDetail) ProtoMessage() {}

func (x *StandingsElement_TaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1_contest_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandingsElement_TaskDetail.ProtoReflect.Descriptor instead.
func (*StandingsElement_TaskDetail) Descriptor() ([]byte, []int) {
	return file_backend_v1_contest_resources_proto_rawDescGZIP(), []int{2, 0}
}

func (x *StandingsElement_TaskDetail) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *StandingsElement_TaskDetail) GetPenaltyCount() int32 {
	if x != nil {
		return x.PenaltyCount
	}
	return 0
}

func (x *StandingsElement_TaskDetail) GetAcSubmitId() int32 {
	if x != nil {
		return x.AcSubmitId
	}
	return 0
}

func (x *StandingsElement_TaskDetail) GetAcElapsed() *timestamppb.Timestamp {
	if x != nil {
		return x.AcElapsed
	}
	return nil
}

var File_backend_v1_contest_resources_proto protoreflect.FileDescriptor

var file_backend_v1_contest_resources_proto_rawDesc = []byte{
	0x0a, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x65,
	0x63, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0xe8, 0x03, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x63, 0x5f, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x63, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x22, 0x50, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x42, 0xb7, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x7a, 0x70, 0x70, 0x2d,
	0x64, 0x65, 0x76, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x7a, 0x70, 0x70, 0x2d, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0b, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_v1_contest_resources_proto_rawDescOnce sync.Once
	file_backend_v1_contest_resources_proto_rawDescData = file_backend_v1_contest_resources_proto_rawDesc
)

func file_backend_v1_contest_resources_proto_rawDescGZIP() []byte {
	file_backend_v1_contest_resources_proto_rawDescOnce.Do(func() {
		file_backend_v1_contest_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_v1_contest_resources_proto_rawDescData)
	})
	return file_backend_v1_contest_resources_proto_rawDescData
}

var file_backend_v1_contest_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_backend_v1_contest_resources_proto_goTypes = []interface{}{
	(*ContestTask)(nil),                 // 0: backend.v1.ContestTask
	(*Contest)(nil),                     // 1: backend.v1.Contest
	(*StandingsElement)(nil),            // 2: backend.v1.StandingsElement
	(*SubmissionStatus)(nil),            // 3: backend.v1.SubmissionStatus
	(*StandingsElement_TaskDetail)(nil), // 4: backend.v1.StandingsElement.TaskDetail
	(Difficulty)(0),                     // 5: backend.v1.Difficulty
	(*timestamppb.Timestamp)(nil),       // 6: google.protobuf.Timestamp
}
var file_backend_v1_contest_resources_proto_depIdxs = []int32{
	5, // 0: backend.v1.ContestTask.difficulty:type_name -> backend.v1.Difficulty
	6, // 1: backend.v1.Contest.start_at:type_name -> google.protobuf.Timestamp
	6, // 2: backend.v1.Contest.end_at:type_name -> google.protobuf.Timestamp
	6, // 3: backend.v1.StandingsElement.latest_ac_at:type_name -> google.protobuf.Timestamp
	4, // 4: backend.v1.StandingsElement.task_detail_list:type_name -> backend.v1.StandingsElement.TaskDetail
	6, // 5: backend.v1.StandingsElement.TaskDetail.ac_elapsed:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_backend_v1_contest_resources_proto_init() }
func file_backend_v1_contest_resources_proto_init() {
	if File_backend_v1_contest_resources_proto != nil {
		return
	}
	file_backend_v1_task_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_v1_contest_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_contest_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_contest_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandingsElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_contest_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1_contest_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandingsElement_TaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_v1_contest_resources_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_v1_contest_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_backend_v1_contest_resources_proto_goTypes,
		DependencyIndexes: file_backend_v1_contest_resources_proto_depIdxs,
		MessageInfos:      file_backend_v1_contest_resources_proto_msgTypes,
	}.Build()
	File_backend_v1_contest_resources_proto = out.File
	file_backend_v1_contest_resources_proto_rawDesc = nil
	file_backend_v1_contest_resources_proto_goTypes = nil
	file_backend_v1_contest_resources_proto_depIdxs = nil
}
