// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "backend/v1/services.proto" (package "backend.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HealthcheckService } from "./services";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PingResponse } from "./messages";
import type { PingRequest } from "./messages";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service backend.v1.HealthcheckService
 */
export interface IHealthcheckServiceClient {
    /**
     * @generated from protobuf rpc: Ping(backend.v1.PingRequest) returns (backend.v1.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse>;
}
/**
 * @generated from protobuf service backend.v1.HealthcheckService
 */
export class HealthcheckServiceClient implements IHealthcheckServiceClient, ServiceInfo {
    typeName = HealthcheckService.typeName;
    methods = HealthcheckService.methods;
    options = HealthcheckService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Ping(backend.v1.PingRequest) returns (backend.v1.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingRequest, PingResponse>("unary", this._transport, method, opt, input);
    }
}
