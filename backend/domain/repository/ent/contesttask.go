// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contesttask"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
)

// ContestTask is the model entity for the ContestTask schema.
type ContestTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// ContestID holds the value of the "contest_id" field.
	ContestID int `json:"contest_id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID int `json:"task_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContestTaskQuery when eager-loading is set.
	Edges        ContestTaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContestTaskEdges holds the relations/edges for other nodes in the graph.
type ContestTaskEdges struct {
	// Contest holds the value of the contest edge.
	Contest *Contest `json:"contest,omitempty"`
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ContestOrErr returns the Contest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContestTaskEdges) ContestOrErr() (*Contest, error) {
	if e.loadedTypes[0] {
		if e.Contest == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: contest.Label}
		}
		return e.Contest, nil
	}
	return nil, &NotLoadedError{edge: "contest"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContestTaskEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContestTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contesttask.FieldID, contesttask.FieldScore, contesttask.FieldContestID, contesttask.FieldTaskID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContestTask fields.
func (ct *ContestTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contesttask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = int(value.Int64)
		case contesttask.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				ct.Score = int(value.Int64)
			}
		case contesttask.FieldContestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contest_id", values[i])
			} else if value.Valid {
				ct.ContestID = int(value.Int64)
			}
		case contesttask.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				ct.TaskID = int(value.Int64)
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContestTask.
// This includes values selected through modifiers, order, etc.
func (ct *ContestTask) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// QueryContest queries the "contest" edge of the ContestTask entity.
func (ct *ContestTask) QueryContest() *ContestQuery {
	return NewContestTaskClient(ct.config).QueryContest(ct)
}

// QueryTask queries the "task" edge of the ContestTask entity.
func (ct *ContestTask) QueryTask() *TaskQuery {
	return NewContestTaskClient(ct.config).QueryTask(ct)
}

// Update returns a builder for updating this ContestTask.
// Note that you need to call ContestTask.Unwrap() before calling this method if this ContestTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *ContestTask) Update() *ContestTaskUpdateOne {
	return NewContestTaskClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the ContestTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *ContestTask) Unwrap() *ContestTask {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContestTask is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *ContestTask) String() string {
	var builder strings.Builder
	builder.WriteString("ContestTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", ct.Score))
	builder.WriteString(", ")
	builder.WriteString("contest_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.ContestID))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.TaskID))
	builder.WriteByte(')')
	return builder.String()
}

// ContestTasks is a parsable slice of ContestTask.
type ContestTasks []*ContestTask
