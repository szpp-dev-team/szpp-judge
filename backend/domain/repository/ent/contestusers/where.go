// Code generated by ent, DO NOT EDIT.

package contestusers

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldLTE(FieldID, id))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEQ(FieldRole, v))
}

// ContestID applies equality check predicate on the "contest_id" field. It's identical to ContestIDEQ.
func ContestID(v int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEQ(FieldContestID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEQ(FieldUserID, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldContainsFold(FieldRole, v))
}

// ContestIDEQ applies the EQ predicate on the "contest_id" field.
func ContestIDEQ(v int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEQ(FieldContestID, v))
}

// ContestIDNEQ applies the NEQ predicate on the "contest_id" field.
func ContestIDNEQ(v int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldNEQ(FieldContestID, v))
}

// ContestIDIn applies the In predicate on the "contest_id" field.
func ContestIDIn(vs ...int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldIn(FieldContestID, vs...))
}

// ContestIDNotIn applies the NotIn predicate on the "contest_id" field.
func ContestIDNotIn(vs ...int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldNotIn(FieldContestID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.ContestUsers {
	return predicate.ContestUsers(sql.FieldNotIn(FieldUserID, vs...))
}

// HasContests applies the HasEdge predicate on the "contests" edge.
func HasContests() predicate.ContestUsers {
	return predicate.ContestUsers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContestsTable, ContestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContestsWith applies the HasEdge predicate on the "contests" edge with a given conditions (other predicates).
func HasContestsWith(preds ...predicate.Contest) predicate.ContestUsers {
	return predicate.ContestUsers(func(s *sql.Selector) {
		step := newContestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.ContestUsers {
	return predicate.ContestUsers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.ContestUsers {
	return predicate.ContestUsers(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContestUsers) predicate.ContestUsers {
	return predicate.ContestUsers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContestUsers) predicate.ContestUsers {
	return predicate.ContestUsers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContestUsers) predicate.ContestUsers {
	return predicate.ContestUsers(func(s *sql.Selector) {
		p(s.Not())
	})
}
