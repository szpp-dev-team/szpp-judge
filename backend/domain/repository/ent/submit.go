// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/submit"
)

// Submit is the model entity for the Submit schema.
type Submit struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmitQuery when eager-loading is set.
	Edges        SubmitEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubmitEdges holds the relations/edges for other nodes in the graph.
type SubmitEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Language holds the value of the language edge.
	Language []*Language `json:"language,omitempty"`
	// TestcaseResult holds the value of the testcase_result edge.
	TestcaseResult []*TestcaseResult `json:"testcase_result,omitempty"`
	// SubmitContests holds the value of the submit_contests edge.
	SubmitContests []*Contest `json:"submit_contests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e SubmitEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading.
func (e SubmitEdges) LanguageOrErr() ([]*Language, error) {
	if e.loadedTypes[1] {
		return e.Language, nil
	}
	return nil, &NotLoadedError{edge: "language"}
}

// TestcaseResultOrErr returns the TestcaseResult value or an error if the edge
// was not loaded in eager-loading.
func (e SubmitEdges) TestcaseResultOrErr() ([]*TestcaseResult, error) {
	if e.loadedTypes[2] {
		return e.TestcaseResult, nil
	}
	return nil, &NotLoadedError{edge: "testcase_result"}
}

// SubmitContestsOrErr returns the SubmitContests value or an error if the edge
// was not loaded in eager-loading.
func (e SubmitEdges) SubmitContestsOrErr() ([]*Contest, error) {
	if e.loadedTypes[3] {
		return e.SubmitContests, nil
	}
	return nil, &NotLoadedError{edge: "submit_contests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Submit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submit.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Submit fields.
func (s *Submit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Submit.
// This includes values selected through modifiers, order, etc.
func (s *Submit) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Submit entity.
func (s *Submit) QueryUser() *UserQuery {
	return NewSubmitClient(s.config).QueryUser(s)
}

// QueryLanguage queries the "language" edge of the Submit entity.
func (s *Submit) QueryLanguage() *LanguageQuery {
	return NewSubmitClient(s.config).QueryLanguage(s)
}

// QueryTestcaseResult queries the "testcase_result" edge of the Submit entity.
func (s *Submit) QueryTestcaseResult() *TestcaseResultQuery {
	return NewSubmitClient(s.config).QueryTestcaseResult(s)
}

// QuerySubmitContests queries the "submit_contests" edge of the Submit entity.
func (s *Submit) QuerySubmitContests() *ContestQuery {
	return NewSubmitClient(s.config).QuerySubmitContests(s)
}

// Update returns a builder for updating this Submit.
// Note that you need to call Submit.Unwrap() before calling this method if this Submit
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Submit) Update() *SubmitUpdateOne {
	return NewSubmitClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Submit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Submit) Unwrap() *Submit {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Submit is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Submit) String() string {
	var builder strings.Builder
	builder.WriteString("Submit(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Submits is a parsable slice of Submit.
type Submits []*Submit
