// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/language"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/submit"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
)

// Submit is the model entity for the Submit schema.
type Submit struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmitQuery when eager-loading is set.
	Edges           SubmitEdges `json:"edges"`
	language_submit *int
	submit_task     *int
	submit_language *int
	selectValues    sql.SelectValues
}

// SubmitEdges holds the relations/edges for other nodes in the graph.
type SubmitEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// TestcaseResults holds the value of the testcase_results edge.
	TestcaseResults []*TestcaseResult `json:"testcase_results,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e SubmitEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmitEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmitEdges) LanguageOrErr() (*Language, error) {
	if e.loadedTypes[2] {
		if e.Language == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: language.Label}
		}
		return e.Language, nil
	}
	return nil, &NotLoadedError{edge: "language"}
}

// TestcaseResultsOrErr returns the TestcaseResults value or an error if the edge
// was not loaded in eager-loading.
func (e SubmitEdges) TestcaseResultsOrErr() ([]*TestcaseResult, error) {
	if e.loadedTypes[3] {
		return e.TestcaseResults, nil
	}
	return nil, &NotLoadedError{edge: "testcase_results"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Submit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submit.FieldID:
			values[i] = new(sql.NullInt64)
		case submit.ForeignKeys[0]: // language_submit
			values[i] = new(sql.NullInt64)
		case submit.ForeignKeys[1]: // submit_task
			values[i] = new(sql.NullInt64)
		case submit.ForeignKeys[2]: // submit_language
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Submit fields.
func (s *Submit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case submit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field language_submit", value)
			} else if value.Valid {
				s.language_submit = new(int)
				*s.language_submit = int(value.Int64)
			}
		case submit.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field submit_task", value)
			} else if value.Valid {
				s.submit_task = new(int)
				*s.submit_task = int(value.Int64)
			}
		case submit.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field submit_language", value)
			} else if value.Valid {
				s.submit_language = new(int)
				*s.submit_language = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Submit.
// This includes values selected through modifiers, order, etc.
func (s *Submit) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Submit entity.
func (s *Submit) QueryUsers() *UserQuery {
	return NewSubmitClient(s.config).QueryUsers(s)
}

// QueryTask queries the "task" edge of the Submit entity.
func (s *Submit) QueryTask() *TaskQuery {
	return NewSubmitClient(s.config).QueryTask(s)
}

// QueryLanguage queries the "language" edge of the Submit entity.
func (s *Submit) QueryLanguage() *LanguageQuery {
	return NewSubmitClient(s.config).QueryLanguage(s)
}

// QueryTestcaseResults queries the "testcase_results" edge of the Submit entity.
func (s *Submit) QueryTestcaseResults() *TestcaseResultQuery {
	return NewSubmitClient(s.config).QueryTestcaseResults(s)
}

// Update returns a builder for updating this Submit.
// Note that you need to call Submit.Unwrap() before calling this method if this Submit
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Submit) Update() *SubmitUpdateOne {
	return NewSubmitClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Submit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Submit) Unwrap() *Submit {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Submit is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Submit) String() string {
	var builder strings.Builder
	builder.WriteString("Submit(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Submits is a parsable slice of Submit.
type Submits []*Submit
