// Code generated by ent, DO NOT EDIT.

package task

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldStatement holds the string denoting the statement field in the database.
	FieldStatement = "statement"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldExecTimeLimit holds the string denoting the exec_time_limit field in the database.
	FieldExecTimeLimit = "exec_time_limit"
	// FieldExecMemoryLimit holds the string denoting the exec_memory_limit field in the database.
	FieldExecMemoryLimit = "exec_memory_limit"
	// FieldCaseInsensitive holds the string denoting the case_insensitive field in the database.
	FieldCaseInsensitive = "case_insensitive"
	// FieldNdigits holds the string denoting the ndigits field in the database.
	FieldNdigits = "ndigits"
	// FieldJudgeCodePath holds the string denoting the judge_code_path field in the database.
	FieldJudgeCodePath = "judge_code_path"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTestcaseSets holds the string denoting the testcase_sets edge name in mutations.
	EdgeTestcaseSets = "testcase_sets"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// TestcaseSetsTable is the table that holds the testcase_sets relation/edge.
	TestcaseSetsTable = "testcase_sets"
	// TestcaseSetsInverseTable is the table name for the TestcaseSet entity.
	// It exists in this package in order to avoid circular dependency with the "testcaseset" package.
	TestcaseSetsInverseTable = "testcase_sets"
	// TestcaseSetsColumn is the table column denoting the testcase_sets relation/edge.
	TestcaseSetsColumn = "task_testcase_sets"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "tasks"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_tasks"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldStatement,
	FieldDifficulty,
	FieldExecTimeLimit,
	FieldExecMemoryLimit,
	FieldCaseInsensitive,
	FieldNdigits,
	FieldJudgeCodePath,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_tasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByStatement orders the results by the statement field.
func ByStatement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatement, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByExecTimeLimit orders the results by the exec_time_limit field.
func ByExecTimeLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecTimeLimit, opts...).ToFunc()
}

// ByExecMemoryLimit orders the results by the exec_memory_limit field.
func ByExecMemoryLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecMemoryLimit, opts...).ToFunc()
}

// ByCaseInsensitive orders the results by the case_insensitive field.
func ByCaseInsensitive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseInsensitive, opts...).ToFunc()
}

// ByNdigits orders the results by the ndigits field.
func ByNdigits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNdigits, opts...).ToFunc()
}

// ByJudgeCodePath orders the results by the judge_code_path field.
func ByJudgeCodePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJudgeCodePath, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTestcaseSetsCount orders the results by testcase_sets count.
func ByTestcaseSetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestcaseSetsStep(), opts...)
	}
}

// ByTestcaseSets orders the results by testcase_sets terms.
func ByTestcaseSets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestcaseSetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newTestcaseSetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestcaseSetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestcaseSetsTable, TestcaseSetsColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
