// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseset"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetStatement sets the "statement" field.
func (tu *TaskUpdate) SetStatement(s string) *TaskUpdate {
	tu.mutation.SetStatement(s)
	return tu
}

// SetDifficulty sets the "difficulty" field.
func (tu *TaskUpdate) SetDifficulty(s string) *TaskUpdate {
	tu.mutation.SetDifficulty(s)
	return tu
}

// SetExecTimeLimit sets the "exec_time_limit" field.
func (tu *TaskUpdate) SetExecTimeLimit(u uint) *TaskUpdate {
	tu.mutation.ResetExecTimeLimit()
	tu.mutation.SetExecTimeLimit(u)
	return tu
}

// AddExecTimeLimit adds u to the "exec_time_limit" field.
func (tu *TaskUpdate) AddExecTimeLimit(u int) *TaskUpdate {
	tu.mutation.AddExecTimeLimit(u)
	return tu
}

// SetExecMemoryLimit sets the "exec_memory_limit" field.
func (tu *TaskUpdate) SetExecMemoryLimit(u uint) *TaskUpdate {
	tu.mutation.ResetExecMemoryLimit()
	tu.mutation.SetExecMemoryLimit(u)
	return tu
}

// AddExecMemoryLimit adds u to the "exec_memory_limit" field.
func (tu *TaskUpdate) AddExecMemoryLimit(u int) *TaskUpdate {
	tu.mutation.AddExecMemoryLimit(u)
	return tu
}

// SetCaseInsensitive sets the "case_insensitive" field.
func (tu *TaskUpdate) SetCaseInsensitive(b bool) *TaskUpdate {
	tu.mutation.SetCaseInsensitive(b)
	return tu
}

// SetNdigits sets the "ndigits" field.
func (tu *TaskUpdate) SetNdigits(u uint) *TaskUpdate {
	tu.mutation.ResetNdigits()
	tu.mutation.SetNdigits(u)
	return tu
}

// AddNdigits adds u to the "ndigits" field.
func (tu *TaskUpdate) AddNdigits(u int) *TaskUpdate {
	tu.mutation.AddNdigits(u)
	return tu
}

// SetJudgeCodePath sets the "judge_code_path" field.
func (tu *TaskUpdate) SetJudgeCodePath(s string) *TaskUpdate {
	tu.mutation.SetJudgeCodePath(s)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TaskUpdate) SetCreatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TaskUpdate) ClearUpdatedAt() *TaskUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// AddTestcaseSetIDs adds the "testcase_sets" edge to the TestcaseSet entity by IDs.
func (tu *TaskUpdate) AddTestcaseSetIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddTestcaseSetIDs(ids...)
	return tu
}

// AddTestcaseSets adds the "testcase_sets" edges to the TestcaseSet entity.
func (tu *TaskUpdate) AddTestcaseSets(t ...*TestcaseSet) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTestcaseSetIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (tu *TaskUpdate) SetUsersID(id int) *TaskUpdate {
	tu.mutation.SetUsersID(id)
	return tu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableUsersID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetUsersID(*id)
	}
	return tu
}

// SetUsers sets the "users" edge to the User entity.
func (tu *TaskUpdate) SetUsers(u *User) *TaskUpdate {
	return tu.SetUsersID(u.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearTestcaseSets clears all "testcase_sets" edges to the TestcaseSet entity.
func (tu *TaskUpdate) ClearTestcaseSets() *TaskUpdate {
	tu.mutation.ClearTestcaseSets()
	return tu
}

// RemoveTestcaseSetIDs removes the "testcase_sets" edge to TestcaseSet entities by IDs.
func (tu *TaskUpdate) RemoveTestcaseSetIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveTestcaseSetIDs(ids...)
	return tu
}

// RemoveTestcaseSets removes "testcase_sets" edges to TestcaseSet entities.
func (tu *TaskUpdate) RemoveTestcaseSets(t ...*TestcaseSet) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTestcaseSetIDs(ids...)
}

// ClearUsers clears the "users" edge to the User entity.
func (tu *TaskUpdate) ClearUsers() *TaskUpdate {
	tu.mutation.ClearUsers()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Statement(); ok {
		_spec.SetField(task.FieldStatement, field.TypeString, value)
	}
	if value, ok := tu.mutation.Difficulty(); ok {
		_spec.SetField(task.FieldDifficulty, field.TypeString, value)
	}
	if value, ok := tu.mutation.ExecTimeLimit(); ok {
		_spec.SetField(task.FieldExecTimeLimit, field.TypeUint, value)
	}
	if value, ok := tu.mutation.AddedExecTimeLimit(); ok {
		_spec.AddField(task.FieldExecTimeLimit, field.TypeUint, value)
	}
	if value, ok := tu.mutation.ExecMemoryLimit(); ok {
		_spec.SetField(task.FieldExecMemoryLimit, field.TypeUint, value)
	}
	if value, ok := tu.mutation.AddedExecMemoryLimit(); ok {
		_spec.AddField(task.FieldExecMemoryLimit, field.TypeUint, value)
	}
	if value, ok := tu.mutation.CaseInsensitive(); ok {
		_spec.SetField(task.FieldCaseInsensitive, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Ndigits(); ok {
		_spec.SetField(task.FieldNdigits, field.TypeUint, value)
	}
	if value, ok := tu.mutation.AddedNdigits(); ok {
		_spec.AddField(task.FieldNdigits, field.TypeUint, value)
	}
	if value, ok := tu.mutation.JudgeCodePath(); ok {
		_spec.SetField(task.FieldJudgeCodePath, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(task.FieldUpdatedAt, field.TypeTime)
	}
	if tu.mutation.TestcaseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TestcaseSetsTable,
			Columns: []string{task.TestcaseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTestcaseSetsIDs(); len(nodes) > 0 && !tu.mutation.TestcaseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TestcaseSetsTable,
			Columns: []string{task.TestcaseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TestcaseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TestcaseSetsTable,
			Columns: []string{task.TestcaseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: []string{task.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: []string{task.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetStatement sets the "statement" field.
func (tuo *TaskUpdateOne) SetStatement(s string) *TaskUpdateOne {
	tuo.mutation.SetStatement(s)
	return tuo
}

// SetDifficulty sets the "difficulty" field.
func (tuo *TaskUpdateOne) SetDifficulty(s string) *TaskUpdateOne {
	tuo.mutation.SetDifficulty(s)
	return tuo
}

// SetExecTimeLimit sets the "exec_time_limit" field.
func (tuo *TaskUpdateOne) SetExecTimeLimit(u uint) *TaskUpdateOne {
	tuo.mutation.ResetExecTimeLimit()
	tuo.mutation.SetExecTimeLimit(u)
	return tuo
}

// AddExecTimeLimit adds u to the "exec_time_limit" field.
func (tuo *TaskUpdateOne) AddExecTimeLimit(u int) *TaskUpdateOne {
	tuo.mutation.AddExecTimeLimit(u)
	return tuo
}

// SetExecMemoryLimit sets the "exec_memory_limit" field.
func (tuo *TaskUpdateOne) SetExecMemoryLimit(u uint) *TaskUpdateOne {
	tuo.mutation.ResetExecMemoryLimit()
	tuo.mutation.SetExecMemoryLimit(u)
	return tuo
}

// AddExecMemoryLimit adds u to the "exec_memory_limit" field.
func (tuo *TaskUpdateOne) AddExecMemoryLimit(u int) *TaskUpdateOne {
	tuo.mutation.AddExecMemoryLimit(u)
	return tuo
}

// SetCaseInsensitive sets the "case_insensitive" field.
func (tuo *TaskUpdateOne) SetCaseInsensitive(b bool) *TaskUpdateOne {
	tuo.mutation.SetCaseInsensitive(b)
	return tuo
}

// SetNdigits sets the "ndigits" field.
func (tuo *TaskUpdateOne) SetNdigits(u uint) *TaskUpdateOne {
	tuo.mutation.ResetNdigits()
	tuo.mutation.SetNdigits(u)
	return tuo
}

// AddNdigits adds u to the "ndigits" field.
func (tuo *TaskUpdateOne) AddNdigits(u int) *TaskUpdateOne {
	tuo.mutation.AddNdigits(u)
	return tuo
}

// SetJudgeCodePath sets the "judge_code_path" field.
func (tuo *TaskUpdateOne) SetJudgeCodePath(s string) *TaskUpdateOne {
	tuo.mutation.SetJudgeCodePath(s)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TaskUpdateOne) SetCreatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TaskUpdateOne) ClearUpdatedAt() *TaskUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// AddTestcaseSetIDs adds the "testcase_sets" edge to the TestcaseSet entity by IDs.
func (tuo *TaskUpdateOne) AddTestcaseSetIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddTestcaseSetIDs(ids...)
	return tuo
}

// AddTestcaseSets adds the "testcase_sets" edges to the TestcaseSet entity.
func (tuo *TaskUpdateOne) AddTestcaseSets(t ...*TestcaseSet) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTestcaseSetIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (tuo *TaskUpdateOne) SetUsersID(id int) *TaskUpdateOne {
	tuo.mutation.SetUsersID(id)
	return tuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUsersID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetUsersID(*id)
	}
	return tuo
}

// SetUsers sets the "users" edge to the User entity.
func (tuo *TaskUpdateOne) SetUsers(u *User) *TaskUpdateOne {
	return tuo.SetUsersID(u.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearTestcaseSets clears all "testcase_sets" edges to the TestcaseSet entity.
func (tuo *TaskUpdateOne) ClearTestcaseSets() *TaskUpdateOne {
	tuo.mutation.ClearTestcaseSets()
	return tuo
}

// RemoveTestcaseSetIDs removes the "testcase_sets" edge to TestcaseSet entities by IDs.
func (tuo *TaskUpdateOne) RemoveTestcaseSetIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveTestcaseSetIDs(ids...)
	return tuo
}

// RemoveTestcaseSets removes "testcase_sets" edges to TestcaseSet entities.
func (tuo *TaskUpdateOne) RemoveTestcaseSets(t ...*TestcaseSet) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTestcaseSetIDs(ids...)
}

// ClearUsers clears the "users" edge to the User entity.
func (tuo *TaskUpdateOne) ClearUsers() *TaskUpdateOne {
	tuo.mutation.ClearUsers()
	return tuo
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Statement(); ok {
		_spec.SetField(task.FieldStatement, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Difficulty(); ok {
		_spec.SetField(task.FieldDifficulty, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ExecTimeLimit(); ok {
		_spec.SetField(task.FieldExecTimeLimit, field.TypeUint, value)
	}
	if value, ok := tuo.mutation.AddedExecTimeLimit(); ok {
		_spec.AddField(task.FieldExecTimeLimit, field.TypeUint, value)
	}
	if value, ok := tuo.mutation.ExecMemoryLimit(); ok {
		_spec.SetField(task.FieldExecMemoryLimit, field.TypeUint, value)
	}
	if value, ok := tuo.mutation.AddedExecMemoryLimit(); ok {
		_spec.AddField(task.FieldExecMemoryLimit, field.TypeUint, value)
	}
	if value, ok := tuo.mutation.CaseInsensitive(); ok {
		_spec.SetField(task.FieldCaseInsensitive, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Ndigits(); ok {
		_spec.SetField(task.FieldNdigits, field.TypeUint, value)
	}
	if value, ok := tuo.mutation.AddedNdigits(); ok {
		_spec.AddField(task.FieldNdigits, field.TypeUint, value)
	}
	if value, ok := tuo.mutation.JudgeCodePath(); ok {
		_spec.SetField(task.FieldJudgeCodePath, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(task.FieldUpdatedAt, field.TypeTime)
	}
	if tuo.mutation.TestcaseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TestcaseSetsTable,
			Columns: []string{task.TestcaseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTestcaseSetsIDs(); len(nodes) > 0 && !tuo.mutation.TestcaseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TestcaseSetsTable,
			Columns: []string{task.TestcaseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TestcaseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TestcaseSetsTable,
			Columns: []string{task.TestcaseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: []string{task.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: []string{task.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
