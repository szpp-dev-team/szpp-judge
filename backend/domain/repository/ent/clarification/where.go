// Code generated by ent, DO NOT EDIT.

package clarification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Clarification {
	return predicate.Clarification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Clarification {
	return predicate.Clarification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Clarification {
	return predicate.Clarification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Clarification {
	return predicate.Clarification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Clarification {
	return predicate.Clarification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Clarification {
	return predicate.Clarification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Clarification {
	return predicate.Clarification(sql.FieldLTE(FieldID, id))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldContent, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldIsPublic, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldUpdatedAt, v))
}

// AnswerContent applies equality check predicate on the "answer_content" field. It's identical to AnswerContentEQ.
func AnswerContent(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldAnswerContent, v))
}

// AnswerCreatedAt applies equality check predicate on the "answer_created_at" field. It's identical to AnswerCreatedAtEQ.
func AnswerCreatedAt(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldAnswerCreatedAt, v))
}

// AnswerUpdatedAt applies equality check predicate on the "answer_updated_at" field. It's identical to AnswerUpdatedAtEQ.
func AnswerUpdatedAt(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldAnswerUpdatedAt, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Clarification {
	return predicate.Clarification(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Clarification {
	return predicate.Clarification(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldContainsFold(FieldContent, v))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.Clarification {
	return predicate.Clarification(sql.FieldNEQ(FieldIsPublic, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldLTE(FieldUpdatedAt, v))
}

// AnswerContentEQ applies the EQ predicate on the "answer_content" field.
func AnswerContentEQ(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldAnswerContent, v))
}

// AnswerContentNEQ applies the NEQ predicate on the "answer_content" field.
func AnswerContentNEQ(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldNEQ(FieldAnswerContent, v))
}

// AnswerContentIn applies the In predicate on the "answer_content" field.
func AnswerContentIn(vs ...string) predicate.Clarification {
	return predicate.Clarification(sql.FieldIn(FieldAnswerContent, vs...))
}

// AnswerContentNotIn applies the NotIn predicate on the "answer_content" field.
func AnswerContentNotIn(vs ...string) predicate.Clarification {
	return predicate.Clarification(sql.FieldNotIn(FieldAnswerContent, vs...))
}

// AnswerContentGT applies the GT predicate on the "answer_content" field.
func AnswerContentGT(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldGT(FieldAnswerContent, v))
}

// AnswerContentGTE applies the GTE predicate on the "answer_content" field.
func AnswerContentGTE(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldGTE(FieldAnswerContent, v))
}

// AnswerContentLT applies the LT predicate on the "answer_content" field.
func AnswerContentLT(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldLT(FieldAnswerContent, v))
}

// AnswerContentLTE applies the LTE predicate on the "answer_content" field.
func AnswerContentLTE(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldLTE(FieldAnswerContent, v))
}

// AnswerContentContains applies the Contains predicate on the "answer_content" field.
func AnswerContentContains(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldContains(FieldAnswerContent, v))
}

// AnswerContentHasPrefix applies the HasPrefix predicate on the "answer_content" field.
func AnswerContentHasPrefix(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldHasPrefix(FieldAnswerContent, v))
}

// AnswerContentHasSuffix applies the HasSuffix predicate on the "answer_content" field.
func AnswerContentHasSuffix(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldHasSuffix(FieldAnswerContent, v))
}

// AnswerContentIsNil applies the IsNil predicate on the "answer_content" field.
func AnswerContentIsNil() predicate.Clarification {
	return predicate.Clarification(sql.FieldIsNull(FieldAnswerContent))
}

// AnswerContentNotNil applies the NotNil predicate on the "answer_content" field.
func AnswerContentNotNil() predicate.Clarification {
	return predicate.Clarification(sql.FieldNotNull(FieldAnswerContent))
}

// AnswerContentEqualFold applies the EqualFold predicate on the "answer_content" field.
func AnswerContentEqualFold(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldEqualFold(FieldAnswerContent, v))
}

// AnswerContentContainsFold applies the ContainsFold predicate on the "answer_content" field.
func AnswerContentContainsFold(v string) predicate.Clarification {
	return predicate.Clarification(sql.FieldContainsFold(FieldAnswerContent, v))
}

// AnswerCreatedAtEQ applies the EQ predicate on the "answer_created_at" field.
func AnswerCreatedAtEQ(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldAnswerCreatedAt, v))
}

// AnswerCreatedAtNEQ applies the NEQ predicate on the "answer_created_at" field.
func AnswerCreatedAtNEQ(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldNEQ(FieldAnswerCreatedAt, v))
}

// AnswerCreatedAtIn applies the In predicate on the "answer_created_at" field.
func AnswerCreatedAtIn(vs ...time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldIn(FieldAnswerCreatedAt, vs...))
}

// AnswerCreatedAtNotIn applies the NotIn predicate on the "answer_created_at" field.
func AnswerCreatedAtNotIn(vs ...time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldNotIn(FieldAnswerCreatedAt, vs...))
}

// AnswerCreatedAtGT applies the GT predicate on the "answer_created_at" field.
func AnswerCreatedAtGT(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldGT(FieldAnswerCreatedAt, v))
}

// AnswerCreatedAtGTE applies the GTE predicate on the "answer_created_at" field.
func AnswerCreatedAtGTE(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldGTE(FieldAnswerCreatedAt, v))
}

// AnswerCreatedAtLT applies the LT predicate on the "answer_created_at" field.
func AnswerCreatedAtLT(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldLT(FieldAnswerCreatedAt, v))
}

// AnswerCreatedAtLTE applies the LTE predicate on the "answer_created_at" field.
func AnswerCreatedAtLTE(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldLTE(FieldAnswerCreatedAt, v))
}

// AnswerCreatedAtIsNil applies the IsNil predicate on the "answer_created_at" field.
func AnswerCreatedAtIsNil() predicate.Clarification {
	return predicate.Clarification(sql.FieldIsNull(FieldAnswerCreatedAt))
}

// AnswerCreatedAtNotNil applies the NotNil predicate on the "answer_created_at" field.
func AnswerCreatedAtNotNil() predicate.Clarification {
	return predicate.Clarification(sql.FieldNotNull(FieldAnswerCreatedAt))
}

// AnswerUpdatedAtEQ applies the EQ predicate on the "answer_updated_at" field.
func AnswerUpdatedAtEQ(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldEQ(FieldAnswerUpdatedAt, v))
}

// AnswerUpdatedAtNEQ applies the NEQ predicate on the "answer_updated_at" field.
func AnswerUpdatedAtNEQ(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldNEQ(FieldAnswerUpdatedAt, v))
}

// AnswerUpdatedAtIn applies the In predicate on the "answer_updated_at" field.
func AnswerUpdatedAtIn(vs ...time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldIn(FieldAnswerUpdatedAt, vs...))
}

// AnswerUpdatedAtNotIn applies the NotIn predicate on the "answer_updated_at" field.
func AnswerUpdatedAtNotIn(vs ...time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldNotIn(FieldAnswerUpdatedAt, vs...))
}

// AnswerUpdatedAtGT applies the GT predicate on the "answer_updated_at" field.
func AnswerUpdatedAtGT(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldGT(FieldAnswerUpdatedAt, v))
}

// AnswerUpdatedAtGTE applies the GTE predicate on the "answer_updated_at" field.
func AnswerUpdatedAtGTE(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldGTE(FieldAnswerUpdatedAt, v))
}

// AnswerUpdatedAtLT applies the LT predicate on the "answer_updated_at" field.
func AnswerUpdatedAtLT(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldLT(FieldAnswerUpdatedAt, v))
}

// AnswerUpdatedAtLTE applies the LTE predicate on the "answer_updated_at" field.
func AnswerUpdatedAtLTE(v time.Time) predicate.Clarification {
	return predicate.Clarification(sql.FieldLTE(FieldAnswerUpdatedAt, v))
}

// AnswerUpdatedAtIsNil applies the IsNil predicate on the "answer_updated_at" field.
func AnswerUpdatedAtIsNil() predicate.Clarification {
	return predicate.Clarification(sql.FieldIsNull(FieldAnswerUpdatedAt))
}

// AnswerUpdatedAtNotNil applies the NotNil predicate on the "answer_updated_at" field.
func AnswerUpdatedAtNotNil() predicate.Clarification {
	return predicate.Clarification(sql.FieldNotNull(FieldAnswerUpdatedAt))
}

// HasContest applies the HasEdge predicate on the "contest" edge.
func HasContest() predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ContestTable, ContestPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContestWith applies the HasEdge predicate on the "contest" edge with a given conditions (other predicates).
func HasContestWith(preds ...predicate.Contest) predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		step := newContestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TaskTable, TaskPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswerUser applies the HasEdge predicate on the "answer_user" edge.
func HasAnswerUser() predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AnswerUserTable, AnswerUserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerUserWith applies the HasEdge predicate on the "answer_user" edge with a given conditions (other predicates).
func HasAnswerUserWith(preds ...predicate.User) predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		step := newAnswerUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Clarification) predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Clarification) predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Clarification) predicate.Clarification {
	return predicate.Clarification(func(s *sql.Selector) {
		p(s.Not())
	})
}
