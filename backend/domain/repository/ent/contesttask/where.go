// Code generated by ent, DO NOT EDIT.

package contesttask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldLTE(FieldID, id))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldEQ(FieldScore, v))
}

// ContestID applies equality check predicate on the "contest_id" field. It's identical to ContestIDEQ.
func ContestID(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldEQ(FieldContestID, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldEQ(FieldTaskID, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldLTE(FieldScore, v))
}

// ContestIDEQ applies the EQ predicate on the "contest_id" field.
func ContestIDEQ(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldEQ(FieldContestID, v))
}

// ContestIDNEQ applies the NEQ predicate on the "contest_id" field.
func ContestIDNEQ(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNEQ(FieldContestID, v))
}

// ContestIDIn applies the In predicate on the "contest_id" field.
func ContestIDIn(vs ...int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldIn(FieldContestID, vs...))
}

// ContestIDNotIn applies the NotIn predicate on the "contest_id" field.
func ContestIDNotIn(vs ...int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNotIn(FieldContestID, vs...))
}

// ContestIDIsNil applies the IsNil predicate on the "contest_id" field.
func ContestIDIsNil() predicate.ContestTask {
	return predicate.ContestTask(sql.FieldIsNull(FieldContestID))
}

// ContestIDNotNil applies the NotNil predicate on the "contest_id" field.
func ContestIDNotNil() predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNotNull(FieldContestID))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...int) predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDIsNil applies the IsNil predicate on the "task_id" field.
func TaskIDIsNil() predicate.ContestTask {
	return predicate.ContestTask(sql.FieldIsNull(FieldTaskID))
}

// TaskIDNotNil applies the NotNil predicate on the "task_id" field.
func TaskIDNotNil() predicate.ContestTask {
	return predicate.ContestTask(sql.FieldNotNull(FieldTaskID))
}

// HasContest applies the HasEdge predicate on the "contest" edge.
func HasContest() predicate.ContestTask {
	return predicate.ContestTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContestTable, ContestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContestWith applies the HasEdge predicate on the "contest" edge with a given conditions (other predicates).
func HasContestWith(preds ...predicate.Contest) predicate.ContestTask {
	return predicate.ContestTask(func(s *sql.Selector) {
		step := newContestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.ContestTask {
	return predicate.ContestTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.ContestTask {
	return predicate.ContestTask(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContestTask) predicate.ContestTask {
	return predicate.ContestTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContestTask) predicate.ContestTask {
	return predicate.ContestTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContestTask) predicate.ContestTask {
	return predicate.ContestTask(func(s *sql.Selector) {
		p(s.Not())
	})
}
