// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseresult"
)

// TestcaseResultQuery is the builder for querying TestcaseResult entities.
type TestcaseResultQuery struct {
	config
	ctx        *QueryContext
	order      []testcaseresult.OrderOption
	inters     []Interceptor
	predicates []predicate.TestcaseResult
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TestcaseResultQuery builder.
func (trq *TestcaseResultQuery) Where(ps ...predicate.TestcaseResult) *TestcaseResultQuery {
	trq.predicates = append(trq.predicates, ps...)
	return trq
}

// Limit the number of records to be returned by this query.
func (trq *TestcaseResultQuery) Limit(limit int) *TestcaseResultQuery {
	trq.ctx.Limit = &limit
	return trq
}

// Offset to start from.
func (trq *TestcaseResultQuery) Offset(offset int) *TestcaseResultQuery {
	trq.ctx.Offset = &offset
	return trq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (trq *TestcaseResultQuery) Unique(unique bool) *TestcaseResultQuery {
	trq.ctx.Unique = &unique
	return trq
}

// Order specifies how the records should be ordered.
func (trq *TestcaseResultQuery) Order(o ...testcaseresult.OrderOption) *TestcaseResultQuery {
	trq.order = append(trq.order, o...)
	return trq
}

// First returns the first TestcaseResult entity from the query.
// Returns a *NotFoundError when no TestcaseResult was found.
func (trq *TestcaseResultQuery) First(ctx context.Context) (*TestcaseResult, error) {
	nodes, err := trq.Limit(1).All(setContextOp(ctx, trq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{testcaseresult.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (trq *TestcaseResultQuery) FirstX(ctx context.Context) *TestcaseResult {
	node, err := trq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TestcaseResult ID from the query.
// Returns a *NotFoundError when no TestcaseResult ID was found.
func (trq *TestcaseResultQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = trq.Limit(1).IDs(setContextOp(ctx, trq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{testcaseresult.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (trq *TestcaseResultQuery) FirstIDX(ctx context.Context) int {
	id, err := trq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TestcaseResult entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TestcaseResult entity is found.
// Returns a *NotFoundError when no TestcaseResult entities are found.
func (trq *TestcaseResultQuery) Only(ctx context.Context) (*TestcaseResult, error) {
	nodes, err := trq.Limit(2).All(setContextOp(ctx, trq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{testcaseresult.Label}
	default:
		return nil, &NotSingularError{testcaseresult.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (trq *TestcaseResultQuery) OnlyX(ctx context.Context) *TestcaseResult {
	node, err := trq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TestcaseResult ID in the query.
// Returns a *NotSingularError when more than one TestcaseResult ID is found.
// Returns a *NotFoundError when no entities are found.
func (trq *TestcaseResultQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = trq.Limit(2).IDs(setContextOp(ctx, trq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{testcaseresult.Label}
	default:
		err = &NotSingularError{testcaseresult.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (trq *TestcaseResultQuery) OnlyIDX(ctx context.Context) int {
	id, err := trq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TestcaseResults.
func (trq *TestcaseResultQuery) All(ctx context.Context) ([]*TestcaseResult, error) {
	ctx = setContextOp(ctx, trq.ctx, "All")
	if err := trq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TestcaseResult, *TestcaseResultQuery]()
	return withInterceptors[[]*TestcaseResult](ctx, trq, qr, trq.inters)
}

// AllX is like All, but panics if an error occurs.
func (trq *TestcaseResultQuery) AllX(ctx context.Context) []*TestcaseResult {
	nodes, err := trq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TestcaseResult IDs.
func (trq *TestcaseResultQuery) IDs(ctx context.Context) (ids []int, err error) {
	if trq.ctx.Unique == nil && trq.path != nil {
		trq.Unique(true)
	}
	ctx = setContextOp(ctx, trq.ctx, "IDs")
	if err = trq.Select(testcaseresult.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (trq *TestcaseResultQuery) IDsX(ctx context.Context) []int {
	ids, err := trq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (trq *TestcaseResultQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, trq.ctx, "Count")
	if err := trq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, trq, querierCount[*TestcaseResultQuery](), trq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (trq *TestcaseResultQuery) CountX(ctx context.Context) int {
	count, err := trq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (trq *TestcaseResultQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, trq.ctx, "Exist")
	switch _, err := trq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (trq *TestcaseResultQuery) ExistX(ctx context.Context) bool {
	exist, err := trq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TestcaseResultQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (trq *TestcaseResultQuery) Clone() *TestcaseResultQuery {
	if trq == nil {
		return nil
	}
	return &TestcaseResultQuery{
		config:     trq.config,
		ctx:        trq.ctx.Clone(),
		order:      append([]testcaseresult.OrderOption{}, trq.order...),
		inters:     append([]Interceptor{}, trq.inters...),
		predicates: append([]predicate.TestcaseResult{}, trq.predicates...),
		// clone intermediate query.
		sql:  trq.sql.Clone(),
		path: trq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (trq *TestcaseResultQuery) GroupBy(field string, fields ...string) *TestcaseResultGroupBy {
	trq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TestcaseResultGroupBy{build: trq}
	grbuild.flds = &trq.ctx.Fields
	grbuild.label = testcaseresult.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (trq *TestcaseResultQuery) Select(fields ...string) *TestcaseResultSelect {
	trq.ctx.Fields = append(trq.ctx.Fields, fields...)
	sbuild := &TestcaseResultSelect{TestcaseResultQuery: trq}
	sbuild.label = testcaseresult.Label
	sbuild.flds, sbuild.scan = &trq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TestcaseResultSelect configured with the given aggregations.
func (trq *TestcaseResultQuery) Aggregate(fns ...AggregateFunc) *TestcaseResultSelect {
	return trq.Select().Aggregate(fns...)
}

func (trq *TestcaseResultQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range trq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, trq); err != nil {
				return err
			}
		}
	}
	for _, f := range trq.ctx.Fields {
		if !testcaseresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if trq.path != nil {
		prev, err := trq.path(ctx)
		if err != nil {
			return err
		}
		trq.sql = prev
	}
	return nil
}

func (trq *TestcaseResultQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TestcaseResult, error) {
	var (
		nodes   = []*TestcaseResult{}
		withFKs = trq.withFKs
		_spec   = trq.querySpec()
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, testcaseresult.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TestcaseResult).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TestcaseResult{config: trq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, trq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (trq *TestcaseResultQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := trq.querySpec()
	_spec.Node.Columns = trq.ctx.Fields
	if len(trq.ctx.Fields) > 0 {
		_spec.Unique = trq.ctx.Unique != nil && *trq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, trq.driver, _spec)
}

func (trq *TestcaseResultQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(testcaseresult.Table, testcaseresult.Columns, sqlgraph.NewFieldSpec(testcaseresult.FieldID, field.TypeInt))
	_spec.From = trq.sql
	if unique := trq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if trq.path != nil {
		_spec.Unique = true
	}
	if fields := trq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcaseresult.FieldID)
		for i := range fields {
			if fields[i] != testcaseresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := trq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := trq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := trq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := trq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (trq *TestcaseResultQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(trq.driver.Dialect())
	t1 := builder.Table(testcaseresult.Table)
	columns := trq.ctx.Fields
	if len(columns) == 0 {
		columns = testcaseresult.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if trq.sql != nil {
		selector = trq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if trq.ctx.Unique != nil && *trq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range trq.predicates {
		p(selector)
	}
	for _, p := range trq.order {
		p(selector)
	}
	if offset := trq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := trq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TestcaseResultGroupBy is the group-by builder for TestcaseResult entities.
type TestcaseResultGroupBy struct {
	selector
	build *TestcaseResultQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (trgb *TestcaseResultGroupBy) Aggregate(fns ...AggregateFunc) *TestcaseResultGroupBy {
	trgb.fns = append(trgb.fns, fns...)
	return trgb
}

// Scan applies the selector query and scans the result into the given value.
func (trgb *TestcaseResultGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, trgb.build.ctx, "GroupBy")
	if err := trgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestcaseResultQuery, *TestcaseResultGroupBy](ctx, trgb.build, trgb, trgb.build.inters, v)
}

func (trgb *TestcaseResultGroupBy) sqlScan(ctx context.Context, root *TestcaseResultQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(trgb.fns))
	for _, fn := range trgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*trgb.flds)+len(trgb.fns))
		for _, f := range *trgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*trgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TestcaseResultSelect is the builder for selecting fields of TestcaseResult entities.
type TestcaseResultSelect struct {
	*TestcaseResultQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (trs *TestcaseResultSelect) Aggregate(fns ...AggregateFunc) *TestcaseResultSelect {
	trs.fns = append(trs.fns, fns...)
	return trs
}

// Scan applies the selector query and scans the result into the given value.
func (trs *TestcaseResultSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, trs.ctx, "Select")
	if err := trs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestcaseResultQuery, *TestcaseResultSelect](ctx, trs.TestcaseResultQuery, trs, trs.inters, v)
}

func (trs *TestcaseResultSelect) sqlScan(ctx context.Context, root *TestcaseResultQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(trs.fns))
	for _, fn := range trs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*trs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
