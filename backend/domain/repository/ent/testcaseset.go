// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseset"
)

// TestcaseSet is the model entity for the TestcaseSet schema.
type TestcaseSet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// IsSample holds the value of the "is_sample" field.
	IsSample bool `json:"is_sample,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestcaseSetQuery when eager-loading is set.
	Edges              TestcaseSetEdges `json:"edges"`
	task_testcase_sets *int
	selectValues       sql.SelectValues
}

// TestcaseSetEdges holds the relations/edges for other nodes in the graph.
type TestcaseSetEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks *Task `json:"tasks,omitempty"`
	// Testcases holds the value of the testcases edge.
	Testcases []*Testcase `json:"testcases,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestcaseSetEdges) TasksOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Tasks == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// TestcasesOrErr returns the Testcases value or an error if the edge
// was not loaded in eager-loading.
func (e TestcaseSetEdges) TestcasesOrErr() ([]*Testcase, error) {
	if e.loadedTypes[1] {
		return e.Testcases, nil
	}
	return nil, &NotLoadedError{edge: "testcases"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestcaseSet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testcaseset.FieldIsSample:
			values[i] = new(sql.NullBool)
		case testcaseset.FieldID, testcaseset.FieldScore:
			values[i] = new(sql.NullInt64)
		case testcaseset.FieldName:
			values[i] = new(sql.NullString)
		case testcaseset.FieldCreatedAt, testcaseset.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case testcaseset.ForeignKeys[0]: // task_testcase_sets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestcaseSet fields.
func (ts *TestcaseSet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testcaseset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ts.ID = int(value.Int64)
		case testcaseset.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ts.Name = value.String
			}
		case testcaseset.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				ts.Score = int(value.Int64)
			}
		case testcaseset.FieldIsSample:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_sample", values[i])
			} else if value.Valid {
				ts.IsSample = value.Bool
			}
		case testcaseset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ts.CreatedAt = value.Time
			}
		case testcaseset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ts.UpdatedAt = new(time.Time)
				*ts.UpdatedAt = value.Time
			}
		case testcaseset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_testcase_sets", value)
			} else if value.Valid {
				ts.task_testcase_sets = new(int)
				*ts.task_testcase_sets = int(value.Int64)
			}
		default:
			ts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestcaseSet.
// This includes values selected through modifiers, order, etc.
func (ts *TestcaseSet) Value(name string) (ent.Value, error) {
	return ts.selectValues.Get(name)
}

// QueryTasks queries the "tasks" edge of the TestcaseSet entity.
func (ts *TestcaseSet) QueryTasks() *TaskQuery {
	return NewTestcaseSetClient(ts.config).QueryTasks(ts)
}

// QueryTestcases queries the "testcases" edge of the TestcaseSet entity.
func (ts *TestcaseSet) QueryTestcases() *TestcaseQuery {
	return NewTestcaseSetClient(ts.config).QueryTestcases(ts)
}

// Update returns a builder for updating this TestcaseSet.
// Note that you need to call TestcaseSet.Unwrap() before calling this method if this TestcaseSet
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TestcaseSet) Update() *TestcaseSetUpdateOne {
	return NewTestcaseSetClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TestcaseSet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TestcaseSet) Unwrap() *TestcaseSet {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestcaseSet is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TestcaseSet) String() string {
	var builder strings.Builder
	builder.WriteString("TestcaseSet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("name=")
	builder.WriteString(ts.Name)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", ts.Score))
	builder.WriteString(", ")
	builder.WriteString("is_sample=")
	builder.WriteString(fmt.Sprintf("%v", ts.IsSample))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ts.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TestcaseSets is a parsable slice of TestcaseSet.
type TestcaseSets []*TestcaseSet
