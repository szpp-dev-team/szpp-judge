// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contestuser"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// ContestUserUpdate is the builder for updating ContestUser entities.
type ContestUserUpdate struct {
	config
	hooks    []Hook
	mutation *ContestUserMutation
}

// Where appends a list predicates to the ContestUserUpdate builder.
func (cuu *ContestUserUpdate) Where(ps ...predicate.ContestUser) *ContestUserUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetRole sets the "role" field.
func (cuu *ContestUserUpdate) SetRole(s string) *ContestUserUpdate {
	cuu.mutation.SetRole(s)
	return cuu
}

// SetContestID sets the "contest_id" field.
func (cuu *ContestUserUpdate) SetContestID(i int) *ContestUserUpdate {
	cuu.mutation.SetContestID(i)
	return cuu
}

// SetUserID sets the "user_id" field.
func (cuu *ContestUserUpdate) SetUserID(i int) *ContestUserUpdate {
	cuu.mutation.SetUserID(i)
	return cuu
}

// SetContest sets the "contest" edge to the Contest entity.
func (cuu *ContestUserUpdate) SetContest(c *Contest) *ContestUserUpdate {
	return cuu.SetContestID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cuu *ContestUserUpdate) SetUser(u *User) *ContestUserUpdate {
	return cuu.SetUserID(u.ID)
}

// Mutation returns the ContestUserMutation object of the builder.
func (cuu *ContestUserUpdate) Mutation() *ContestUserMutation {
	return cuu.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (cuu *ContestUserUpdate) ClearContest() *ContestUserUpdate {
	cuu.mutation.ClearContest()
	return cuu
}

// ClearUser clears the "user" edge to the User entity.
func (cuu *ContestUserUpdate) ClearUser() *ContestUserUpdate {
	cuu.mutation.ClearUser()
	return cuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *ContestUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cuu.sqlSave, cuu.mutation, cuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *ContestUserUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *ContestUserUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *ContestUserUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuu *ContestUserUpdate) check() error {
	if _, ok := cuu.mutation.ContestID(); cuu.mutation.ContestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestUser.contest"`)
	}
	if _, ok := cuu.mutation.UserID(); cuu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestUser.user"`)
	}
	return nil
}

func (cuu *ContestUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contestuser.Table, contestuser.Columns, sqlgraph.NewFieldSpec(contestuser.FieldID, field.TypeInt))
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuu.mutation.Role(); ok {
		_spec.SetField(contestuser.FieldRole, field.TypeString, value)
	}
	if cuu.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestuser.ContestTable,
			Columns: []string{contestuser.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestuser.ContestTable,
			Columns: []string{contestuser.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestuser.UserTable,
			Columns: []string{contestuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestuser.UserTable,
			Columns: []string{contestuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cuu.mutation.done = true
	return n, nil
}

// ContestUserUpdateOne is the builder for updating a single ContestUser entity.
type ContestUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContestUserMutation
}

// SetRole sets the "role" field.
func (cuuo *ContestUserUpdateOne) SetRole(s string) *ContestUserUpdateOne {
	cuuo.mutation.SetRole(s)
	return cuuo
}

// SetContestID sets the "contest_id" field.
func (cuuo *ContestUserUpdateOne) SetContestID(i int) *ContestUserUpdateOne {
	cuuo.mutation.SetContestID(i)
	return cuuo
}

// SetUserID sets the "user_id" field.
func (cuuo *ContestUserUpdateOne) SetUserID(i int) *ContestUserUpdateOne {
	cuuo.mutation.SetUserID(i)
	return cuuo
}

// SetContest sets the "contest" edge to the Contest entity.
func (cuuo *ContestUserUpdateOne) SetContest(c *Contest) *ContestUserUpdateOne {
	return cuuo.SetContestID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cuuo *ContestUserUpdateOne) SetUser(u *User) *ContestUserUpdateOne {
	return cuuo.SetUserID(u.ID)
}

// Mutation returns the ContestUserMutation object of the builder.
func (cuuo *ContestUserUpdateOne) Mutation() *ContestUserMutation {
	return cuuo.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (cuuo *ContestUserUpdateOne) ClearContest() *ContestUserUpdateOne {
	cuuo.mutation.ClearContest()
	return cuuo
}

// ClearUser clears the "user" edge to the User entity.
func (cuuo *ContestUserUpdateOne) ClearUser() *ContestUserUpdateOne {
	cuuo.mutation.ClearUser()
	return cuuo
}

// Where appends a list predicates to the ContestUserUpdate builder.
func (cuuo *ContestUserUpdateOne) Where(ps ...predicate.ContestUser) *ContestUserUpdateOne {
	cuuo.mutation.Where(ps...)
	return cuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *ContestUserUpdateOne) Select(field string, fields ...string) *ContestUserUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated ContestUser entity.
func (cuuo *ContestUserUpdateOne) Save(ctx context.Context) (*ContestUser, error) {
	return withHooks(ctx, cuuo.sqlSave, cuuo.mutation, cuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *ContestUserUpdateOne) SaveX(ctx context.Context) *ContestUser {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *ContestUserUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *ContestUserUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuuo *ContestUserUpdateOne) check() error {
	if _, ok := cuuo.mutation.ContestID(); cuuo.mutation.ContestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestUser.contest"`)
	}
	if _, ok := cuuo.mutation.UserID(); cuuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestUser.user"`)
	}
	return nil
}

func (cuuo *ContestUserUpdateOne) sqlSave(ctx context.Context) (_node *ContestUser, err error) {
	if err := cuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contestuser.Table, contestuser.Columns, sqlgraph.NewFieldSpec(contestuser.FieldID, field.TypeInt))
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContestUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contestuser.FieldID)
		for _, f := range fields {
			if !contestuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contestuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuuo.mutation.Role(); ok {
		_spec.SetField(contestuser.FieldRole, field.TypeString, value)
	}
	if cuuo.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestuser.ContestTable,
			Columns: []string{contestuser.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestuser.ContestTable,
			Columns: []string{contestuser.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestuser.UserTable,
			Columns: []string{contestuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestuser.UserTable,
			Columns: []string{contestuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContestUser{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuuo.mutation.done = true
	return _node, nil
}
