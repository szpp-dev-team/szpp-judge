// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/language"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/submit"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcase"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseresult"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseset"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLanguage       = "Language"
	TypeSubmit         = "Submit"
	TypeTask           = "Task"
	TypeTestcase       = "Testcase"
	TypeTestcaseResult = "TestcaseResult"
	TypeTestcaseSet    = "TestcaseSet"
	TypeUser           = "User"
)

// LanguageMutation represents an operation that mutates the Language nodes in the graph.
type LanguageMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	slug           *string
	clearedFields  map[string]struct{}
	submits        map[int]struct{}
	removedsubmits map[int]struct{}
	clearedsubmits bool
	done           bool
	oldValue       func(context.Context) (*Language, error)
	predicates     []predicate.Language
}

var _ ent.Mutation = (*LanguageMutation)(nil)

// languageOption allows management of the mutation configuration using functional options.
type languageOption func(*LanguageMutation)

// newLanguageMutation creates new mutation for the Language entity.
func newLanguageMutation(c config, op Op, opts ...languageOption) *LanguageMutation {
	m := &LanguageMutation{
		config:        c,
		op:            op,
		typ:           TypeLanguage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLanguageID sets the ID field of the mutation.
func withLanguageID(id int) languageOption {
	return func(m *LanguageMutation) {
		var (
			err   error
			once  sync.Once
			value *Language
		)
		m.oldValue = func(ctx context.Context) (*Language, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Language.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLanguage sets the old Language of the mutation.
func withLanguage(node *Language) languageOption {
	return func(m *LanguageMutation) {
		m.oldValue = func(context.Context) (*Language, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LanguageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LanguageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Language entities.
func (m *LanguageMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LanguageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LanguageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Language.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LanguageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LanguageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LanguageMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *LanguageMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *LanguageMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *LanguageMutation) ResetSlug() {
	m.slug = nil
}

// AddSubmitIDs adds the "submits" edge to the Submit entity by ids.
func (m *LanguageMutation) AddSubmitIDs(ids ...int) {
	if m.submits == nil {
		m.submits = make(map[int]struct{})
	}
	for i := range ids {
		m.submits[ids[i]] = struct{}{}
	}
}

// ClearSubmits clears the "submits" edge to the Submit entity.
func (m *LanguageMutation) ClearSubmits() {
	m.clearedsubmits = true
}

// SubmitsCleared reports if the "submits" edge to the Submit entity was cleared.
func (m *LanguageMutation) SubmitsCleared() bool {
	return m.clearedsubmits
}

// RemoveSubmitIDs removes the "submits" edge to the Submit entity by IDs.
func (m *LanguageMutation) RemoveSubmitIDs(ids ...int) {
	if m.removedsubmits == nil {
		m.removedsubmits = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.submits, ids[i])
		m.removedsubmits[ids[i]] = struct{}{}
	}
}

// RemovedSubmits returns the removed IDs of the "submits" edge to the Submit entity.
func (m *LanguageMutation) RemovedSubmitsIDs() (ids []int) {
	for id := range m.removedsubmits {
		ids = append(ids, id)
	}
	return
}

// SubmitsIDs returns the "submits" edge IDs in the mutation.
func (m *LanguageMutation) SubmitsIDs() (ids []int) {
	for id := range m.submits {
		ids = append(ids, id)
	}
	return
}

// ResetSubmits resets all changes to the "submits" edge.
func (m *LanguageMutation) ResetSubmits() {
	m.submits = nil
	m.clearedsubmits = false
	m.removedsubmits = nil
}

// Where appends a list predicates to the LanguageMutation builder.
func (m *LanguageMutation) Where(ps ...predicate.Language) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LanguageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LanguageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Language, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LanguageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LanguageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Language).
func (m *LanguageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LanguageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, language.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, language.FieldSlug)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LanguageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case language.FieldName:
		return m.Name()
	case language.FieldSlug:
		return m.Slug()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LanguageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case language.FieldName:
		return m.OldName(ctx)
	case language.FieldSlug:
		return m.OldSlug(ctx)
	}
	return nil, fmt.Errorf("unknown Language field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case language.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case language.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	}
	return fmt.Errorf("unknown Language field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LanguageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LanguageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Language numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LanguageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LanguageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LanguageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Language nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LanguageMutation) ResetField(name string) error {
	switch name {
	case language.FieldName:
		m.ResetName()
		return nil
	case language.FieldSlug:
		m.ResetSlug()
		return nil
	}
	return fmt.Errorf("unknown Language field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LanguageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.submits != nil {
		edges = append(edges, language.EdgeSubmits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LanguageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case language.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.submits))
		for id := range m.submits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LanguageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsubmits != nil {
		edges = append(edges, language.EdgeSubmits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LanguageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case language.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.removedsubmits))
		for id := range m.removedsubmits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LanguageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubmits {
		edges = append(edges, language.EdgeSubmits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LanguageMutation) EdgeCleared(name string) bool {
	switch name {
	case language.EdgeSubmits:
		return m.clearedsubmits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LanguageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Language unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LanguageMutation) ResetEdge(name string) error {
	switch name {
	case language.EdgeSubmits:
		m.ResetSubmits()
		return nil
	}
	return fmt.Errorf("unknown Language edge %s", name)
}

// SubmitMutation represents an operation that mutates the Submit nodes in the graph.
type SubmitMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	status                  *string
	exec_time               *int
	addexec_time            *int
	exec_memory             *int
	addexec_memory          *int
	submitted_at            *time.Time
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	users                   map[int]struct{}
	removedusers            map[int]struct{}
	clearedusers            bool
	task                    *int
	clearedtask             bool
	language                *int
	clearedlanguage         bool
	testcase_results        map[int]struct{}
	removedtestcase_results map[int]struct{}
	clearedtestcase_results bool
	done                    bool
	oldValue                func(context.Context) (*Submit, error)
	predicates              []predicate.Submit
}

var _ ent.Mutation = (*SubmitMutation)(nil)

// submitOption allows management of the mutation configuration using functional options.
type submitOption func(*SubmitMutation)

// newSubmitMutation creates new mutation for the Submit entity.
func newSubmitMutation(c config, op Op, opts ...submitOption) *SubmitMutation {
	m := &SubmitMutation{
		config:        c,
		op:            op,
		typ:           TypeSubmit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubmitID sets the ID field of the mutation.
func withSubmitID(id int) submitOption {
	return func(m *SubmitMutation) {
		var (
			err   error
			once  sync.Once
			value *Submit
		)
		m.oldValue = func(ctx context.Context) (*Submit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Submit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubmit sets the old Submit of the mutation.
func withSubmit(node *Submit) submitOption {
	return func(m *SubmitMutation) {
		m.oldValue = func(context.Context) (*Submit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubmitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubmitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Submit entities.
func (m *SubmitMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubmitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubmitMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Submit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *SubmitMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SubmitMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *SubmitMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[submit.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SubmitMutation) StatusCleared() bool {
	_, ok := m.clearedFields[submit.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SubmitMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, submit.FieldStatus)
}

// SetExecTime sets the "exec_time" field.
func (m *SubmitMutation) SetExecTime(i int) {
	m.exec_time = &i
	m.addexec_time = nil
}

// ExecTime returns the value of the "exec_time" field in the mutation.
func (m *SubmitMutation) ExecTime() (r int, exists bool) {
	v := m.exec_time
	if v == nil {
		return
	}
	return *v, true
}

// OldExecTime returns the old "exec_time" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldExecTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecTime: %w", err)
	}
	return oldValue.ExecTime, nil
}

// AddExecTime adds i to the "exec_time" field.
func (m *SubmitMutation) AddExecTime(i int) {
	if m.addexec_time != nil {
		*m.addexec_time += i
	} else {
		m.addexec_time = &i
	}
}

// AddedExecTime returns the value that was added to the "exec_time" field in this mutation.
func (m *SubmitMutation) AddedExecTime() (r int, exists bool) {
	v := m.addexec_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearExecTime clears the value of the "exec_time" field.
func (m *SubmitMutation) ClearExecTime() {
	m.exec_time = nil
	m.addexec_time = nil
	m.clearedFields[submit.FieldExecTime] = struct{}{}
}

// ExecTimeCleared returns if the "exec_time" field was cleared in this mutation.
func (m *SubmitMutation) ExecTimeCleared() bool {
	_, ok := m.clearedFields[submit.FieldExecTime]
	return ok
}

// ResetExecTime resets all changes to the "exec_time" field.
func (m *SubmitMutation) ResetExecTime() {
	m.exec_time = nil
	m.addexec_time = nil
	delete(m.clearedFields, submit.FieldExecTime)
}

// SetExecMemory sets the "exec_memory" field.
func (m *SubmitMutation) SetExecMemory(i int) {
	m.exec_memory = &i
	m.addexec_memory = nil
}

// ExecMemory returns the value of the "exec_memory" field in the mutation.
func (m *SubmitMutation) ExecMemory() (r int, exists bool) {
	v := m.exec_memory
	if v == nil {
		return
	}
	return *v, true
}

// OldExecMemory returns the old "exec_memory" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldExecMemory(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecMemory: %w", err)
	}
	return oldValue.ExecMemory, nil
}

// AddExecMemory adds i to the "exec_memory" field.
func (m *SubmitMutation) AddExecMemory(i int) {
	if m.addexec_memory != nil {
		*m.addexec_memory += i
	} else {
		m.addexec_memory = &i
	}
}

// AddedExecMemory returns the value that was added to the "exec_memory" field in this mutation.
func (m *SubmitMutation) AddedExecMemory() (r int, exists bool) {
	v := m.addexec_memory
	if v == nil {
		return
	}
	return *v, true
}

// ClearExecMemory clears the value of the "exec_memory" field.
func (m *SubmitMutation) ClearExecMemory() {
	m.exec_memory = nil
	m.addexec_memory = nil
	m.clearedFields[submit.FieldExecMemory] = struct{}{}
}

// ExecMemoryCleared returns if the "exec_memory" field was cleared in this mutation.
func (m *SubmitMutation) ExecMemoryCleared() bool {
	_, ok := m.clearedFields[submit.FieldExecMemory]
	return ok
}

// ResetExecMemory resets all changes to the "exec_memory" field.
func (m *SubmitMutation) ResetExecMemory() {
	m.exec_memory = nil
	m.addexec_memory = nil
	delete(m.clearedFields, submit.FieldExecMemory)
}

// SetSubmittedAt sets the "submitted_at" field.
func (m *SubmitMutation) SetSubmittedAt(t time.Time) {
	m.submitted_at = &t
}

// SubmittedAt returns the value of the "submitted_at" field in the mutation.
func (m *SubmitMutation) SubmittedAt() (r time.Time, exists bool) {
	v := m.submitted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmittedAt returns the old "submitted_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldSubmittedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmittedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmittedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmittedAt: %w", err)
	}
	return oldValue.SubmittedAt, nil
}

// ResetSubmittedAt resets all changes to the "submitted_at" field.
func (m *SubmitMutation) ResetSubmittedAt() {
	m.submitted_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubmitMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubmitMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubmitMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubmitMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubmitMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SubmitMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[submit.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SubmitMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[submit.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubmitMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, submit.FieldUpdatedAt)
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *SubmitMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *SubmitMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *SubmitMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *SubmitMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *SubmitMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *SubmitMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *SubmitMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// SetTaskID sets the "task" edge to the Task entity by id.
func (m *SubmitMutation) SetTaskID(id int) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Task entity.
func (m *SubmitMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *SubmitMutation) TaskCleared() bool {
	return m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *SubmitMutation) TaskID() (id int, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *SubmitMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *SubmitMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// SetLanguageID sets the "language" edge to the Language entity by id.
func (m *SubmitMutation) SetLanguageID(id int) {
	m.language = &id
}

// ClearLanguage clears the "language" edge to the Language entity.
func (m *SubmitMutation) ClearLanguage() {
	m.clearedlanguage = true
}

// LanguageCleared reports if the "language" edge to the Language entity was cleared.
func (m *SubmitMutation) LanguageCleared() bool {
	return m.clearedlanguage
}

// LanguageID returns the "language" edge ID in the mutation.
func (m *SubmitMutation) LanguageID() (id int, exists bool) {
	if m.language != nil {
		return *m.language, true
	}
	return
}

// LanguageIDs returns the "language" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LanguageID instead. It exists only for internal usage by the builders.
func (m *SubmitMutation) LanguageIDs() (ids []int) {
	if id := m.language; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLanguage resets all changes to the "language" edge.
func (m *SubmitMutation) ResetLanguage() {
	m.language = nil
	m.clearedlanguage = false
}

// AddTestcaseResultIDs adds the "testcase_results" edge to the TestcaseResult entity by ids.
func (m *SubmitMutation) AddTestcaseResultIDs(ids ...int) {
	if m.testcase_results == nil {
		m.testcase_results = make(map[int]struct{})
	}
	for i := range ids {
		m.testcase_results[ids[i]] = struct{}{}
	}
}

// ClearTestcaseResults clears the "testcase_results" edge to the TestcaseResult entity.
func (m *SubmitMutation) ClearTestcaseResults() {
	m.clearedtestcase_results = true
}

// TestcaseResultsCleared reports if the "testcase_results" edge to the TestcaseResult entity was cleared.
func (m *SubmitMutation) TestcaseResultsCleared() bool {
	return m.clearedtestcase_results
}

// RemoveTestcaseResultIDs removes the "testcase_results" edge to the TestcaseResult entity by IDs.
func (m *SubmitMutation) RemoveTestcaseResultIDs(ids ...int) {
	if m.removedtestcase_results == nil {
		m.removedtestcase_results = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.testcase_results, ids[i])
		m.removedtestcase_results[ids[i]] = struct{}{}
	}
}

// RemovedTestcaseResults returns the removed IDs of the "testcase_results" edge to the TestcaseResult entity.
func (m *SubmitMutation) RemovedTestcaseResultsIDs() (ids []int) {
	for id := range m.removedtestcase_results {
		ids = append(ids, id)
	}
	return
}

// TestcaseResultsIDs returns the "testcase_results" edge IDs in the mutation.
func (m *SubmitMutation) TestcaseResultsIDs() (ids []int) {
	for id := range m.testcase_results {
		ids = append(ids, id)
	}
	return
}

// ResetTestcaseResults resets all changes to the "testcase_results" edge.
func (m *SubmitMutation) ResetTestcaseResults() {
	m.testcase_results = nil
	m.clearedtestcase_results = false
	m.removedtestcase_results = nil
}

// Where appends a list predicates to the SubmitMutation builder.
func (m *SubmitMutation) Where(ps ...predicate.Submit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubmitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubmitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Submit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubmitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubmitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Submit).
func (m *SubmitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubmitMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.status != nil {
		fields = append(fields, submit.FieldStatus)
	}
	if m.exec_time != nil {
		fields = append(fields, submit.FieldExecTime)
	}
	if m.exec_memory != nil {
		fields = append(fields, submit.FieldExecMemory)
	}
	if m.submitted_at != nil {
		fields = append(fields, submit.FieldSubmittedAt)
	}
	if m.created_at != nil {
		fields = append(fields, submit.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, submit.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubmitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case submit.FieldStatus:
		return m.Status()
	case submit.FieldExecTime:
		return m.ExecTime()
	case submit.FieldExecMemory:
		return m.ExecMemory()
	case submit.FieldSubmittedAt:
		return m.SubmittedAt()
	case submit.FieldCreatedAt:
		return m.CreatedAt()
	case submit.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubmitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case submit.FieldStatus:
		return m.OldStatus(ctx)
	case submit.FieldExecTime:
		return m.OldExecTime(ctx)
	case submit.FieldExecMemory:
		return m.OldExecMemory(ctx)
	case submit.FieldSubmittedAt:
		return m.OldSubmittedAt(ctx)
	case submit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case submit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Submit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubmitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case submit.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case submit.FieldExecTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecTime(v)
		return nil
	case submit.FieldExecMemory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecMemory(v)
		return nil
	case submit.FieldSubmittedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmittedAt(v)
		return nil
	case submit.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case submit.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Submit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubmitMutation) AddedFields() []string {
	var fields []string
	if m.addexec_time != nil {
		fields = append(fields, submit.FieldExecTime)
	}
	if m.addexec_memory != nil {
		fields = append(fields, submit.FieldExecMemory)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubmitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case submit.FieldExecTime:
		return m.AddedExecTime()
	case submit.FieldExecMemory:
		return m.AddedExecMemory()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubmitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case submit.FieldExecTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecTime(v)
		return nil
	case submit.FieldExecMemory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecMemory(v)
		return nil
	}
	return fmt.Errorf("unknown Submit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubmitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(submit.FieldStatus) {
		fields = append(fields, submit.FieldStatus)
	}
	if m.FieldCleared(submit.FieldExecTime) {
		fields = append(fields, submit.FieldExecTime)
	}
	if m.FieldCleared(submit.FieldExecMemory) {
		fields = append(fields, submit.FieldExecMemory)
	}
	if m.FieldCleared(submit.FieldUpdatedAt) {
		fields = append(fields, submit.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubmitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubmitMutation) ClearField(name string) error {
	switch name {
	case submit.FieldStatus:
		m.ClearStatus()
		return nil
	case submit.FieldExecTime:
		m.ClearExecTime()
		return nil
	case submit.FieldExecMemory:
		m.ClearExecMemory()
		return nil
	case submit.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Submit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubmitMutation) ResetField(name string) error {
	switch name {
	case submit.FieldStatus:
		m.ResetStatus()
		return nil
	case submit.FieldExecTime:
		m.ResetExecTime()
		return nil
	case submit.FieldExecMemory:
		m.ResetExecMemory()
		return nil
	case submit.FieldSubmittedAt:
		m.ResetSubmittedAt()
		return nil
	case submit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case submit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Submit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubmitMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.users != nil {
		edges = append(edges, submit.EdgeUsers)
	}
	if m.task != nil {
		edges = append(edges, submit.EdgeTask)
	}
	if m.language != nil {
		edges = append(edges, submit.EdgeLanguage)
	}
	if m.testcase_results != nil {
		edges = append(edges, submit.EdgeTestcaseResults)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubmitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case submit.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case submit.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	case submit.EdgeLanguage:
		if id := m.language; id != nil {
			return []ent.Value{*id}
		}
	case submit.EdgeTestcaseResults:
		ids := make([]ent.Value, 0, len(m.testcase_results))
		for id := range m.testcase_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubmitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedusers != nil {
		edges = append(edges, submit.EdgeUsers)
	}
	if m.removedtestcase_results != nil {
		edges = append(edges, submit.EdgeTestcaseResults)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubmitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case submit.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case submit.EdgeTestcaseResults:
		ids := make([]ent.Value, 0, len(m.removedtestcase_results))
		for id := range m.removedtestcase_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubmitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedusers {
		edges = append(edges, submit.EdgeUsers)
	}
	if m.clearedtask {
		edges = append(edges, submit.EdgeTask)
	}
	if m.clearedlanguage {
		edges = append(edges, submit.EdgeLanguage)
	}
	if m.clearedtestcase_results {
		edges = append(edges, submit.EdgeTestcaseResults)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubmitMutation) EdgeCleared(name string) bool {
	switch name {
	case submit.EdgeUsers:
		return m.clearedusers
	case submit.EdgeTask:
		return m.clearedtask
	case submit.EdgeLanguage:
		return m.clearedlanguage
	case submit.EdgeTestcaseResults:
		return m.clearedtestcase_results
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubmitMutation) ClearEdge(name string) error {
	switch name {
	case submit.EdgeTask:
		m.ClearTask()
		return nil
	case submit.EdgeLanguage:
		m.ClearLanguage()
		return nil
	}
	return fmt.Errorf("unknown Submit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubmitMutation) ResetEdge(name string) error {
	switch name {
	case submit.EdgeUsers:
		m.ResetUsers()
		return nil
	case submit.EdgeTask:
		m.ResetTask()
		return nil
	case submit.EdgeLanguage:
		m.ResetLanguage()
		return nil
	case submit.EdgeTestcaseResults:
		m.ResetTestcaseResults()
		return nil
	}
	return fmt.Errorf("unknown Submit edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	title                *string
	statement            *string
	difficulty           *string
	exec_time_limit      *uint
	addexec_time_limit   *int
	exec_memory_limit    *uint
	addexec_memory_limit *int
	judge_type           *task.JudgeType
	case_insensitive     *bool
	ndigits              *uint
	addndigits           *int
	judge_code_path      *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	testcase_sets        map[int]struct{}
	removedtestcase_sets map[int]struct{}
	clearedtestcase_sets bool
	testcases            map[int]struct{}
	removedtestcases     map[int]struct{}
	clearedtestcases     bool
	submits              map[int]struct{}
	removedsubmits       map[int]struct{}
	clearedsubmits       bool
	user                 *int
	cleareduser          bool
	done                 bool
	oldValue             func(context.Context) (*Task, error)
	predicates           []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *TaskMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TaskMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TaskMutation) ResetTitle() {
	m.title = nil
}

// SetStatement sets the "statement" field.
func (m *TaskMutation) SetStatement(s string) {
	m.statement = &s
}

// Statement returns the value of the "statement" field in the mutation.
func (m *TaskMutation) Statement() (r string, exists bool) {
	v := m.statement
	if v == nil {
		return
	}
	return *v, true
}

// OldStatement returns the old "statement" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStatement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatement: %w", err)
	}
	return oldValue.Statement, nil
}

// ResetStatement resets all changes to the "statement" field.
func (m *TaskMutation) ResetStatement() {
	m.statement = nil
}

// SetDifficulty sets the "difficulty" field.
func (m *TaskMutation) SetDifficulty(s string) {
	m.difficulty = &s
}

// Difficulty returns the value of the "difficulty" field in the mutation.
func (m *TaskMutation) Difficulty() (r string, exists bool) {
	v := m.difficulty
	if v == nil {
		return
	}
	return *v, true
}

// OldDifficulty returns the old "difficulty" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDifficulty(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDifficulty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDifficulty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDifficulty: %w", err)
	}
	return oldValue.Difficulty, nil
}

// ResetDifficulty resets all changes to the "difficulty" field.
func (m *TaskMutation) ResetDifficulty() {
	m.difficulty = nil
}

// SetExecTimeLimit sets the "exec_time_limit" field.
func (m *TaskMutation) SetExecTimeLimit(u uint) {
	m.exec_time_limit = &u
	m.addexec_time_limit = nil
}

// ExecTimeLimit returns the value of the "exec_time_limit" field in the mutation.
func (m *TaskMutation) ExecTimeLimit() (r uint, exists bool) {
	v := m.exec_time_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldExecTimeLimit returns the old "exec_time_limit" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldExecTimeLimit(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecTimeLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecTimeLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecTimeLimit: %w", err)
	}
	return oldValue.ExecTimeLimit, nil
}

// AddExecTimeLimit adds u to the "exec_time_limit" field.
func (m *TaskMutation) AddExecTimeLimit(u int) {
	if m.addexec_time_limit != nil {
		*m.addexec_time_limit += u
	} else {
		m.addexec_time_limit = &u
	}
}

// AddedExecTimeLimit returns the value that was added to the "exec_time_limit" field in this mutation.
func (m *TaskMutation) AddedExecTimeLimit() (r int, exists bool) {
	v := m.addexec_time_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetExecTimeLimit resets all changes to the "exec_time_limit" field.
func (m *TaskMutation) ResetExecTimeLimit() {
	m.exec_time_limit = nil
	m.addexec_time_limit = nil
}

// SetExecMemoryLimit sets the "exec_memory_limit" field.
func (m *TaskMutation) SetExecMemoryLimit(u uint) {
	m.exec_memory_limit = &u
	m.addexec_memory_limit = nil
}

// ExecMemoryLimit returns the value of the "exec_memory_limit" field in the mutation.
func (m *TaskMutation) ExecMemoryLimit() (r uint, exists bool) {
	v := m.exec_memory_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldExecMemoryLimit returns the old "exec_memory_limit" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldExecMemoryLimit(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecMemoryLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecMemoryLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecMemoryLimit: %w", err)
	}
	return oldValue.ExecMemoryLimit, nil
}

// AddExecMemoryLimit adds u to the "exec_memory_limit" field.
func (m *TaskMutation) AddExecMemoryLimit(u int) {
	if m.addexec_memory_limit != nil {
		*m.addexec_memory_limit += u
	} else {
		m.addexec_memory_limit = &u
	}
}

// AddedExecMemoryLimit returns the value that was added to the "exec_memory_limit" field in this mutation.
func (m *TaskMutation) AddedExecMemoryLimit() (r int, exists bool) {
	v := m.addexec_memory_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetExecMemoryLimit resets all changes to the "exec_memory_limit" field.
func (m *TaskMutation) ResetExecMemoryLimit() {
	m.exec_memory_limit = nil
	m.addexec_memory_limit = nil
}

// SetJudgeType sets the "judge_type" field.
func (m *TaskMutation) SetJudgeType(tt task.JudgeType) {
	m.judge_type = &tt
}

// JudgeType returns the value of the "judge_type" field in the mutation.
func (m *TaskMutation) JudgeType() (r task.JudgeType, exists bool) {
	v := m.judge_type
	if v == nil {
		return
	}
	return *v, true
}

// OldJudgeType returns the old "judge_type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldJudgeType(ctx context.Context) (v task.JudgeType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJudgeType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJudgeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJudgeType: %w", err)
	}
	return oldValue.JudgeType, nil
}

// ResetJudgeType resets all changes to the "judge_type" field.
func (m *TaskMutation) ResetJudgeType() {
	m.judge_type = nil
}

// SetCaseInsensitive sets the "case_insensitive" field.
func (m *TaskMutation) SetCaseInsensitive(b bool) {
	m.case_insensitive = &b
}

// CaseInsensitive returns the value of the "case_insensitive" field in the mutation.
func (m *TaskMutation) CaseInsensitive() (r bool, exists bool) {
	v := m.case_insensitive
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseInsensitive returns the old "case_insensitive" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCaseInsensitive(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseInsensitive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseInsensitive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseInsensitive: %w", err)
	}
	return oldValue.CaseInsensitive, nil
}

// ClearCaseInsensitive clears the value of the "case_insensitive" field.
func (m *TaskMutation) ClearCaseInsensitive() {
	m.case_insensitive = nil
	m.clearedFields[task.FieldCaseInsensitive] = struct{}{}
}

// CaseInsensitiveCleared returns if the "case_insensitive" field was cleared in this mutation.
func (m *TaskMutation) CaseInsensitiveCleared() bool {
	_, ok := m.clearedFields[task.FieldCaseInsensitive]
	return ok
}

// ResetCaseInsensitive resets all changes to the "case_insensitive" field.
func (m *TaskMutation) ResetCaseInsensitive() {
	m.case_insensitive = nil
	delete(m.clearedFields, task.FieldCaseInsensitive)
}

// SetNdigits sets the "ndigits" field.
func (m *TaskMutation) SetNdigits(u uint) {
	m.ndigits = &u
	m.addndigits = nil
}

// Ndigits returns the value of the "ndigits" field in the mutation.
func (m *TaskMutation) Ndigits() (r uint, exists bool) {
	v := m.ndigits
	if v == nil {
		return
	}
	return *v, true
}

// OldNdigits returns the old "ndigits" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldNdigits(ctx context.Context) (v *uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNdigits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNdigits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNdigits: %w", err)
	}
	return oldValue.Ndigits, nil
}

// AddNdigits adds u to the "ndigits" field.
func (m *TaskMutation) AddNdigits(u int) {
	if m.addndigits != nil {
		*m.addndigits += u
	} else {
		m.addndigits = &u
	}
}

// AddedNdigits returns the value that was added to the "ndigits" field in this mutation.
func (m *TaskMutation) AddedNdigits() (r int, exists bool) {
	v := m.addndigits
	if v == nil {
		return
	}
	return *v, true
}

// ClearNdigits clears the value of the "ndigits" field.
func (m *TaskMutation) ClearNdigits() {
	m.ndigits = nil
	m.addndigits = nil
	m.clearedFields[task.FieldNdigits] = struct{}{}
}

// NdigitsCleared returns if the "ndigits" field was cleared in this mutation.
func (m *TaskMutation) NdigitsCleared() bool {
	_, ok := m.clearedFields[task.FieldNdigits]
	return ok
}

// ResetNdigits resets all changes to the "ndigits" field.
func (m *TaskMutation) ResetNdigits() {
	m.ndigits = nil
	m.addndigits = nil
	delete(m.clearedFields, task.FieldNdigits)
}

// SetJudgeCodePath sets the "judge_code_path" field.
func (m *TaskMutation) SetJudgeCodePath(s string) {
	m.judge_code_path = &s
}

// JudgeCodePath returns the value of the "judge_code_path" field in the mutation.
func (m *TaskMutation) JudgeCodePath() (r string, exists bool) {
	v := m.judge_code_path
	if v == nil {
		return
	}
	return *v, true
}

// OldJudgeCodePath returns the old "judge_code_path" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldJudgeCodePath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJudgeCodePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJudgeCodePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJudgeCodePath: %w", err)
	}
	return oldValue.JudgeCodePath, nil
}

// ClearJudgeCodePath clears the value of the "judge_code_path" field.
func (m *TaskMutation) ClearJudgeCodePath() {
	m.judge_code_path = nil
	m.clearedFields[task.FieldJudgeCodePath] = struct{}{}
}

// JudgeCodePathCleared returns if the "judge_code_path" field was cleared in this mutation.
func (m *TaskMutation) JudgeCodePathCleared() bool {
	_, ok := m.clearedFields[task.FieldJudgeCodePath]
	return ok
}

// ResetJudgeCodePath resets all changes to the "judge_code_path" field.
func (m *TaskMutation) ResetJudgeCodePath() {
	m.judge_code_path = nil
	delete(m.clearedFields, task.FieldJudgeCodePath)
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TaskMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[task.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TaskMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, task.FieldUpdatedAt)
}

// AddTestcaseSetIDs adds the "testcase_sets" edge to the TestcaseSet entity by ids.
func (m *TaskMutation) AddTestcaseSetIDs(ids ...int) {
	if m.testcase_sets == nil {
		m.testcase_sets = make(map[int]struct{})
	}
	for i := range ids {
		m.testcase_sets[ids[i]] = struct{}{}
	}
}

// ClearTestcaseSets clears the "testcase_sets" edge to the TestcaseSet entity.
func (m *TaskMutation) ClearTestcaseSets() {
	m.clearedtestcase_sets = true
}

// TestcaseSetsCleared reports if the "testcase_sets" edge to the TestcaseSet entity was cleared.
func (m *TaskMutation) TestcaseSetsCleared() bool {
	return m.clearedtestcase_sets
}

// RemoveTestcaseSetIDs removes the "testcase_sets" edge to the TestcaseSet entity by IDs.
func (m *TaskMutation) RemoveTestcaseSetIDs(ids ...int) {
	if m.removedtestcase_sets == nil {
		m.removedtestcase_sets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.testcase_sets, ids[i])
		m.removedtestcase_sets[ids[i]] = struct{}{}
	}
}

// RemovedTestcaseSets returns the removed IDs of the "testcase_sets" edge to the TestcaseSet entity.
func (m *TaskMutation) RemovedTestcaseSetsIDs() (ids []int) {
	for id := range m.removedtestcase_sets {
		ids = append(ids, id)
	}
	return
}

// TestcaseSetsIDs returns the "testcase_sets" edge IDs in the mutation.
func (m *TaskMutation) TestcaseSetsIDs() (ids []int) {
	for id := range m.testcase_sets {
		ids = append(ids, id)
	}
	return
}

// ResetTestcaseSets resets all changes to the "testcase_sets" edge.
func (m *TaskMutation) ResetTestcaseSets() {
	m.testcase_sets = nil
	m.clearedtestcase_sets = false
	m.removedtestcase_sets = nil
}

// AddTestcaseIDs adds the "testcases" edge to the Testcase entity by ids.
func (m *TaskMutation) AddTestcaseIDs(ids ...int) {
	if m.testcases == nil {
		m.testcases = make(map[int]struct{})
	}
	for i := range ids {
		m.testcases[ids[i]] = struct{}{}
	}
}

// ClearTestcases clears the "testcases" edge to the Testcase entity.
func (m *TaskMutation) ClearTestcases() {
	m.clearedtestcases = true
}

// TestcasesCleared reports if the "testcases" edge to the Testcase entity was cleared.
func (m *TaskMutation) TestcasesCleared() bool {
	return m.clearedtestcases
}

// RemoveTestcaseIDs removes the "testcases" edge to the Testcase entity by IDs.
func (m *TaskMutation) RemoveTestcaseIDs(ids ...int) {
	if m.removedtestcases == nil {
		m.removedtestcases = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.testcases, ids[i])
		m.removedtestcases[ids[i]] = struct{}{}
	}
}

// RemovedTestcases returns the removed IDs of the "testcases" edge to the Testcase entity.
func (m *TaskMutation) RemovedTestcasesIDs() (ids []int) {
	for id := range m.removedtestcases {
		ids = append(ids, id)
	}
	return
}

// TestcasesIDs returns the "testcases" edge IDs in the mutation.
func (m *TaskMutation) TestcasesIDs() (ids []int) {
	for id := range m.testcases {
		ids = append(ids, id)
	}
	return
}

// ResetTestcases resets all changes to the "testcases" edge.
func (m *TaskMutation) ResetTestcases() {
	m.testcases = nil
	m.clearedtestcases = false
	m.removedtestcases = nil
}

// AddSubmitIDs adds the "submits" edge to the Submit entity by ids.
func (m *TaskMutation) AddSubmitIDs(ids ...int) {
	if m.submits == nil {
		m.submits = make(map[int]struct{})
	}
	for i := range ids {
		m.submits[ids[i]] = struct{}{}
	}
}

// ClearSubmits clears the "submits" edge to the Submit entity.
func (m *TaskMutation) ClearSubmits() {
	m.clearedsubmits = true
}

// SubmitsCleared reports if the "submits" edge to the Submit entity was cleared.
func (m *TaskMutation) SubmitsCleared() bool {
	return m.clearedsubmits
}

// RemoveSubmitIDs removes the "submits" edge to the Submit entity by IDs.
func (m *TaskMutation) RemoveSubmitIDs(ids ...int) {
	if m.removedsubmits == nil {
		m.removedsubmits = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.submits, ids[i])
		m.removedsubmits[ids[i]] = struct{}{}
	}
}

// RemovedSubmits returns the removed IDs of the "submits" edge to the Submit entity.
func (m *TaskMutation) RemovedSubmitsIDs() (ids []int) {
	for id := range m.removedsubmits {
		ids = append(ids, id)
	}
	return
}

// SubmitsIDs returns the "submits" edge IDs in the mutation.
func (m *TaskMutation) SubmitsIDs() (ids []int) {
	for id := range m.submits {
		ids = append(ids, id)
	}
	return
}

// ResetSubmits resets all changes to the "submits" edge.
func (m *TaskMutation) ResetSubmits() {
	m.submits = nil
	m.clearedsubmits = false
	m.removedsubmits = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *TaskMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *TaskMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TaskMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TaskMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TaskMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.title != nil {
		fields = append(fields, task.FieldTitle)
	}
	if m.statement != nil {
		fields = append(fields, task.FieldStatement)
	}
	if m.difficulty != nil {
		fields = append(fields, task.FieldDifficulty)
	}
	if m.exec_time_limit != nil {
		fields = append(fields, task.FieldExecTimeLimit)
	}
	if m.exec_memory_limit != nil {
		fields = append(fields, task.FieldExecMemoryLimit)
	}
	if m.judge_type != nil {
		fields = append(fields, task.FieldJudgeType)
	}
	if m.case_insensitive != nil {
		fields = append(fields, task.FieldCaseInsensitive)
	}
	if m.ndigits != nil {
		fields = append(fields, task.FieldNdigits)
	}
	if m.judge_code_path != nil {
		fields = append(fields, task.FieldJudgeCodePath)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, task.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldTitle:
		return m.Title()
	case task.FieldStatement:
		return m.Statement()
	case task.FieldDifficulty:
		return m.Difficulty()
	case task.FieldExecTimeLimit:
		return m.ExecTimeLimit()
	case task.FieldExecMemoryLimit:
		return m.ExecMemoryLimit()
	case task.FieldJudgeType:
		return m.JudgeType()
	case task.FieldCaseInsensitive:
		return m.CaseInsensitive()
	case task.FieldNdigits:
		return m.Ndigits()
	case task.FieldJudgeCodePath:
		return m.JudgeCodePath()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldTitle:
		return m.OldTitle(ctx)
	case task.FieldStatement:
		return m.OldStatement(ctx)
	case task.FieldDifficulty:
		return m.OldDifficulty(ctx)
	case task.FieldExecTimeLimit:
		return m.OldExecTimeLimit(ctx)
	case task.FieldExecMemoryLimit:
		return m.OldExecMemoryLimit(ctx)
	case task.FieldJudgeType:
		return m.OldJudgeType(ctx)
	case task.FieldCaseInsensitive:
		return m.OldCaseInsensitive(ctx)
	case task.FieldNdigits:
		return m.OldNdigits(ctx)
	case task.FieldJudgeCodePath:
		return m.OldJudgeCodePath(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case task.FieldStatement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatement(v)
		return nil
	case task.FieldDifficulty:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDifficulty(v)
		return nil
	case task.FieldExecTimeLimit:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecTimeLimit(v)
		return nil
	case task.FieldExecMemoryLimit:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecMemoryLimit(v)
		return nil
	case task.FieldJudgeType:
		v, ok := value.(task.JudgeType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJudgeType(v)
		return nil
	case task.FieldCaseInsensitive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseInsensitive(v)
		return nil
	case task.FieldNdigits:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNdigits(v)
		return nil
	case task.FieldJudgeCodePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJudgeCodePath(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addexec_time_limit != nil {
		fields = append(fields, task.FieldExecTimeLimit)
	}
	if m.addexec_memory_limit != nil {
		fields = append(fields, task.FieldExecMemoryLimit)
	}
	if m.addndigits != nil {
		fields = append(fields, task.FieldNdigits)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldExecTimeLimit:
		return m.AddedExecTimeLimit()
	case task.FieldExecMemoryLimit:
		return m.AddedExecMemoryLimit()
	case task.FieldNdigits:
		return m.AddedNdigits()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldExecTimeLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecTimeLimit(v)
		return nil
	case task.FieldExecMemoryLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecMemoryLimit(v)
		return nil
	case task.FieldNdigits:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNdigits(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldCaseInsensitive) {
		fields = append(fields, task.FieldCaseInsensitive)
	}
	if m.FieldCleared(task.FieldNdigits) {
		fields = append(fields, task.FieldNdigits)
	}
	if m.FieldCleared(task.FieldJudgeCodePath) {
		fields = append(fields, task.FieldJudgeCodePath)
	}
	if m.FieldCleared(task.FieldUpdatedAt) {
		fields = append(fields, task.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldCaseInsensitive:
		m.ClearCaseInsensitive()
		return nil
	case task.FieldNdigits:
		m.ClearNdigits()
		return nil
	case task.FieldJudgeCodePath:
		m.ClearJudgeCodePath()
		return nil
	case task.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldTitle:
		m.ResetTitle()
		return nil
	case task.FieldStatement:
		m.ResetStatement()
		return nil
	case task.FieldDifficulty:
		m.ResetDifficulty()
		return nil
	case task.FieldExecTimeLimit:
		m.ResetExecTimeLimit()
		return nil
	case task.FieldExecMemoryLimit:
		m.ResetExecMemoryLimit()
		return nil
	case task.FieldJudgeType:
		m.ResetJudgeType()
		return nil
	case task.FieldCaseInsensitive:
		m.ResetCaseInsensitive()
		return nil
	case task.FieldNdigits:
		m.ResetNdigits()
		return nil
	case task.FieldJudgeCodePath:
		m.ResetJudgeCodePath()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.testcase_sets != nil {
		edges = append(edges, task.EdgeTestcaseSets)
	}
	if m.testcases != nil {
		edges = append(edges, task.EdgeTestcases)
	}
	if m.submits != nil {
		edges = append(edges, task.EdgeSubmits)
	}
	if m.user != nil {
		edges = append(edges, task.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeTestcaseSets:
		ids := make([]ent.Value, 0, len(m.testcase_sets))
		for id := range m.testcase_sets {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeTestcases:
		ids := make([]ent.Value, 0, len(m.testcases))
		for id := range m.testcases {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.submits))
		for id := range m.submits {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtestcase_sets != nil {
		edges = append(edges, task.EdgeTestcaseSets)
	}
	if m.removedtestcases != nil {
		edges = append(edges, task.EdgeTestcases)
	}
	if m.removedsubmits != nil {
		edges = append(edges, task.EdgeSubmits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeTestcaseSets:
		ids := make([]ent.Value, 0, len(m.removedtestcase_sets))
		for id := range m.removedtestcase_sets {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeTestcases:
		ids := make([]ent.Value, 0, len(m.removedtestcases))
		for id := range m.removedtestcases {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.removedsubmits))
		for id := range m.removedsubmits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtestcase_sets {
		edges = append(edges, task.EdgeTestcaseSets)
	}
	if m.clearedtestcases {
		edges = append(edges, task.EdgeTestcases)
	}
	if m.clearedsubmits {
		edges = append(edges, task.EdgeSubmits)
	}
	if m.cleareduser {
		edges = append(edges, task.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeTestcaseSets:
		return m.clearedtestcase_sets
	case task.EdgeTestcases:
		return m.clearedtestcases
	case task.EdgeSubmits:
		return m.clearedsubmits
	case task.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeTestcaseSets:
		m.ResetTestcaseSets()
		return nil
	case task.EdgeTestcases:
		m.ResetTestcases()
		return nil
	case task.EdgeSubmits:
		m.ResetSubmits()
		return nil
	case task.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// TestcaseMutation represents an operation that mutates the Testcase nodes in the graph.
type TestcaseMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	name                 *string
	description          *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	testcase_sets        map[int]struct{}
	removedtestcase_sets map[int]struct{}
	clearedtestcase_sets bool
	task                 *int
	clearedtask          bool
	done                 bool
	oldValue             func(context.Context) (*Testcase, error)
	predicates           []predicate.Testcase
}

var _ ent.Mutation = (*TestcaseMutation)(nil)

// testcaseOption allows management of the mutation configuration using functional options.
type testcaseOption func(*TestcaseMutation)

// newTestcaseMutation creates new mutation for the Testcase entity.
func newTestcaseMutation(c config, op Op, opts ...testcaseOption) *TestcaseMutation {
	m := &TestcaseMutation{
		config:        c,
		op:            op,
		typ:           TypeTestcase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestcaseID sets the ID field of the mutation.
func withTestcaseID(id int) testcaseOption {
	return func(m *TestcaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Testcase
		)
		m.oldValue = func(ctx context.Context) (*Testcase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Testcase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestcase sets the old Testcase of the mutation.
func withTestcase(node *Testcase) testcaseOption {
	return func(m *TestcaseMutation) {
		m.oldValue = func(context.Context) (*Testcase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestcaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestcaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Testcase entities.
func (m *TestcaseMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestcaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestcaseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Testcase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TestcaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TestcaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Testcase entity.
// If the Testcase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TestcaseMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *TestcaseMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TestcaseMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Testcase entity.
// If the Testcase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TestcaseMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[testcase.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TestcaseMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[testcase.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TestcaseMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, testcase.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *TestcaseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestcaseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Testcase entity.
// If the Testcase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestcaseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestcaseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestcaseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Testcase entity.
// If the Testcase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TestcaseMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[testcase.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TestcaseMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[testcase.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestcaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, testcase.FieldUpdatedAt)
}

// AddTestcaseSetIDs adds the "testcase_sets" edge to the TestcaseSet entity by ids.
func (m *TestcaseMutation) AddTestcaseSetIDs(ids ...int) {
	if m.testcase_sets == nil {
		m.testcase_sets = make(map[int]struct{})
	}
	for i := range ids {
		m.testcase_sets[ids[i]] = struct{}{}
	}
}

// ClearTestcaseSets clears the "testcase_sets" edge to the TestcaseSet entity.
func (m *TestcaseMutation) ClearTestcaseSets() {
	m.clearedtestcase_sets = true
}

// TestcaseSetsCleared reports if the "testcase_sets" edge to the TestcaseSet entity was cleared.
func (m *TestcaseMutation) TestcaseSetsCleared() bool {
	return m.clearedtestcase_sets
}

// RemoveTestcaseSetIDs removes the "testcase_sets" edge to the TestcaseSet entity by IDs.
func (m *TestcaseMutation) RemoveTestcaseSetIDs(ids ...int) {
	if m.removedtestcase_sets == nil {
		m.removedtestcase_sets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.testcase_sets, ids[i])
		m.removedtestcase_sets[ids[i]] = struct{}{}
	}
}

// RemovedTestcaseSets returns the removed IDs of the "testcase_sets" edge to the TestcaseSet entity.
func (m *TestcaseMutation) RemovedTestcaseSetsIDs() (ids []int) {
	for id := range m.removedtestcase_sets {
		ids = append(ids, id)
	}
	return
}

// TestcaseSetsIDs returns the "testcase_sets" edge IDs in the mutation.
func (m *TestcaseMutation) TestcaseSetsIDs() (ids []int) {
	for id := range m.testcase_sets {
		ids = append(ids, id)
	}
	return
}

// ResetTestcaseSets resets all changes to the "testcase_sets" edge.
func (m *TestcaseMutation) ResetTestcaseSets() {
	m.testcase_sets = nil
	m.clearedtestcase_sets = false
	m.removedtestcase_sets = nil
}

// SetTaskID sets the "task" edge to the Task entity by id.
func (m *TestcaseMutation) SetTaskID(id int) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Task entity.
func (m *TestcaseMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *TestcaseMutation) TaskCleared() bool {
	return m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *TestcaseMutation) TaskID() (id int, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *TestcaseMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *TestcaseMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// Where appends a list predicates to the TestcaseMutation builder.
func (m *TestcaseMutation) Where(ps ...predicate.Testcase) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TestcaseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TestcaseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Testcase, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TestcaseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TestcaseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Testcase).
func (m *TestcaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestcaseMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, testcase.FieldName)
	}
	if m.description != nil {
		fields = append(fields, testcase.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, testcase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testcase.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestcaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testcase.FieldName:
		return m.Name()
	case testcase.FieldDescription:
		return m.Description()
	case testcase.FieldCreatedAt:
		return m.CreatedAt()
	case testcase.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestcaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testcase.FieldName:
		return m.OldName(ctx)
	case testcase.FieldDescription:
		return m.OldDescription(ctx)
	case testcase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testcase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Testcase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestcaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testcase.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case testcase.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case testcase.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testcase.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Testcase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestcaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestcaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestcaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Testcase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestcaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testcase.FieldDescription) {
		fields = append(fields, testcase.FieldDescription)
	}
	if m.FieldCleared(testcase.FieldUpdatedAt) {
		fields = append(fields, testcase.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestcaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestcaseMutation) ClearField(name string) error {
	switch name {
	case testcase.FieldDescription:
		m.ClearDescription()
		return nil
	case testcase.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Testcase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestcaseMutation) ResetField(name string) error {
	switch name {
	case testcase.FieldName:
		m.ResetName()
		return nil
	case testcase.FieldDescription:
		m.ResetDescription()
		return nil
	case testcase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testcase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Testcase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestcaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.testcase_sets != nil {
		edges = append(edges, testcase.EdgeTestcaseSets)
	}
	if m.task != nil {
		edges = append(edges, testcase.EdgeTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestcaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case testcase.EdgeTestcaseSets:
		ids := make([]ent.Value, 0, len(m.testcase_sets))
		for id := range m.testcase_sets {
			ids = append(ids, id)
		}
		return ids
	case testcase.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestcaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtestcase_sets != nil {
		edges = append(edges, testcase.EdgeTestcaseSets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestcaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case testcase.EdgeTestcaseSets:
		ids := make([]ent.Value, 0, len(m.removedtestcase_sets))
		for id := range m.removedtestcase_sets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestcaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtestcase_sets {
		edges = append(edges, testcase.EdgeTestcaseSets)
	}
	if m.clearedtask {
		edges = append(edges, testcase.EdgeTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestcaseMutation) EdgeCleared(name string) bool {
	switch name {
	case testcase.EdgeTestcaseSets:
		return m.clearedtestcase_sets
	case testcase.EdgeTask:
		return m.clearedtask
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestcaseMutation) ClearEdge(name string) error {
	switch name {
	case testcase.EdgeTask:
		m.ClearTask()
		return nil
	}
	return fmt.Errorf("unknown Testcase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestcaseMutation) ResetEdge(name string) error {
	switch name {
	case testcase.EdgeTestcaseSets:
		m.ResetTestcaseSets()
		return nil
	case testcase.EdgeTask:
		m.ResetTask()
		return nil
	}
	return fmt.Errorf("unknown Testcase edge %s", name)
}

// TestcaseResultMutation represents an operation that mutates the TestcaseResult nodes in the graph.
type TestcaseResultMutation struct {
	config
	op              Op
	typ             string
	id              *int
	status          *string
	exec_time       *int
	addexec_time    *int
	exec_memory     *int
	addexec_memory  *int
	clearedFields   map[string]struct{}
	submit          *int
	clearedsubmit   bool
	testcase        *int
	clearedtestcase bool
	done            bool
	oldValue        func(context.Context) (*TestcaseResult, error)
	predicates      []predicate.TestcaseResult
}

var _ ent.Mutation = (*TestcaseResultMutation)(nil)

// testcaseresultOption allows management of the mutation configuration using functional options.
type testcaseresultOption func(*TestcaseResultMutation)

// newTestcaseResultMutation creates new mutation for the TestcaseResult entity.
func newTestcaseResultMutation(c config, op Op, opts ...testcaseresultOption) *TestcaseResultMutation {
	m := &TestcaseResultMutation{
		config:        c,
		op:            op,
		typ:           TypeTestcaseResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestcaseResultID sets the ID field of the mutation.
func withTestcaseResultID(id int) testcaseresultOption {
	return func(m *TestcaseResultMutation) {
		var (
			err   error
			once  sync.Once
			value *TestcaseResult
		)
		m.oldValue = func(ctx context.Context) (*TestcaseResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestcaseResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestcaseResult sets the old TestcaseResult of the mutation.
func withTestcaseResult(node *TestcaseResult) testcaseresultOption {
	return func(m *TestcaseResultMutation) {
		m.oldValue = func(context.Context) (*TestcaseResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestcaseResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestcaseResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestcaseResult entities.
func (m *TestcaseResultMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestcaseResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestcaseResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestcaseResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *TestcaseResultMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *TestcaseResultMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the TestcaseResult entity.
// If the TestcaseResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseResultMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TestcaseResultMutation) ResetStatus() {
	m.status = nil
}

// SetExecTime sets the "exec_time" field.
func (m *TestcaseResultMutation) SetExecTime(i int) {
	m.exec_time = &i
	m.addexec_time = nil
}

// ExecTime returns the value of the "exec_time" field in the mutation.
func (m *TestcaseResultMutation) ExecTime() (r int, exists bool) {
	v := m.exec_time
	if v == nil {
		return
	}
	return *v, true
}

// OldExecTime returns the old "exec_time" field's value of the TestcaseResult entity.
// If the TestcaseResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseResultMutation) OldExecTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecTime: %w", err)
	}
	return oldValue.ExecTime, nil
}

// AddExecTime adds i to the "exec_time" field.
func (m *TestcaseResultMutation) AddExecTime(i int) {
	if m.addexec_time != nil {
		*m.addexec_time += i
	} else {
		m.addexec_time = &i
	}
}

// AddedExecTime returns the value that was added to the "exec_time" field in this mutation.
func (m *TestcaseResultMutation) AddedExecTime() (r int, exists bool) {
	v := m.addexec_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetExecTime resets all changes to the "exec_time" field.
func (m *TestcaseResultMutation) ResetExecTime() {
	m.exec_time = nil
	m.addexec_time = nil
}

// SetExecMemory sets the "exec_memory" field.
func (m *TestcaseResultMutation) SetExecMemory(i int) {
	m.exec_memory = &i
	m.addexec_memory = nil
}

// ExecMemory returns the value of the "exec_memory" field in the mutation.
func (m *TestcaseResultMutation) ExecMemory() (r int, exists bool) {
	v := m.exec_memory
	if v == nil {
		return
	}
	return *v, true
}

// OldExecMemory returns the old "exec_memory" field's value of the TestcaseResult entity.
// If the TestcaseResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseResultMutation) OldExecMemory(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecMemory: %w", err)
	}
	return oldValue.ExecMemory, nil
}

// AddExecMemory adds i to the "exec_memory" field.
func (m *TestcaseResultMutation) AddExecMemory(i int) {
	if m.addexec_memory != nil {
		*m.addexec_memory += i
	} else {
		m.addexec_memory = &i
	}
}

// AddedExecMemory returns the value that was added to the "exec_memory" field in this mutation.
func (m *TestcaseResultMutation) AddedExecMemory() (r int, exists bool) {
	v := m.addexec_memory
	if v == nil {
		return
	}
	return *v, true
}

// ResetExecMemory resets all changes to the "exec_memory" field.
func (m *TestcaseResultMutation) ResetExecMemory() {
	m.exec_memory = nil
	m.addexec_memory = nil
}

// SetSubmitID sets the "submit" edge to the Submit entity by id.
func (m *TestcaseResultMutation) SetSubmitID(id int) {
	m.submit = &id
}

// ClearSubmit clears the "submit" edge to the Submit entity.
func (m *TestcaseResultMutation) ClearSubmit() {
	m.clearedsubmit = true
}

// SubmitCleared reports if the "submit" edge to the Submit entity was cleared.
func (m *TestcaseResultMutation) SubmitCleared() bool {
	return m.clearedsubmit
}

// SubmitID returns the "submit" edge ID in the mutation.
func (m *TestcaseResultMutation) SubmitID() (id int, exists bool) {
	if m.submit != nil {
		return *m.submit, true
	}
	return
}

// SubmitIDs returns the "submit" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubmitID instead. It exists only for internal usage by the builders.
func (m *TestcaseResultMutation) SubmitIDs() (ids []int) {
	if id := m.submit; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubmit resets all changes to the "submit" edge.
func (m *TestcaseResultMutation) ResetSubmit() {
	m.submit = nil
	m.clearedsubmit = false
}

// SetTestcaseID sets the "testcase" edge to the Testcase entity by id.
func (m *TestcaseResultMutation) SetTestcaseID(id int) {
	m.testcase = &id
}

// ClearTestcase clears the "testcase" edge to the Testcase entity.
func (m *TestcaseResultMutation) ClearTestcase() {
	m.clearedtestcase = true
}

// TestcaseCleared reports if the "testcase" edge to the Testcase entity was cleared.
func (m *TestcaseResultMutation) TestcaseCleared() bool {
	return m.clearedtestcase
}

// TestcaseID returns the "testcase" edge ID in the mutation.
func (m *TestcaseResultMutation) TestcaseID() (id int, exists bool) {
	if m.testcase != nil {
		return *m.testcase, true
	}
	return
}

// TestcaseIDs returns the "testcase" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TestcaseID instead. It exists only for internal usage by the builders.
func (m *TestcaseResultMutation) TestcaseIDs() (ids []int) {
	if id := m.testcase; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTestcase resets all changes to the "testcase" edge.
func (m *TestcaseResultMutation) ResetTestcase() {
	m.testcase = nil
	m.clearedtestcase = false
}

// Where appends a list predicates to the TestcaseResultMutation builder.
func (m *TestcaseResultMutation) Where(ps ...predicate.TestcaseResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TestcaseResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TestcaseResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TestcaseResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TestcaseResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TestcaseResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TestcaseResult).
func (m *TestcaseResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestcaseResultMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.status != nil {
		fields = append(fields, testcaseresult.FieldStatus)
	}
	if m.exec_time != nil {
		fields = append(fields, testcaseresult.FieldExecTime)
	}
	if m.exec_memory != nil {
		fields = append(fields, testcaseresult.FieldExecMemory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestcaseResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testcaseresult.FieldStatus:
		return m.Status()
	case testcaseresult.FieldExecTime:
		return m.ExecTime()
	case testcaseresult.FieldExecMemory:
		return m.ExecMemory()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestcaseResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testcaseresult.FieldStatus:
		return m.OldStatus(ctx)
	case testcaseresult.FieldExecTime:
		return m.OldExecTime(ctx)
	case testcaseresult.FieldExecMemory:
		return m.OldExecMemory(ctx)
	}
	return nil, fmt.Errorf("unknown TestcaseResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestcaseResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testcaseresult.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case testcaseresult.FieldExecTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecTime(v)
		return nil
	case testcaseresult.FieldExecMemory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecMemory(v)
		return nil
	}
	return fmt.Errorf("unknown TestcaseResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestcaseResultMutation) AddedFields() []string {
	var fields []string
	if m.addexec_time != nil {
		fields = append(fields, testcaseresult.FieldExecTime)
	}
	if m.addexec_memory != nil {
		fields = append(fields, testcaseresult.FieldExecMemory)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestcaseResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case testcaseresult.FieldExecTime:
		return m.AddedExecTime()
	case testcaseresult.FieldExecMemory:
		return m.AddedExecMemory()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestcaseResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case testcaseresult.FieldExecTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecTime(v)
		return nil
	case testcaseresult.FieldExecMemory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecMemory(v)
		return nil
	}
	return fmt.Errorf("unknown TestcaseResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestcaseResultMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestcaseResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestcaseResultMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TestcaseResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestcaseResultMutation) ResetField(name string) error {
	switch name {
	case testcaseresult.FieldStatus:
		m.ResetStatus()
		return nil
	case testcaseresult.FieldExecTime:
		m.ResetExecTime()
		return nil
	case testcaseresult.FieldExecMemory:
		m.ResetExecMemory()
		return nil
	}
	return fmt.Errorf("unknown TestcaseResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestcaseResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.submit != nil {
		edges = append(edges, testcaseresult.EdgeSubmit)
	}
	if m.testcase != nil {
		edges = append(edges, testcaseresult.EdgeTestcase)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestcaseResultMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case testcaseresult.EdgeSubmit:
		if id := m.submit; id != nil {
			return []ent.Value{*id}
		}
	case testcaseresult.EdgeTestcase:
		if id := m.testcase; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestcaseResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestcaseResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestcaseResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsubmit {
		edges = append(edges, testcaseresult.EdgeSubmit)
	}
	if m.clearedtestcase {
		edges = append(edges, testcaseresult.EdgeTestcase)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestcaseResultMutation) EdgeCleared(name string) bool {
	switch name {
	case testcaseresult.EdgeSubmit:
		return m.clearedsubmit
	case testcaseresult.EdgeTestcase:
		return m.clearedtestcase
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestcaseResultMutation) ClearEdge(name string) error {
	switch name {
	case testcaseresult.EdgeSubmit:
		m.ClearSubmit()
		return nil
	case testcaseresult.EdgeTestcase:
		m.ClearTestcase()
		return nil
	}
	return fmt.Errorf("unknown TestcaseResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestcaseResultMutation) ResetEdge(name string) error {
	switch name {
	case testcaseresult.EdgeSubmit:
		m.ResetSubmit()
		return nil
	case testcaseresult.EdgeTestcase:
		m.ResetTestcase()
		return nil
	}
	return fmt.Errorf("unknown TestcaseResult edge %s", name)
}

// TestcaseSetMutation represents an operation that mutates the TestcaseSet nodes in the graph.
type TestcaseSetMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	score            *int
	addscore         *int
	is_sample        *bool
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	task             *int
	clearedtask      bool
	testcases        map[int]struct{}
	removedtestcases map[int]struct{}
	clearedtestcases bool
	done             bool
	oldValue         func(context.Context) (*TestcaseSet, error)
	predicates       []predicate.TestcaseSet
}

var _ ent.Mutation = (*TestcaseSetMutation)(nil)

// testcasesetOption allows management of the mutation configuration using functional options.
type testcasesetOption func(*TestcaseSetMutation)

// newTestcaseSetMutation creates new mutation for the TestcaseSet entity.
func newTestcaseSetMutation(c config, op Op, opts ...testcasesetOption) *TestcaseSetMutation {
	m := &TestcaseSetMutation{
		config:        c,
		op:            op,
		typ:           TypeTestcaseSet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestcaseSetID sets the ID field of the mutation.
func withTestcaseSetID(id int) testcasesetOption {
	return func(m *TestcaseSetMutation) {
		var (
			err   error
			once  sync.Once
			value *TestcaseSet
		)
		m.oldValue = func(ctx context.Context) (*TestcaseSet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestcaseSet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestcaseSet sets the old TestcaseSet of the mutation.
func withTestcaseSet(node *TestcaseSet) testcasesetOption {
	return func(m *TestcaseSetMutation) {
		m.oldValue = func(context.Context) (*TestcaseSet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestcaseSetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestcaseSetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestcaseSet entities.
func (m *TestcaseSetMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestcaseSetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestcaseSetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestcaseSet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TestcaseSetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TestcaseSetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TestcaseSet entity.
// If the TestcaseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseSetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TestcaseSetMutation) ResetName() {
	m.name = nil
}

// SetScore sets the "score" field.
func (m *TestcaseSetMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *TestcaseSetMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the TestcaseSet entity.
// If the TestcaseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseSetMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *TestcaseSetMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *TestcaseSetMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *TestcaseSetMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetIsSample sets the "is_sample" field.
func (m *TestcaseSetMutation) SetIsSample(b bool) {
	m.is_sample = &b
}

// IsSample returns the value of the "is_sample" field in the mutation.
func (m *TestcaseSetMutation) IsSample() (r bool, exists bool) {
	v := m.is_sample
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSample returns the old "is_sample" field's value of the TestcaseSet entity.
// If the TestcaseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseSetMutation) OldIsSample(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSample is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSample requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSample: %w", err)
	}
	return oldValue.IsSample, nil
}

// ResetIsSample resets all changes to the "is_sample" field.
func (m *TestcaseSetMutation) ResetIsSample() {
	m.is_sample = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TestcaseSetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestcaseSetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TestcaseSet entity.
// If the TestcaseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseSetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestcaseSetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestcaseSetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestcaseSetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TestcaseSet entity.
// If the TestcaseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestcaseSetMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TestcaseSetMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[testcaseset.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TestcaseSetMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[testcaseset.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestcaseSetMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, testcaseset.FieldUpdatedAt)
}

// SetTaskID sets the "task" edge to the Task entity by id.
func (m *TestcaseSetMutation) SetTaskID(id int) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Task entity.
func (m *TestcaseSetMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *TestcaseSetMutation) TaskCleared() bool {
	return m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *TestcaseSetMutation) TaskID() (id int, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *TestcaseSetMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *TestcaseSetMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// AddTestcaseIDs adds the "testcases" edge to the Testcase entity by ids.
func (m *TestcaseSetMutation) AddTestcaseIDs(ids ...int) {
	if m.testcases == nil {
		m.testcases = make(map[int]struct{})
	}
	for i := range ids {
		m.testcases[ids[i]] = struct{}{}
	}
}

// ClearTestcases clears the "testcases" edge to the Testcase entity.
func (m *TestcaseSetMutation) ClearTestcases() {
	m.clearedtestcases = true
}

// TestcasesCleared reports if the "testcases" edge to the Testcase entity was cleared.
func (m *TestcaseSetMutation) TestcasesCleared() bool {
	return m.clearedtestcases
}

// RemoveTestcaseIDs removes the "testcases" edge to the Testcase entity by IDs.
func (m *TestcaseSetMutation) RemoveTestcaseIDs(ids ...int) {
	if m.removedtestcases == nil {
		m.removedtestcases = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.testcases, ids[i])
		m.removedtestcases[ids[i]] = struct{}{}
	}
}

// RemovedTestcases returns the removed IDs of the "testcases" edge to the Testcase entity.
func (m *TestcaseSetMutation) RemovedTestcasesIDs() (ids []int) {
	for id := range m.removedtestcases {
		ids = append(ids, id)
	}
	return
}

// TestcasesIDs returns the "testcases" edge IDs in the mutation.
func (m *TestcaseSetMutation) TestcasesIDs() (ids []int) {
	for id := range m.testcases {
		ids = append(ids, id)
	}
	return
}

// ResetTestcases resets all changes to the "testcases" edge.
func (m *TestcaseSetMutation) ResetTestcases() {
	m.testcases = nil
	m.clearedtestcases = false
	m.removedtestcases = nil
}

// Where appends a list predicates to the TestcaseSetMutation builder.
func (m *TestcaseSetMutation) Where(ps ...predicate.TestcaseSet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TestcaseSetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TestcaseSetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TestcaseSet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TestcaseSetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TestcaseSetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TestcaseSet).
func (m *TestcaseSetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestcaseSetMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, testcaseset.FieldName)
	}
	if m.score != nil {
		fields = append(fields, testcaseset.FieldScore)
	}
	if m.is_sample != nil {
		fields = append(fields, testcaseset.FieldIsSample)
	}
	if m.created_at != nil {
		fields = append(fields, testcaseset.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testcaseset.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestcaseSetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testcaseset.FieldName:
		return m.Name()
	case testcaseset.FieldScore:
		return m.Score()
	case testcaseset.FieldIsSample:
		return m.IsSample()
	case testcaseset.FieldCreatedAt:
		return m.CreatedAt()
	case testcaseset.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestcaseSetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testcaseset.FieldName:
		return m.OldName(ctx)
	case testcaseset.FieldScore:
		return m.OldScore(ctx)
	case testcaseset.FieldIsSample:
		return m.OldIsSample(ctx)
	case testcaseset.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testcaseset.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TestcaseSet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestcaseSetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testcaseset.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case testcaseset.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case testcaseset.FieldIsSample:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSample(v)
		return nil
	case testcaseset.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testcaseset.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TestcaseSet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestcaseSetMutation) AddedFields() []string {
	var fields []string
	if m.addscore != nil {
		fields = append(fields, testcaseset.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestcaseSetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case testcaseset.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestcaseSetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case testcaseset.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown TestcaseSet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestcaseSetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testcaseset.FieldUpdatedAt) {
		fields = append(fields, testcaseset.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestcaseSetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestcaseSetMutation) ClearField(name string) error {
	switch name {
	case testcaseset.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TestcaseSet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestcaseSetMutation) ResetField(name string) error {
	switch name {
	case testcaseset.FieldName:
		m.ResetName()
		return nil
	case testcaseset.FieldScore:
		m.ResetScore()
		return nil
	case testcaseset.FieldIsSample:
		m.ResetIsSample()
		return nil
	case testcaseset.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testcaseset.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TestcaseSet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestcaseSetMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.task != nil {
		edges = append(edges, testcaseset.EdgeTask)
	}
	if m.testcases != nil {
		edges = append(edges, testcaseset.EdgeTestcases)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestcaseSetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case testcaseset.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	case testcaseset.EdgeTestcases:
		ids := make([]ent.Value, 0, len(m.testcases))
		for id := range m.testcases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestcaseSetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtestcases != nil {
		edges = append(edges, testcaseset.EdgeTestcases)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestcaseSetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case testcaseset.EdgeTestcases:
		ids := make([]ent.Value, 0, len(m.removedtestcases))
		for id := range m.removedtestcases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestcaseSetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtask {
		edges = append(edges, testcaseset.EdgeTask)
	}
	if m.clearedtestcases {
		edges = append(edges, testcaseset.EdgeTestcases)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestcaseSetMutation) EdgeCleared(name string) bool {
	switch name {
	case testcaseset.EdgeTask:
		return m.clearedtask
	case testcaseset.EdgeTestcases:
		return m.clearedtestcases
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestcaseSetMutation) ClearEdge(name string) error {
	switch name {
	case testcaseset.EdgeTask:
		m.ClearTask()
		return nil
	}
	return fmt.Errorf("unknown TestcaseSet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestcaseSetMutation) ResetEdge(name string) error {
	switch name {
	case testcaseset.EdgeTask:
		m.ResetTask()
		return nil
	case testcaseset.EdgeTestcases:
		m.ResetTestcases()
		return nil
	}
	return fmt.Errorf("unknown TestcaseSet edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	role               *string
	encrypted_password *string
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	tasks              map[int]struct{}
	removedtasks       map[int]struct{}
	clearedtasks       bool
	submits            map[int]struct{}
	removedsubmits     map[int]struct{}
	clearedsubmits     bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetEncryptedPassword sets the "encrypted_password" field.
func (m *UserMutation) SetEncryptedPassword(s string) {
	m.encrypted_password = &s
}

// EncryptedPassword returns the value of the "encrypted_password" field in the mutation.
func (m *UserMutation) EncryptedPassword() (r string, exists bool) {
	v := m.encrypted_password
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedPassword returns the old "encrypted_password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEncryptedPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedPassword: %w", err)
	}
	return oldValue.EncryptedPassword, nil
}

// ResetEncryptedPassword resets all changes to the "encrypted_password" field.
func (m *UserMutation) ResetEncryptedPassword() {
	m.encrypted_password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[user.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, user.FieldUpdatedAt)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *UserMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *UserMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *UserMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *UserMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *UserMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *UserMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *UserMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// AddSubmitIDs adds the "submits" edge to the Submit entity by ids.
func (m *UserMutation) AddSubmitIDs(ids ...int) {
	if m.submits == nil {
		m.submits = make(map[int]struct{})
	}
	for i := range ids {
		m.submits[ids[i]] = struct{}{}
	}
}

// ClearSubmits clears the "submits" edge to the Submit entity.
func (m *UserMutation) ClearSubmits() {
	m.clearedsubmits = true
}

// SubmitsCleared reports if the "submits" edge to the Submit entity was cleared.
func (m *UserMutation) SubmitsCleared() bool {
	return m.clearedsubmits
}

// RemoveSubmitIDs removes the "submits" edge to the Submit entity by IDs.
func (m *UserMutation) RemoveSubmitIDs(ids ...int) {
	if m.removedsubmits == nil {
		m.removedsubmits = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.submits, ids[i])
		m.removedsubmits[ids[i]] = struct{}{}
	}
}

// RemovedSubmits returns the removed IDs of the "submits" edge to the Submit entity.
func (m *UserMutation) RemovedSubmitsIDs() (ids []int) {
	for id := range m.removedsubmits {
		ids = append(ids, id)
	}
	return
}

// SubmitsIDs returns the "submits" edge IDs in the mutation.
func (m *UserMutation) SubmitsIDs() (ids []int) {
	for id := range m.submits {
		ids = append(ids, id)
	}
	return
}

// ResetSubmits resets all changes to the "submits" edge.
func (m *UserMutation) ResetSubmits() {
	m.submits = nil
	m.clearedsubmits = false
	m.removedsubmits = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.encrypted_password != nil {
		fields = append(fields, user.FieldEncryptedPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldRole:
		return m.Role()
	case user.FieldEncryptedPassword:
		return m.EncryptedPassword()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldEncryptedPassword:
		return m.OldEncryptedPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldEncryptedPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUpdatedAt) {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldEncryptedPassword:
		m.ResetEncryptedPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tasks != nil {
		edges = append(edges, user.EdgeTasks)
	}
	if m.submits != nil {
		edges = append(edges, user.EdgeSubmits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.submits))
		for id := range m.submits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtasks != nil {
		edges = append(edges, user.EdgeTasks)
	}
	if m.removedsubmits != nil {
		edges = append(edges, user.EdgeSubmits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.removedsubmits))
		for id := range m.removedsubmits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtasks {
		edges = append(edges, user.EdgeTasks)
	}
	if m.clearedsubmits {
		edges = append(edges, user.EdgeSubmits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTasks:
		return m.clearedtasks
	case user.EdgeSubmits:
		return m.clearedsubmits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTasks:
		m.ResetTasks()
		return nil
	case user.EdgeSubmits:
		m.ResetSubmits()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
