// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcase"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseset"
)

// TestcaseUpdate is the builder for updating Testcase entities.
type TestcaseUpdate struct {
	config
	hooks    []Hook
	mutation *TestcaseMutation
}

// Where appends a list predicates to the TestcaseUpdate builder.
func (tu *TestcaseUpdate) Where(ps ...predicate.Testcase) *TestcaseUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TestcaseUpdate) SetName(s string) *TestcaseUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TestcaseUpdate) SetDescription(s string) *TestcaseUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TestcaseUpdate) SetNillableDescription(s *string) *TestcaseUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TestcaseUpdate) ClearDescription() *TestcaseUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TestcaseUpdate) SetCreatedAt(t time.Time) *TestcaseUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TestcaseUpdate) SetUpdatedAt(t time.Time) *TestcaseUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TestcaseUpdate) SetNillableUpdatedAt(t *time.Time) *TestcaseUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TestcaseUpdate) ClearUpdatedAt() *TestcaseUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// AddTestcaseSetIDs adds the "testcase_sets" edge to the TestcaseSet entity by IDs.
func (tu *TestcaseUpdate) AddTestcaseSetIDs(ids ...int) *TestcaseUpdate {
	tu.mutation.AddTestcaseSetIDs(ids...)
	return tu
}

// AddTestcaseSets adds the "testcase_sets" edges to the TestcaseSet entity.
func (tu *TestcaseUpdate) AddTestcaseSets(t ...*TestcaseSet) *TestcaseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTestcaseSetIDs(ids...)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (tu *TestcaseUpdate) SetTaskID(id int) *TestcaseUpdate {
	tu.mutation.SetTaskID(id)
	return tu
}

// SetTask sets the "task" edge to the Task entity.
func (tu *TestcaseUpdate) SetTask(t *Task) *TestcaseUpdate {
	return tu.SetTaskID(t.ID)
}

// Mutation returns the TestcaseMutation object of the builder.
func (tu *TestcaseUpdate) Mutation() *TestcaseMutation {
	return tu.mutation
}

// ClearTestcaseSets clears all "testcase_sets" edges to the TestcaseSet entity.
func (tu *TestcaseUpdate) ClearTestcaseSets() *TestcaseUpdate {
	tu.mutation.ClearTestcaseSets()
	return tu
}

// RemoveTestcaseSetIDs removes the "testcase_sets" edge to TestcaseSet entities by IDs.
func (tu *TestcaseUpdate) RemoveTestcaseSetIDs(ids ...int) *TestcaseUpdate {
	tu.mutation.RemoveTestcaseSetIDs(ids...)
	return tu
}

// RemoveTestcaseSets removes "testcase_sets" edges to TestcaseSet entities.
func (tu *TestcaseUpdate) RemoveTestcaseSets(t ...*TestcaseSet) *TestcaseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTestcaseSetIDs(ids...)
}

// ClearTask clears the "task" edge to the Task entity.
func (tu *TestcaseUpdate) ClearTask() *TestcaseUpdate {
	tu.mutation.ClearTask()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TestcaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TestcaseUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TestcaseUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TestcaseUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TestcaseUpdate) check() error {
	if _, ok := tu.mutation.TaskID(); tu.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Testcase.task"`)
	}
	return nil
}

func (tu *TestcaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcase.Table, testcase.Columns, sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(testcase.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(testcase.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(testcase.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(testcase.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(testcase.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(testcase.FieldUpdatedAt, field.TypeTime)
	}
	if tu.mutation.TestcaseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   testcase.TestcaseSetsTable,
			Columns: testcase.TestcaseSetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTestcaseSetsIDs(); len(nodes) > 0 && !tu.mutation.TestcaseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   testcase.TestcaseSetsTable,
			Columns: testcase.TestcaseSetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TestcaseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   testcase.TestcaseSetsTable,
			Columns: testcase.TestcaseSetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase.TaskTable,
			Columns: []string{testcase.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase.TaskTable,
			Columns: []string{testcase.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TestcaseUpdateOne is the builder for updating a single Testcase entity.
type TestcaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestcaseMutation
}

// SetName sets the "name" field.
func (tuo *TestcaseUpdateOne) SetName(s string) *TestcaseUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TestcaseUpdateOne) SetDescription(s string) *TestcaseUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TestcaseUpdateOne) SetNillableDescription(s *string) *TestcaseUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TestcaseUpdateOne) ClearDescription() *TestcaseUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TestcaseUpdateOne) SetCreatedAt(t time.Time) *TestcaseUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TestcaseUpdateOne) SetUpdatedAt(t time.Time) *TestcaseUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TestcaseUpdateOne) SetNillableUpdatedAt(t *time.Time) *TestcaseUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TestcaseUpdateOne) ClearUpdatedAt() *TestcaseUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// AddTestcaseSetIDs adds the "testcase_sets" edge to the TestcaseSet entity by IDs.
func (tuo *TestcaseUpdateOne) AddTestcaseSetIDs(ids ...int) *TestcaseUpdateOne {
	tuo.mutation.AddTestcaseSetIDs(ids...)
	return tuo
}

// AddTestcaseSets adds the "testcase_sets" edges to the TestcaseSet entity.
func (tuo *TestcaseUpdateOne) AddTestcaseSets(t ...*TestcaseSet) *TestcaseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTestcaseSetIDs(ids...)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (tuo *TestcaseUpdateOne) SetTaskID(id int) *TestcaseUpdateOne {
	tuo.mutation.SetTaskID(id)
	return tuo
}

// SetTask sets the "task" edge to the Task entity.
func (tuo *TestcaseUpdateOne) SetTask(t *Task) *TestcaseUpdateOne {
	return tuo.SetTaskID(t.ID)
}

// Mutation returns the TestcaseMutation object of the builder.
func (tuo *TestcaseUpdateOne) Mutation() *TestcaseMutation {
	return tuo.mutation
}

// ClearTestcaseSets clears all "testcase_sets" edges to the TestcaseSet entity.
func (tuo *TestcaseUpdateOne) ClearTestcaseSets() *TestcaseUpdateOne {
	tuo.mutation.ClearTestcaseSets()
	return tuo
}

// RemoveTestcaseSetIDs removes the "testcase_sets" edge to TestcaseSet entities by IDs.
func (tuo *TestcaseUpdateOne) RemoveTestcaseSetIDs(ids ...int) *TestcaseUpdateOne {
	tuo.mutation.RemoveTestcaseSetIDs(ids...)
	return tuo
}

// RemoveTestcaseSets removes "testcase_sets" edges to TestcaseSet entities.
func (tuo *TestcaseUpdateOne) RemoveTestcaseSets(t ...*TestcaseSet) *TestcaseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTestcaseSetIDs(ids...)
}

// ClearTask clears the "task" edge to the Task entity.
func (tuo *TestcaseUpdateOne) ClearTask() *TestcaseUpdateOne {
	tuo.mutation.ClearTask()
	return tuo
}

// Where appends a list predicates to the TestcaseUpdate builder.
func (tuo *TestcaseUpdateOne) Where(ps ...predicate.Testcase) *TestcaseUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TestcaseUpdateOne) Select(field string, fields ...string) *TestcaseUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Testcase entity.
func (tuo *TestcaseUpdateOne) Save(ctx context.Context) (*Testcase, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TestcaseUpdateOne) SaveX(ctx context.Context) *Testcase {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TestcaseUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TestcaseUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TestcaseUpdateOne) check() error {
	if _, ok := tuo.mutation.TaskID(); tuo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Testcase.task"`)
	}
	return nil
}

func (tuo *TestcaseUpdateOne) sqlSave(ctx context.Context) (_node *Testcase, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcase.Table, testcase.Columns, sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Testcase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcase.FieldID)
		for _, f := range fields {
			if !testcase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testcase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(testcase.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(testcase.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(testcase.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(testcase.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testcase.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(testcase.FieldUpdatedAt, field.TypeTime)
	}
	if tuo.mutation.TestcaseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   testcase.TestcaseSetsTable,
			Columns: testcase.TestcaseSetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTestcaseSetsIDs(); len(nodes) > 0 && !tuo.mutation.TestcaseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   testcase.TestcaseSetsTable,
			Columns: testcase.TestcaseSetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TestcaseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   testcase.TestcaseSetsTable,
			Columns: testcase.TestcaseSetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase.TaskTable,
			Columns: []string{testcase.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase.TaskTable,
			Columns: []string{testcase.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Testcase{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
