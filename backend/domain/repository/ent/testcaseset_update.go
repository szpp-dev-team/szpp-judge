// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcase"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseset"
)

// TestcaseSetUpdate is the builder for updating TestcaseSet entities.
type TestcaseSetUpdate struct {
	config
	hooks    []Hook
	mutation *TestcaseSetMutation
}

// Where appends a list predicates to the TestcaseSetUpdate builder.
func (tsu *TestcaseSetUpdate) Where(ps ...predicate.TestcaseSet) *TestcaseSetUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetName sets the "name" field.
func (tsu *TestcaseSetUpdate) SetName(s string) *TestcaseSetUpdate {
	tsu.mutation.SetName(s)
	return tsu
}

// SetScore sets the "score" field.
func (tsu *TestcaseSetUpdate) SetScore(i int) *TestcaseSetUpdate {
	tsu.mutation.ResetScore()
	tsu.mutation.SetScore(i)
	return tsu
}

// AddScore adds i to the "score" field.
func (tsu *TestcaseSetUpdate) AddScore(i int) *TestcaseSetUpdate {
	tsu.mutation.AddScore(i)
	return tsu
}

// SetIsSample sets the "is_sample" field.
func (tsu *TestcaseSetUpdate) SetIsSample(b bool) *TestcaseSetUpdate {
	tsu.mutation.SetIsSample(b)
	return tsu
}

// SetCreatedAt sets the "created_at" field.
func (tsu *TestcaseSetUpdate) SetCreatedAt(t time.Time) *TestcaseSetUpdate {
	tsu.mutation.SetCreatedAt(t)
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TestcaseSetUpdate) SetUpdatedAt(t time.Time) *TestcaseSetUpdate {
	tsu.mutation.SetUpdatedAt(t)
	return tsu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsu *TestcaseSetUpdate) SetNillableUpdatedAt(t *time.Time) *TestcaseSetUpdate {
	if t != nil {
		tsu.SetUpdatedAt(*t)
	}
	return tsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tsu *TestcaseSetUpdate) ClearUpdatedAt() *TestcaseSetUpdate {
	tsu.mutation.ClearUpdatedAt()
	return tsu
}

// SetTasksID sets the "tasks" edge to the Task entity by ID.
func (tsu *TestcaseSetUpdate) SetTasksID(id int) *TestcaseSetUpdate {
	tsu.mutation.SetTasksID(id)
	return tsu
}

// SetNillableTasksID sets the "tasks" edge to the Task entity by ID if the given value is not nil.
func (tsu *TestcaseSetUpdate) SetNillableTasksID(id *int) *TestcaseSetUpdate {
	if id != nil {
		tsu = tsu.SetTasksID(*id)
	}
	return tsu
}

// SetTasks sets the "tasks" edge to the Task entity.
func (tsu *TestcaseSetUpdate) SetTasks(t *Task) *TestcaseSetUpdate {
	return tsu.SetTasksID(t.ID)
}

// AddTestcaseIDs adds the "testcases" edge to the Testcase entity by IDs.
func (tsu *TestcaseSetUpdate) AddTestcaseIDs(ids ...int) *TestcaseSetUpdate {
	tsu.mutation.AddTestcaseIDs(ids...)
	return tsu
}

// AddTestcases adds the "testcases" edges to the Testcase entity.
func (tsu *TestcaseSetUpdate) AddTestcases(t ...*Testcase) *TestcaseSetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.AddTestcaseIDs(ids...)
}

// Mutation returns the TestcaseSetMutation object of the builder.
func (tsu *TestcaseSetUpdate) Mutation() *TestcaseSetMutation {
	return tsu.mutation
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (tsu *TestcaseSetUpdate) ClearTasks() *TestcaseSetUpdate {
	tsu.mutation.ClearTasks()
	return tsu
}

// ClearTestcases clears all "testcases" edges to the Testcase entity.
func (tsu *TestcaseSetUpdate) ClearTestcases() *TestcaseSetUpdate {
	tsu.mutation.ClearTestcases()
	return tsu
}

// RemoveTestcaseIDs removes the "testcases" edge to Testcase entities by IDs.
func (tsu *TestcaseSetUpdate) RemoveTestcaseIDs(ids ...int) *TestcaseSetUpdate {
	tsu.mutation.RemoveTestcaseIDs(ids...)
	return tsu
}

// RemoveTestcases removes "testcases" edges to Testcase entities.
func (tsu *TestcaseSetUpdate) RemoveTestcases(t ...*Testcase) *TestcaseSetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.RemoveTestcaseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TestcaseSetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TestcaseSetUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TestcaseSetUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TestcaseSetUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tsu *TestcaseSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(testcaseset.Table, testcaseset.Columns, sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.Name(); ok {
		_spec.SetField(testcaseset.FieldName, field.TypeString, value)
	}
	if value, ok := tsu.mutation.Score(); ok {
		_spec.SetField(testcaseset.FieldScore, field.TypeInt, value)
	}
	if value, ok := tsu.mutation.AddedScore(); ok {
		_spec.AddField(testcaseset.FieldScore, field.TypeInt, value)
	}
	if value, ok := tsu.mutation.IsSample(); ok {
		_spec.SetField(testcaseset.FieldIsSample, field.TypeBool, value)
	}
	if value, ok := tsu.mutation.CreatedAt(); ok {
		_spec.SetField(testcaseset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.SetField(testcaseset.FieldUpdatedAt, field.TypeTime, value)
	}
	if tsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(testcaseset.FieldUpdatedAt, field.TypeTime)
	}
	if tsu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseset.TasksTable,
			Columns: []string{testcaseset.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseset.TasksTable,
			Columns: []string{testcaseset.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.TestcasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   testcaseset.TestcasesTable,
			Columns: testcaseset.TestcasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedTestcasesIDs(); len(nodes) > 0 && !tsu.mutation.TestcasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   testcaseset.TestcasesTable,
			Columns: testcaseset.TestcasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.TestcasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   testcaseset.TestcasesTable,
			Columns: testcaseset.TestcasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcaseset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TestcaseSetUpdateOne is the builder for updating a single TestcaseSet entity.
type TestcaseSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestcaseSetMutation
}

// SetName sets the "name" field.
func (tsuo *TestcaseSetUpdateOne) SetName(s string) *TestcaseSetUpdateOne {
	tsuo.mutation.SetName(s)
	return tsuo
}

// SetScore sets the "score" field.
func (tsuo *TestcaseSetUpdateOne) SetScore(i int) *TestcaseSetUpdateOne {
	tsuo.mutation.ResetScore()
	tsuo.mutation.SetScore(i)
	return tsuo
}

// AddScore adds i to the "score" field.
func (tsuo *TestcaseSetUpdateOne) AddScore(i int) *TestcaseSetUpdateOne {
	tsuo.mutation.AddScore(i)
	return tsuo
}

// SetIsSample sets the "is_sample" field.
func (tsuo *TestcaseSetUpdateOne) SetIsSample(b bool) *TestcaseSetUpdateOne {
	tsuo.mutation.SetIsSample(b)
	return tsuo
}

// SetCreatedAt sets the "created_at" field.
func (tsuo *TestcaseSetUpdateOne) SetCreatedAt(t time.Time) *TestcaseSetUpdateOne {
	tsuo.mutation.SetCreatedAt(t)
	return tsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TestcaseSetUpdateOne) SetUpdatedAt(t time.Time) *TestcaseSetUpdateOne {
	tsuo.mutation.SetUpdatedAt(t)
	return tsuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsuo *TestcaseSetUpdateOne) SetNillableUpdatedAt(t *time.Time) *TestcaseSetUpdateOne {
	if t != nil {
		tsuo.SetUpdatedAt(*t)
	}
	return tsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tsuo *TestcaseSetUpdateOne) ClearUpdatedAt() *TestcaseSetUpdateOne {
	tsuo.mutation.ClearUpdatedAt()
	return tsuo
}

// SetTasksID sets the "tasks" edge to the Task entity by ID.
func (tsuo *TestcaseSetUpdateOne) SetTasksID(id int) *TestcaseSetUpdateOne {
	tsuo.mutation.SetTasksID(id)
	return tsuo
}

// SetNillableTasksID sets the "tasks" edge to the Task entity by ID if the given value is not nil.
func (tsuo *TestcaseSetUpdateOne) SetNillableTasksID(id *int) *TestcaseSetUpdateOne {
	if id != nil {
		tsuo = tsuo.SetTasksID(*id)
	}
	return tsuo
}

// SetTasks sets the "tasks" edge to the Task entity.
func (tsuo *TestcaseSetUpdateOne) SetTasks(t *Task) *TestcaseSetUpdateOne {
	return tsuo.SetTasksID(t.ID)
}

// AddTestcaseIDs adds the "testcases" edge to the Testcase entity by IDs.
func (tsuo *TestcaseSetUpdateOne) AddTestcaseIDs(ids ...int) *TestcaseSetUpdateOne {
	tsuo.mutation.AddTestcaseIDs(ids...)
	return tsuo
}

// AddTestcases adds the "testcases" edges to the Testcase entity.
func (tsuo *TestcaseSetUpdateOne) AddTestcases(t ...*Testcase) *TestcaseSetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.AddTestcaseIDs(ids...)
}

// Mutation returns the TestcaseSetMutation object of the builder.
func (tsuo *TestcaseSetUpdateOne) Mutation() *TestcaseSetMutation {
	return tsuo.mutation
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (tsuo *TestcaseSetUpdateOne) ClearTasks() *TestcaseSetUpdateOne {
	tsuo.mutation.ClearTasks()
	return tsuo
}

// ClearTestcases clears all "testcases" edges to the Testcase entity.
func (tsuo *TestcaseSetUpdateOne) ClearTestcases() *TestcaseSetUpdateOne {
	tsuo.mutation.ClearTestcases()
	return tsuo
}

// RemoveTestcaseIDs removes the "testcases" edge to Testcase entities by IDs.
func (tsuo *TestcaseSetUpdateOne) RemoveTestcaseIDs(ids ...int) *TestcaseSetUpdateOne {
	tsuo.mutation.RemoveTestcaseIDs(ids...)
	return tsuo
}

// RemoveTestcases removes "testcases" edges to Testcase entities.
func (tsuo *TestcaseSetUpdateOne) RemoveTestcases(t ...*Testcase) *TestcaseSetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.RemoveTestcaseIDs(ids...)
}

// Where appends a list predicates to the TestcaseSetUpdate builder.
func (tsuo *TestcaseSetUpdateOne) Where(ps ...predicate.TestcaseSet) *TestcaseSetUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TestcaseSetUpdateOne) Select(field string, fields ...string) *TestcaseSetUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TestcaseSet entity.
func (tsuo *TestcaseSetUpdateOne) Save(ctx context.Context) (*TestcaseSet, error) {
	return withHooks(ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TestcaseSetUpdateOne) SaveX(ctx context.Context) *TestcaseSet {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TestcaseSetUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TestcaseSetUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tsuo *TestcaseSetUpdateOne) sqlSave(ctx context.Context) (_node *TestcaseSet, err error) {
	_spec := sqlgraph.NewUpdateSpec(testcaseset.Table, testcaseset.Columns, sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestcaseSet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcaseset.FieldID)
		for _, f := range fields {
			if !testcaseset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testcaseset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.Name(); ok {
		_spec.SetField(testcaseset.FieldName, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.Score(); ok {
		_spec.SetField(testcaseset.FieldScore, field.TypeInt, value)
	}
	if value, ok := tsuo.mutation.AddedScore(); ok {
		_spec.AddField(testcaseset.FieldScore, field.TypeInt, value)
	}
	if value, ok := tsuo.mutation.IsSample(); ok {
		_spec.SetField(testcaseset.FieldIsSample, field.TypeBool, value)
	}
	if value, ok := tsuo.mutation.CreatedAt(); ok {
		_spec.SetField(testcaseset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testcaseset.FieldUpdatedAt, field.TypeTime, value)
	}
	if tsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(testcaseset.FieldUpdatedAt, field.TypeTime)
	}
	if tsuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseset.TasksTable,
			Columns: []string{testcaseset.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseset.TasksTable,
			Columns: []string{testcaseset.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.TestcasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   testcaseset.TestcasesTable,
			Columns: testcaseset.TestcasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedTestcasesIDs(); len(nodes) > 0 && !tsuo.mutation.TestcasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   testcaseset.TestcasesTable,
			Columns: testcaseset.TestcasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.TestcasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   testcaseset.TestcasesTable,
			Columns: testcaseset.TestcasesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestcaseSet{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcaseset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
