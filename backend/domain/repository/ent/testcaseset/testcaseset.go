// Code generated by ent, DO NOT EDIT.

package testcaseset

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the testcaseset type in the database.
	Label = "testcase_set"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldIsSample holds the string denoting the is_sample field in the database.
	FieldIsSample = "is_sample"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeTestcases holds the string denoting the testcases edge name in mutations.
	EdgeTestcases = "testcases"
	// Table holds the table name of the testcaseset in the database.
	Table = "testcase_sets"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "testcase_sets"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "task_testcase_sets"
	// TestcasesTable is the table that holds the testcases relation/edge. The primary key declared below.
	TestcasesTable = "testcase_set_testcases"
	// TestcasesInverseTable is the table name for the Testcase entity.
	// It exists in this package in order to avoid circular dependency with the "testcase" package.
	TestcasesInverseTable = "testcases"
)

// Columns holds all SQL columns for testcaseset fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldScore,
	FieldIsSample,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "testcase_sets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_testcase_sets",
}

var (
	// TestcasesPrimaryKey and TestcasesColumn2 are the table columns denoting the
	// primary key for the testcases relation (M2M).
	TestcasesPrimaryKey = []string{"testcase_set_id", "testcase_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TestcaseSet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByIsSample orders the results by the is_sample field.
func ByIsSample(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSample, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTasksField orders the results by tasks field.
func ByTasksField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestcasesCount orders the results by testcases count.
func ByTestcasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestcasesStep(), opts...)
	}
}

// ByTestcases orders the results by testcases terms.
func ByTestcases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestcasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TasksTable, TasksColumn),
	)
}
func newTestcasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestcasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TestcasesTable, TestcasesPrimaryKey...),
	)
}
