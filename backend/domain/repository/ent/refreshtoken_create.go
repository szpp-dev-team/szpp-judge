// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/refreshtoken"
)

// RefreshTokenCreate is the builder for creating a RefreshToken entity.
type RefreshTokenCreate struct {
	config
	mutation *RefreshTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetToken sets the "token" field.
func (rtc *RefreshTokenCreate) SetToken(s string) *RefreshTokenCreate {
	rtc.mutation.SetToken(s)
	return rtc
}

// SetExpiresAt sets the "expires_at" field.
func (rtc *RefreshTokenCreate) SetExpiresAt(t time.Time) *RefreshTokenCreate {
	rtc.mutation.SetExpiresAt(t)
	return rtc
}

// SetIsDead sets the "is_dead" field.
func (rtc *RefreshTokenCreate) SetIsDead(b bool) *RefreshTokenCreate {
	rtc.mutation.SetIsDead(b)
	return rtc
}

// Mutation returns the RefreshTokenMutation object of the builder.
func (rtc *RefreshTokenCreate) Mutation() *RefreshTokenMutation {
	return rtc.mutation
}

// Save creates the RefreshToken in the database.
func (rtc *RefreshTokenCreate) Save(ctx context.Context) (*RefreshToken, error) {
	return withHooks(ctx, rtc.sqlSave, rtc.mutation, rtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RefreshTokenCreate) SaveX(ctx context.Context) *RefreshToken {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *RefreshTokenCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *RefreshTokenCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RefreshTokenCreate) check() error {
	if _, ok := rtc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "RefreshToken.token"`)}
	}
	if _, ok := rtc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "RefreshToken.expires_at"`)}
	}
	if _, ok := rtc.mutation.IsDead(); !ok {
		return &ValidationError{Name: "is_dead", err: errors.New(`ent: missing required field "RefreshToken.is_dead"`)}
	}
	return nil
}

func (rtc *RefreshTokenCreate) sqlSave(ctx context.Context) (*RefreshToken, error) {
	if err := rtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rtc.mutation.id = &_node.ID
	rtc.mutation.done = true
	return _node, nil
}

func (rtc *RefreshTokenCreate) createSpec() (*RefreshToken, *sqlgraph.CreateSpec) {
	var (
		_node = &RefreshToken{config: rtc.config}
		_spec = sqlgraph.NewCreateSpec(refreshtoken.Table, sqlgraph.NewFieldSpec(refreshtoken.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rtc.conflict
	if value, ok := rtc.mutation.Token(); ok {
		_spec.SetField(refreshtoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := rtc.mutation.ExpiresAt(); ok {
		_spec.SetField(refreshtoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := rtc.mutation.IsDead(); ok {
		_spec.SetField(refreshtoken.FieldIsDead, field.TypeBool, value)
		_node.IsDead = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RefreshToken.Create().
//		SetToken(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RefreshTokenUpsert) {
//			SetToken(v+v).
//		}).
//		Exec(ctx)
func (rtc *RefreshTokenCreate) OnConflict(opts ...sql.ConflictOption) *RefreshTokenUpsertOne {
	rtc.conflict = opts
	return &RefreshTokenUpsertOne{
		create: rtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RefreshToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rtc *RefreshTokenCreate) OnConflictColumns(columns ...string) *RefreshTokenUpsertOne {
	rtc.conflict = append(rtc.conflict, sql.ConflictColumns(columns...))
	return &RefreshTokenUpsertOne{
		create: rtc,
	}
}

type (
	// RefreshTokenUpsertOne is the builder for "upsert"-ing
	//  one RefreshToken node.
	RefreshTokenUpsertOne struct {
		create *RefreshTokenCreate
	}

	// RefreshTokenUpsert is the "OnConflict" setter.
	RefreshTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetToken sets the "token" field.
func (u *RefreshTokenUpsert) SetToken(v string) *RefreshTokenUpsert {
	u.Set(refreshtoken.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *RefreshTokenUpsert) UpdateToken() *RefreshTokenUpsert {
	u.SetExcluded(refreshtoken.FieldToken)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *RefreshTokenUpsert) SetExpiresAt(v time.Time) *RefreshTokenUpsert {
	u.Set(refreshtoken.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *RefreshTokenUpsert) UpdateExpiresAt() *RefreshTokenUpsert {
	u.SetExcluded(refreshtoken.FieldExpiresAt)
	return u
}

// SetIsDead sets the "is_dead" field.
func (u *RefreshTokenUpsert) SetIsDead(v bool) *RefreshTokenUpsert {
	u.Set(refreshtoken.FieldIsDead, v)
	return u
}

// UpdateIsDead sets the "is_dead" field to the value that was provided on create.
func (u *RefreshTokenUpsert) UpdateIsDead() *RefreshTokenUpsert {
	u.SetExcluded(refreshtoken.FieldIsDead)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RefreshToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RefreshTokenUpsertOne) UpdateNewValues() *RefreshTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RefreshToken.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RefreshTokenUpsertOne) Ignore() *RefreshTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RefreshTokenUpsertOne) DoNothing() *RefreshTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RefreshTokenCreate.OnConflict
// documentation for more info.
func (u *RefreshTokenUpsertOne) Update(set func(*RefreshTokenUpsert)) *RefreshTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RefreshTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetToken sets the "token" field.
func (u *RefreshTokenUpsertOne) SetToken(v string) *RefreshTokenUpsertOne {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *RefreshTokenUpsertOne) UpdateToken() *RefreshTokenUpsertOne {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.UpdateToken()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *RefreshTokenUpsertOne) SetExpiresAt(v time.Time) *RefreshTokenUpsertOne {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *RefreshTokenUpsertOne) UpdateExpiresAt() *RefreshTokenUpsertOne {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetIsDead sets the "is_dead" field.
func (u *RefreshTokenUpsertOne) SetIsDead(v bool) *RefreshTokenUpsertOne {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.SetIsDead(v)
	})
}

// UpdateIsDead sets the "is_dead" field to the value that was provided on create.
func (u *RefreshTokenUpsertOne) UpdateIsDead() *RefreshTokenUpsertOne {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.UpdateIsDead()
	})
}

// Exec executes the query.
func (u *RefreshTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RefreshTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RefreshTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RefreshTokenUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RefreshTokenUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RefreshTokenCreateBulk is the builder for creating many RefreshToken entities in bulk.
type RefreshTokenCreateBulk struct {
	config
	builders []*RefreshTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the RefreshToken entities in the database.
func (rtcb *RefreshTokenCreateBulk) Save(ctx context.Context) ([]*RefreshToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RefreshToken, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefreshTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RefreshTokenCreateBulk) SaveX(ctx context.Context) []*RefreshToken {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *RefreshTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *RefreshTokenCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RefreshToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RefreshTokenUpsert) {
//			SetToken(v+v).
//		}).
//		Exec(ctx)
func (rtcb *RefreshTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *RefreshTokenUpsertBulk {
	rtcb.conflict = opts
	return &RefreshTokenUpsertBulk{
		create: rtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RefreshToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rtcb *RefreshTokenCreateBulk) OnConflictColumns(columns ...string) *RefreshTokenUpsertBulk {
	rtcb.conflict = append(rtcb.conflict, sql.ConflictColumns(columns...))
	return &RefreshTokenUpsertBulk{
		create: rtcb,
	}
}

// RefreshTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of RefreshToken nodes.
type RefreshTokenUpsertBulk struct {
	create *RefreshTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RefreshToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RefreshTokenUpsertBulk) UpdateNewValues() *RefreshTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RefreshToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RefreshTokenUpsertBulk) Ignore() *RefreshTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RefreshTokenUpsertBulk) DoNothing() *RefreshTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RefreshTokenCreateBulk.OnConflict
// documentation for more info.
func (u *RefreshTokenUpsertBulk) Update(set func(*RefreshTokenUpsert)) *RefreshTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RefreshTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetToken sets the "token" field.
func (u *RefreshTokenUpsertBulk) SetToken(v string) *RefreshTokenUpsertBulk {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *RefreshTokenUpsertBulk) UpdateToken() *RefreshTokenUpsertBulk {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.UpdateToken()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *RefreshTokenUpsertBulk) SetExpiresAt(v time.Time) *RefreshTokenUpsertBulk {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *RefreshTokenUpsertBulk) UpdateExpiresAt() *RefreshTokenUpsertBulk {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetIsDead sets the "is_dead" field.
func (u *RefreshTokenUpsertBulk) SetIsDead(v bool) *RefreshTokenUpsertBulk {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.SetIsDead(v)
	})
}

// UpdateIsDead sets the "is_dead" field to the value that was provided on create.
func (u *RefreshTokenUpsertBulk) UpdateIsDead() *RefreshTokenUpsertBulk {
	return u.Update(func(s *RefreshTokenUpsert) {
		s.UpdateIsDead()
	})
}

// Exec executes the query.
func (u *RefreshTokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RefreshTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RefreshTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RefreshTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
