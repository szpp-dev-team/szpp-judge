// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/clarification"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// ClarificationQuery is the builder for querying Clarification entities.
type ClarificationQuery struct {
	config
	ctx            *QueryContext
	order          []clarification.OrderOption
	inters         []Interceptor
	predicates     []predicate.Clarification
	withContest    *ContestQuery
	withTask       *TaskQuery
	withUser       *UserQuery
	withAnswerUser *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClarificationQuery builder.
func (cq *ClarificationQuery) Where(ps ...predicate.Clarification) *ClarificationQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ClarificationQuery) Limit(limit int) *ClarificationQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ClarificationQuery) Offset(offset int) *ClarificationQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ClarificationQuery) Unique(unique bool) *ClarificationQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ClarificationQuery) Order(o ...clarification.OrderOption) *ClarificationQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryContest chains the current query on the "contest" edge.
func (cq *ClarificationQuery) QueryContest() *ContestQuery {
	query := (&ContestClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clarification.Table, clarification.FieldID, selector),
			sqlgraph.To(contest.Table, contest.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, clarification.ContestTable, clarification.ContestPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTask chains the current query on the "task" edge.
func (cq *ClarificationQuery) QueryTask() *TaskQuery {
	query := (&TaskClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clarification.Table, clarification.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, clarification.TaskTable, clarification.TaskPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (cq *ClarificationQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clarification.Table, clarification.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, clarification.UserTable, clarification.UserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnswerUser chains the current query on the "answer_user" edge.
func (cq *ClarificationQuery) QueryAnswerUser() *UserQuery {
	query := (&UserClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(clarification.Table, clarification.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, clarification.AnswerUserTable, clarification.AnswerUserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Clarification entity from the query.
// Returns a *NotFoundError when no Clarification was found.
func (cq *ClarificationQuery) First(ctx context.Context) (*Clarification, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{clarification.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ClarificationQuery) FirstX(ctx context.Context) *Clarification {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Clarification ID from the query.
// Returns a *NotFoundError when no Clarification ID was found.
func (cq *ClarificationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{clarification.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ClarificationQuery) FirstIDX(ctx context.Context) int {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Clarification entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Clarification entity is found.
// Returns a *NotFoundError when no Clarification entities are found.
func (cq *ClarificationQuery) Only(ctx context.Context) (*Clarification, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{clarification.Label}
	default:
		return nil, &NotSingularError{clarification.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ClarificationQuery) OnlyX(ctx context.Context) *Clarification {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Clarification ID in the query.
// Returns a *NotSingularError when more than one Clarification ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ClarificationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{clarification.Label}
	default:
		err = &NotSingularError{clarification.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ClarificationQuery) OnlyIDX(ctx context.Context) int {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Clarifications.
func (cq *ClarificationQuery) All(ctx context.Context) ([]*Clarification, error) {
	ctx = setContextOp(ctx, cq.ctx, "All")
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Clarification, *ClarificationQuery]()
	return withInterceptors[[]*Clarification](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ClarificationQuery) AllX(ctx context.Context) []*Clarification {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Clarification IDs.
func (cq *ClarificationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, "IDs")
	if err = cq.Select(clarification.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ClarificationQuery) IDsX(ctx context.Context) []int {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ClarificationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, "Count")
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ClarificationQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ClarificationQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ClarificationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, "Exist")
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ClarificationQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClarificationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ClarificationQuery) Clone() *ClarificationQuery {
	if cq == nil {
		return nil
	}
	return &ClarificationQuery{
		config:         cq.config,
		ctx:            cq.ctx.Clone(),
		order:          append([]clarification.OrderOption{}, cq.order...),
		inters:         append([]Interceptor{}, cq.inters...),
		predicates:     append([]predicate.Clarification{}, cq.predicates...),
		withContest:    cq.withContest.Clone(),
		withTask:       cq.withTask.Clone(),
		withUser:       cq.withUser.Clone(),
		withAnswerUser: cq.withAnswerUser.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithContest tells the query-builder to eager-load the nodes that are connected to
// the "contest" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClarificationQuery) WithContest(opts ...func(*ContestQuery)) *ClarificationQuery {
	query := (&ContestClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withContest = query
	return cq
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClarificationQuery) WithTask(opts ...func(*TaskQuery)) *ClarificationQuery {
	query := (&TaskClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTask = query
	return cq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClarificationQuery) WithUser(opts ...func(*UserQuery)) *ClarificationQuery {
	query := (&UserClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withUser = query
	return cq
}

// WithAnswerUser tells the query-builder to eager-load the nodes that are connected to
// the "answer_user" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ClarificationQuery) WithAnswerUser(opts ...func(*UserQuery)) *ClarificationQuery {
	query := (&UserClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withAnswerUser = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Clarification.Query().
//		GroupBy(clarification.FieldContent).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *ClarificationQuery) GroupBy(field string, fields ...string) *ClarificationGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClarificationGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = clarification.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//	}
//
//	client.Clarification.Query().
//		Select(clarification.FieldContent).
//		Scan(ctx, &v)
func (cq *ClarificationQuery) Select(fields ...string) *ClarificationSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ClarificationSelect{ClarificationQuery: cq}
	sbuild.label = clarification.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClarificationSelect configured with the given aggregations.
func (cq *ClarificationQuery) Aggregate(fns ...AggregateFunc) *ClarificationSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ClarificationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !clarification.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *ClarificationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Clarification, error) {
	var (
		nodes       = []*Clarification{}
		_spec       = cq.querySpec()
		loadedTypes = [4]bool{
			cq.withContest != nil,
			cq.withTask != nil,
			cq.withUser != nil,
			cq.withAnswerUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Clarification).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Clarification{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withContest; query != nil {
		if err := cq.loadContest(ctx, query, nodes,
			func(n *Clarification) { n.Edges.Contest = []*Contest{} },
			func(n *Clarification, e *Contest) { n.Edges.Contest = append(n.Edges.Contest, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withTask; query != nil {
		if err := cq.loadTask(ctx, query, nodes,
			func(n *Clarification) { n.Edges.Task = []*Task{} },
			func(n *Clarification, e *Task) { n.Edges.Task = append(n.Edges.Task, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withUser; query != nil {
		if err := cq.loadUser(ctx, query, nodes,
			func(n *Clarification) { n.Edges.User = []*User{} },
			func(n *Clarification, e *User) { n.Edges.User = append(n.Edges.User, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withAnswerUser; query != nil {
		if err := cq.loadAnswerUser(ctx, query, nodes,
			func(n *Clarification) { n.Edges.AnswerUser = []*User{} },
			func(n *Clarification, e *User) { n.Edges.AnswerUser = append(n.Edges.AnswerUser, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ClarificationQuery) loadContest(ctx context.Context, query *ContestQuery, nodes []*Clarification, init func(*Clarification), assign func(*Clarification, *Contest)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Clarification)
	nids := make(map[int]map[*Clarification]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(clarification.ContestTable)
		s.Join(joinT).On(s.C(contest.FieldID), joinT.C(clarification.ContestPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(clarification.ContestPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(clarification.ContestPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Clarification]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Contest](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "contest" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ClarificationQuery) loadTask(ctx context.Context, query *TaskQuery, nodes []*Clarification, init func(*Clarification), assign func(*Clarification, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Clarification)
	nids := make(map[int]map[*Clarification]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(clarification.TaskTable)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(clarification.TaskPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(clarification.TaskPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(clarification.TaskPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Clarification]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "task" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ClarificationQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Clarification, init func(*Clarification), assign func(*Clarification, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Clarification)
	nids := make(map[int]map[*Clarification]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(clarification.UserTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(clarification.UserPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(clarification.UserPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(clarification.UserPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Clarification]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ClarificationQuery) loadAnswerUser(ctx context.Context, query *UserQuery, nodes []*Clarification, init func(*Clarification), assign func(*Clarification, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Clarification)
	nids := make(map[int]map[*Clarification]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(clarification.AnswerUserTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(clarification.AnswerUserPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(clarification.AnswerUserPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(clarification.AnswerUserPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Clarification]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "answer_user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cq *ClarificationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ClarificationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(clarification.Table, clarification.Columns, sqlgraph.NewFieldSpec(clarification.FieldID, field.TypeInt))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clarification.FieldID)
		for i := range fields {
			if fields[i] != clarification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ClarificationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(clarification.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = clarification.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClarificationGroupBy is the group-by builder for Clarification entities.
type ClarificationGroupBy struct {
	selector
	build *ClarificationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ClarificationGroupBy) Aggregate(fns ...AggregateFunc) *ClarificationGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ClarificationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, "GroupBy")
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClarificationQuery, *ClarificationGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ClarificationGroupBy) sqlScan(ctx context.Context, root *ClarificationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClarificationSelect is the builder for selecting fields of Clarification entities.
type ClarificationSelect struct {
	*ClarificationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ClarificationSelect) Aggregate(fns ...AggregateFunc) *ClarificationSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ClarificationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, "Select")
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClarificationQuery, *ClarificationSelect](ctx, cs.ClarificationQuery, cs, cs.inters, v)
}

func (cs *ClarificationSelect) sqlScan(ctx context.Context, root *ClarificationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
