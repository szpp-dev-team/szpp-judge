// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/submit"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcase"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseresult"
)

// TestcaseResultCreate is the builder for creating a TestcaseResult entity.
type TestcaseResultCreate struct {
	config
	mutation *TestcaseResultMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (trc *TestcaseResultCreate) SetStatus(s string) *TestcaseResultCreate {
	trc.mutation.SetStatus(s)
	return trc
}

// SetExecTime sets the "exec_time" field.
func (trc *TestcaseResultCreate) SetExecTime(i int) *TestcaseResultCreate {
	trc.mutation.SetExecTime(i)
	return trc
}

// SetExecMemory sets the "exec_memory" field.
func (trc *TestcaseResultCreate) SetExecMemory(i int) *TestcaseResultCreate {
	trc.mutation.SetExecMemory(i)
	return trc
}

// SetID sets the "id" field.
func (trc *TestcaseResultCreate) SetID(i int) *TestcaseResultCreate {
	trc.mutation.SetID(i)
	return trc
}

// SetSubmitID sets the "submit" edge to the Submit entity by ID.
func (trc *TestcaseResultCreate) SetSubmitID(id int) *TestcaseResultCreate {
	trc.mutation.SetSubmitID(id)
	return trc
}

// SetNillableSubmitID sets the "submit" edge to the Submit entity by ID if the given value is not nil.
func (trc *TestcaseResultCreate) SetNillableSubmitID(id *int) *TestcaseResultCreate {
	if id != nil {
		trc = trc.SetSubmitID(*id)
	}
	return trc
}

// SetSubmit sets the "submit" edge to the Submit entity.
func (trc *TestcaseResultCreate) SetSubmit(s *Submit) *TestcaseResultCreate {
	return trc.SetSubmitID(s.ID)
}

// SetTestcaseID sets the "testcase" edge to the Testcase entity by ID.
func (trc *TestcaseResultCreate) SetTestcaseID(id int) *TestcaseResultCreate {
	trc.mutation.SetTestcaseID(id)
	return trc
}

// SetNillableTestcaseID sets the "testcase" edge to the Testcase entity by ID if the given value is not nil.
func (trc *TestcaseResultCreate) SetNillableTestcaseID(id *int) *TestcaseResultCreate {
	if id != nil {
		trc = trc.SetTestcaseID(*id)
	}
	return trc
}

// SetTestcase sets the "testcase" edge to the Testcase entity.
func (trc *TestcaseResultCreate) SetTestcase(t *Testcase) *TestcaseResultCreate {
	return trc.SetTestcaseID(t.ID)
}

// Mutation returns the TestcaseResultMutation object of the builder.
func (trc *TestcaseResultCreate) Mutation() *TestcaseResultMutation {
	return trc.mutation
}

// Save creates the TestcaseResult in the database.
func (trc *TestcaseResultCreate) Save(ctx context.Context) (*TestcaseResult, error) {
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TestcaseResultCreate) SaveX(ctx context.Context) *TestcaseResult {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TestcaseResultCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TestcaseResultCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TestcaseResultCreate) check() error {
	if _, ok := trc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TestcaseResult.status"`)}
	}
	if _, ok := trc.mutation.ExecTime(); !ok {
		return &ValidationError{Name: "exec_time", err: errors.New(`ent: missing required field "TestcaseResult.exec_time"`)}
	}
	if _, ok := trc.mutation.ExecMemory(); !ok {
		return &ValidationError{Name: "exec_memory", err: errors.New(`ent: missing required field "TestcaseResult.exec_memory"`)}
	}
	return nil
}

func (trc *TestcaseResultCreate) sqlSave(ctx context.Context) (*TestcaseResult, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TestcaseResultCreate) createSpec() (*TestcaseResult, *sqlgraph.CreateSpec) {
	var (
		_node = &TestcaseResult{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(testcaseresult.Table, sqlgraph.NewFieldSpec(testcaseresult.FieldID, field.TypeInt))
	)
	_spec.OnConflict = trc.conflict
	if id, ok := trc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := trc.mutation.Status(); ok {
		_spec.SetField(testcaseresult.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := trc.mutation.ExecTime(); ok {
		_spec.SetField(testcaseresult.FieldExecTime, field.TypeInt, value)
		_node.ExecTime = value
	}
	if value, ok := trc.mutation.ExecMemory(); ok {
		_spec.SetField(testcaseresult.FieldExecMemory, field.TypeInt, value)
		_node.ExecMemory = value
	}
	if nodes := trc.mutation.SubmitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseresult.SubmitTable,
			Columns: []string{testcaseresult.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.submit_testcase_results = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TestcaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testcaseresult.TestcaseTable,
			Columns: []string{testcaseresult.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.testcase_result_testcase = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestcaseResult.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestcaseResultUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (trc *TestcaseResultCreate) OnConflict(opts ...sql.ConflictOption) *TestcaseResultUpsertOne {
	trc.conflict = opts
	return &TestcaseResultUpsertOne{
		create: trc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestcaseResult.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trc *TestcaseResultCreate) OnConflictColumns(columns ...string) *TestcaseResultUpsertOne {
	trc.conflict = append(trc.conflict, sql.ConflictColumns(columns...))
	return &TestcaseResultUpsertOne{
		create: trc,
	}
}

type (
	// TestcaseResultUpsertOne is the builder for "upsert"-ing
	//  one TestcaseResult node.
	TestcaseResultUpsertOne struct {
		create *TestcaseResultCreate
	}

	// TestcaseResultUpsert is the "OnConflict" setter.
	TestcaseResultUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *TestcaseResultUpsert) SetStatus(v string) *TestcaseResultUpsert {
	u.Set(testcaseresult.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TestcaseResultUpsert) UpdateStatus() *TestcaseResultUpsert {
	u.SetExcluded(testcaseresult.FieldStatus)
	return u
}

// SetExecTime sets the "exec_time" field.
func (u *TestcaseResultUpsert) SetExecTime(v int) *TestcaseResultUpsert {
	u.Set(testcaseresult.FieldExecTime, v)
	return u
}

// UpdateExecTime sets the "exec_time" field to the value that was provided on create.
func (u *TestcaseResultUpsert) UpdateExecTime() *TestcaseResultUpsert {
	u.SetExcluded(testcaseresult.FieldExecTime)
	return u
}

// AddExecTime adds v to the "exec_time" field.
func (u *TestcaseResultUpsert) AddExecTime(v int) *TestcaseResultUpsert {
	u.Add(testcaseresult.FieldExecTime, v)
	return u
}

// SetExecMemory sets the "exec_memory" field.
func (u *TestcaseResultUpsert) SetExecMemory(v int) *TestcaseResultUpsert {
	u.Set(testcaseresult.FieldExecMemory, v)
	return u
}

// UpdateExecMemory sets the "exec_memory" field to the value that was provided on create.
func (u *TestcaseResultUpsert) UpdateExecMemory() *TestcaseResultUpsert {
	u.SetExcluded(testcaseresult.FieldExecMemory)
	return u
}

// AddExecMemory adds v to the "exec_memory" field.
func (u *TestcaseResultUpsert) AddExecMemory(v int) *TestcaseResultUpsert {
	u.Add(testcaseresult.FieldExecMemory, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TestcaseResult.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testcaseresult.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TestcaseResultUpsertOne) UpdateNewValues() *TestcaseResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(testcaseresult.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestcaseResult.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TestcaseResultUpsertOne) Ignore() *TestcaseResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestcaseResultUpsertOne) DoNothing() *TestcaseResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestcaseResultCreate.OnConflict
// documentation for more info.
func (u *TestcaseResultUpsertOne) Update(set func(*TestcaseResultUpsert)) *TestcaseResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestcaseResultUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *TestcaseResultUpsertOne) SetStatus(v string) *TestcaseResultUpsertOne {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TestcaseResultUpsertOne) UpdateStatus() *TestcaseResultUpsertOne {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.UpdateStatus()
	})
}

// SetExecTime sets the "exec_time" field.
func (u *TestcaseResultUpsertOne) SetExecTime(v int) *TestcaseResultUpsertOne {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.SetExecTime(v)
	})
}

// AddExecTime adds v to the "exec_time" field.
func (u *TestcaseResultUpsertOne) AddExecTime(v int) *TestcaseResultUpsertOne {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.AddExecTime(v)
	})
}

// UpdateExecTime sets the "exec_time" field to the value that was provided on create.
func (u *TestcaseResultUpsertOne) UpdateExecTime() *TestcaseResultUpsertOne {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.UpdateExecTime()
	})
}

// SetExecMemory sets the "exec_memory" field.
func (u *TestcaseResultUpsertOne) SetExecMemory(v int) *TestcaseResultUpsertOne {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.SetExecMemory(v)
	})
}

// AddExecMemory adds v to the "exec_memory" field.
func (u *TestcaseResultUpsertOne) AddExecMemory(v int) *TestcaseResultUpsertOne {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.AddExecMemory(v)
	})
}

// UpdateExecMemory sets the "exec_memory" field to the value that was provided on create.
func (u *TestcaseResultUpsertOne) UpdateExecMemory() *TestcaseResultUpsertOne {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.UpdateExecMemory()
	})
}

// Exec executes the query.
func (u *TestcaseResultUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestcaseResultCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestcaseResultUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestcaseResultUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestcaseResultUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestcaseResultCreateBulk is the builder for creating many TestcaseResult entities in bulk.
type TestcaseResultCreateBulk struct {
	config
	builders []*TestcaseResultCreate
	conflict []sql.ConflictOption
}

// Save creates the TestcaseResult entities in the database.
func (trcb *TestcaseResultCreateBulk) Save(ctx context.Context) ([]*TestcaseResult, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TestcaseResult, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestcaseResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = trcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TestcaseResultCreateBulk) SaveX(ctx context.Context) []*TestcaseResult {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TestcaseResultCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TestcaseResultCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestcaseResult.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestcaseResultUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (trcb *TestcaseResultCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestcaseResultUpsertBulk {
	trcb.conflict = opts
	return &TestcaseResultUpsertBulk{
		create: trcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestcaseResult.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trcb *TestcaseResultCreateBulk) OnConflictColumns(columns ...string) *TestcaseResultUpsertBulk {
	trcb.conflict = append(trcb.conflict, sql.ConflictColumns(columns...))
	return &TestcaseResultUpsertBulk{
		create: trcb,
	}
}

// TestcaseResultUpsertBulk is the builder for "upsert"-ing
// a bulk of TestcaseResult nodes.
type TestcaseResultUpsertBulk struct {
	create *TestcaseResultCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestcaseResult.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testcaseresult.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TestcaseResultUpsertBulk) UpdateNewValues() *TestcaseResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(testcaseresult.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestcaseResult.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TestcaseResultUpsertBulk) Ignore() *TestcaseResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestcaseResultUpsertBulk) DoNothing() *TestcaseResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestcaseResultCreateBulk.OnConflict
// documentation for more info.
func (u *TestcaseResultUpsertBulk) Update(set func(*TestcaseResultUpsert)) *TestcaseResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestcaseResultUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *TestcaseResultUpsertBulk) SetStatus(v string) *TestcaseResultUpsertBulk {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TestcaseResultUpsertBulk) UpdateStatus() *TestcaseResultUpsertBulk {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.UpdateStatus()
	})
}

// SetExecTime sets the "exec_time" field.
func (u *TestcaseResultUpsertBulk) SetExecTime(v int) *TestcaseResultUpsertBulk {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.SetExecTime(v)
	})
}

// AddExecTime adds v to the "exec_time" field.
func (u *TestcaseResultUpsertBulk) AddExecTime(v int) *TestcaseResultUpsertBulk {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.AddExecTime(v)
	})
}

// UpdateExecTime sets the "exec_time" field to the value that was provided on create.
func (u *TestcaseResultUpsertBulk) UpdateExecTime() *TestcaseResultUpsertBulk {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.UpdateExecTime()
	})
}

// SetExecMemory sets the "exec_memory" field.
func (u *TestcaseResultUpsertBulk) SetExecMemory(v int) *TestcaseResultUpsertBulk {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.SetExecMemory(v)
	})
}

// AddExecMemory adds v to the "exec_memory" field.
func (u *TestcaseResultUpsertBulk) AddExecMemory(v int) *TestcaseResultUpsertBulk {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.AddExecMemory(v)
	})
}

// UpdateExecMemory sets the "exec_memory" field to the value that was provided on create.
func (u *TestcaseResultUpsertBulk) UpdateExecMemory() *TestcaseResultUpsertBulk {
	return u.Update(func(s *TestcaseResultUpsert) {
		s.UpdateExecMemory()
	})
}

// Exec executes the query.
func (u *TestcaseResultUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestcaseResultCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestcaseResultCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestcaseResultUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
