// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contestclarification"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// ContestClarificationQuery is the builder for querying ContestClarification entities.
type ContestClarificationQuery struct {
	config
	ctx            *QueryContext
	order          []contestclarification.OrderOption
	inters         []Interceptor
	predicates     []predicate.ContestClarification
	withContest    *ContestQuery
	withTask       *TaskQuery
	withUser       *UserQuery
	withAnswerUser *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContestClarificationQuery builder.
func (ccq *ContestClarificationQuery) Where(ps ...predicate.ContestClarification) *ContestClarificationQuery {
	ccq.predicates = append(ccq.predicates, ps...)
	return ccq
}

// Limit the number of records to be returned by this query.
func (ccq *ContestClarificationQuery) Limit(limit int) *ContestClarificationQuery {
	ccq.ctx.Limit = &limit
	return ccq
}

// Offset to start from.
func (ccq *ContestClarificationQuery) Offset(offset int) *ContestClarificationQuery {
	ccq.ctx.Offset = &offset
	return ccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ccq *ContestClarificationQuery) Unique(unique bool) *ContestClarificationQuery {
	ccq.ctx.Unique = &unique
	return ccq
}

// Order specifies how the records should be ordered.
func (ccq *ContestClarificationQuery) Order(o ...contestclarification.OrderOption) *ContestClarificationQuery {
	ccq.order = append(ccq.order, o...)
	return ccq
}

// QueryContest chains the current query on the "contest" edge.
func (ccq *ContestClarificationQuery) QueryContest() *ContestQuery {
	query := (&ContestClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contestclarification.Table, contestclarification.FieldID, selector),
			sqlgraph.To(contest.Table, contest.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contestclarification.ContestTable, contestclarification.ContestPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTask chains the current query on the "task" edge.
func (ccq *ContestClarificationQuery) QueryTask() *TaskQuery {
	query := (&TaskClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contestclarification.Table, contestclarification.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contestclarification.TaskTable, contestclarification.TaskPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (ccq *ContestClarificationQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contestclarification.Table, contestclarification.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contestclarification.UserTable, contestclarification.UserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnswerUser chains the current query on the "answer_user" edge.
func (ccq *ContestClarificationQuery) QueryAnswerUser() *UserQuery {
	query := (&UserClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contestclarification.Table, contestclarification.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contestclarification.AnswerUserTable, contestclarification.AnswerUserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ContestClarification entity from the query.
// Returns a *NotFoundError when no ContestClarification was found.
func (ccq *ContestClarificationQuery) First(ctx context.Context) (*ContestClarification, error) {
	nodes, err := ccq.Limit(1).All(setContextOp(ctx, ccq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{contestclarification.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ccq *ContestClarificationQuery) FirstX(ctx context.Context) *ContestClarification {
	node, err := ccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContestClarification ID from the query.
// Returns a *NotFoundError when no ContestClarification ID was found.
func (ccq *ContestClarificationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ccq.Limit(1).IDs(setContextOp(ctx, ccq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{contestclarification.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ccq *ContestClarificationQuery) FirstIDX(ctx context.Context) int {
	id, err := ccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContestClarification entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ContestClarification entity is found.
// Returns a *NotFoundError when no ContestClarification entities are found.
func (ccq *ContestClarificationQuery) Only(ctx context.Context) (*ContestClarification, error) {
	nodes, err := ccq.Limit(2).All(setContextOp(ctx, ccq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{contestclarification.Label}
	default:
		return nil, &NotSingularError{contestclarification.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ccq *ContestClarificationQuery) OnlyX(ctx context.Context) *ContestClarification {
	node, err := ccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContestClarification ID in the query.
// Returns a *NotSingularError when more than one ContestClarification ID is found.
// Returns a *NotFoundError when no entities are found.
func (ccq *ContestClarificationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ccq.Limit(2).IDs(setContextOp(ctx, ccq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{contestclarification.Label}
	default:
		err = &NotSingularError{contestclarification.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ccq *ContestClarificationQuery) OnlyIDX(ctx context.Context) int {
	id, err := ccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContestClarifications.
func (ccq *ContestClarificationQuery) All(ctx context.Context) ([]*ContestClarification, error) {
	ctx = setContextOp(ctx, ccq.ctx, "All")
	if err := ccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ContestClarification, *ContestClarificationQuery]()
	return withInterceptors[[]*ContestClarification](ctx, ccq, qr, ccq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ccq *ContestClarificationQuery) AllX(ctx context.Context) []*ContestClarification {
	nodes, err := ccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContestClarification IDs.
func (ccq *ContestClarificationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ccq.ctx.Unique == nil && ccq.path != nil {
		ccq.Unique(true)
	}
	ctx = setContextOp(ctx, ccq.ctx, "IDs")
	if err = ccq.Select(contestclarification.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ccq *ContestClarificationQuery) IDsX(ctx context.Context) []int {
	ids, err := ccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ccq *ContestClarificationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ccq.ctx, "Count")
	if err := ccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ccq, querierCount[*ContestClarificationQuery](), ccq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ccq *ContestClarificationQuery) CountX(ctx context.Context) int {
	count, err := ccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ccq *ContestClarificationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ccq.ctx, "Exist")
	switch _, err := ccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ccq *ContestClarificationQuery) ExistX(ctx context.Context) bool {
	exist, err := ccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContestClarificationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ccq *ContestClarificationQuery) Clone() *ContestClarificationQuery {
	if ccq == nil {
		return nil
	}
	return &ContestClarificationQuery{
		config:         ccq.config,
		ctx:            ccq.ctx.Clone(),
		order:          append([]contestclarification.OrderOption{}, ccq.order...),
		inters:         append([]Interceptor{}, ccq.inters...),
		predicates:     append([]predicate.ContestClarification{}, ccq.predicates...),
		withContest:    ccq.withContest.Clone(),
		withTask:       ccq.withTask.Clone(),
		withUser:       ccq.withUser.Clone(),
		withAnswerUser: ccq.withAnswerUser.Clone(),
		// clone intermediate query.
		sql:  ccq.sql.Clone(),
		path: ccq.path,
	}
}

// WithContest tells the query-builder to eager-load the nodes that are connected to
// the "contest" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ContestClarificationQuery) WithContest(opts ...func(*ContestQuery)) *ContestClarificationQuery {
	query := (&ContestClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withContest = query
	return ccq
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ContestClarificationQuery) WithTask(opts ...func(*TaskQuery)) *ContestClarificationQuery {
	query := (&TaskClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withTask = query
	return ccq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ContestClarificationQuery) WithUser(opts ...func(*UserQuery)) *ContestClarificationQuery {
	query := (&UserClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withUser = query
	return ccq
}

// WithAnswerUser tells the query-builder to eager-load the nodes that are connected to
// the "answer_user" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ContestClarificationQuery) WithAnswerUser(opts ...func(*UserQuery)) *ContestClarificationQuery {
	query := (&UserClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withAnswerUser = query
	return ccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContestClarification.Query().
//		GroupBy(contestclarification.FieldContent).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ccq *ContestClarificationQuery) GroupBy(field string, fields ...string) *ContestClarificationGroupBy {
	ccq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ContestClarificationGroupBy{build: ccq}
	grbuild.flds = &ccq.ctx.Fields
	grbuild.label = contestclarification.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//	}
//
//	client.ContestClarification.Query().
//		Select(contestclarification.FieldContent).
//		Scan(ctx, &v)
func (ccq *ContestClarificationQuery) Select(fields ...string) *ContestClarificationSelect {
	ccq.ctx.Fields = append(ccq.ctx.Fields, fields...)
	sbuild := &ContestClarificationSelect{ContestClarificationQuery: ccq}
	sbuild.label = contestclarification.Label
	sbuild.flds, sbuild.scan = &ccq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ContestClarificationSelect configured with the given aggregations.
func (ccq *ContestClarificationQuery) Aggregate(fns ...AggregateFunc) *ContestClarificationSelect {
	return ccq.Select().Aggregate(fns...)
}

func (ccq *ContestClarificationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ccq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ccq); err != nil {
				return err
			}
		}
	}
	for _, f := range ccq.ctx.Fields {
		if !contestclarification.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ccq.path != nil {
		prev, err := ccq.path(ctx)
		if err != nil {
			return err
		}
		ccq.sql = prev
	}
	return nil
}

func (ccq *ContestClarificationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ContestClarification, error) {
	var (
		nodes       = []*ContestClarification{}
		_spec       = ccq.querySpec()
		loadedTypes = [4]bool{
			ccq.withContest != nil,
			ccq.withTask != nil,
			ccq.withUser != nil,
			ccq.withAnswerUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ContestClarification).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ContestClarification{config: ccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ccq.withContest; query != nil {
		if err := ccq.loadContest(ctx, query, nodes,
			func(n *ContestClarification) { n.Edges.Contest = []*Contest{} },
			func(n *ContestClarification, e *Contest) { n.Edges.Contest = append(n.Edges.Contest, e) }); err != nil {
			return nil, err
		}
	}
	if query := ccq.withTask; query != nil {
		if err := ccq.loadTask(ctx, query, nodes,
			func(n *ContestClarification) { n.Edges.Task = []*Task{} },
			func(n *ContestClarification, e *Task) { n.Edges.Task = append(n.Edges.Task, e) }); err != nil {
			return nil, err
		}
	}
	if query := ccq.withUser; query != nil {
		if err := ccq.loadUser(ctx, query, nodes,
			func(n *ContestClarification) { n.Edges.User = []*User{} },
			func(n *ContestClarification, e *User) { n.Edges.User = append(n.Edges.User, e) }); err != nil {
			return nil, err
		}
	}
	if query := ccq.withAnswerUser; query != nil {
		if err := ccq.loadAnswerUser(ctx, query, nodes,
			func(n *ContestClarification) { n.Edges.AnswerUser = []*User{} },
			func(n *ContestClarification, e *User) { n.Edges.AnswerUser = append(n.Edges.AnswerUser, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ccq *ContestClarificationQuery) loadContest(ctx context.Context, query *ContestQuery, nodes []*ContestClarification, init func(*ContestClarification), assign func(*ContestClarification, *Contest)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ContestClarification)
	nids := make(map[int]map[*ContestClarification]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(contestclarification.ContestTable)
		s.Join(joinT).On(s.C(contest.FieldID), joinT.C(contestclarification.ContestPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(contestclarification.ContestPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(contestclarification.ContestPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ContestClarification]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Contest](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "contest" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ccq *ContestClarificationQuery) loadTask(ctx context.Context, query *TaskQuery, nodes []*ContestClarification, init func(*ContestClarification), assign func(*ContestClarification, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ContestClarification)
	nids := make(map[int]map[*ContestClarification]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(contestclarification.TaskTable)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(contestclarification.TaskPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(contestclarification.TaskPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(contestclarification.TaskPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ContestClarification]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "task" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ccq *ContestClarificationQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ContestClarification, init func(*ContestClarification), assign func(*ContestClarification, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ContestClarification)
	nids := make(map[int]map[*ContestClarification]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(contestclarification.UserTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(contestclarification.UserPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(contestclarification.UserPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(contestclarification.UserPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ContestClarification]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ccq *ContestClarificationQuery) loadAnswerUser(ctx context.Context, query *UserQuery, nodes []*ContestClarification, init func(*ContestClarification), assign func(*ContestClarification, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ContestClarification)
	nids := make(map[int]map[*ContestClarification]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(contestclarification.AnswerUserTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(contestclarification.AnswerUserPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(contestclarification.AnswerUserPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(contestclarification.AnswerUserPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ContestClarification]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "answer_user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (ccq *ContestClarificationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ccq.querySpec()
	_spec.Node.Columns = ccq.ctx.Fields
	if len(ccq.ctx.Fields) > 0 {
		_spec.Unique = ccq.ctx.Unique != nil && *ccq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ccq.driver, _spec)
}

func (ccq *ContestClarificationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(contestclarification.Table, contestclarification.Columns, sqlgraph.NewFieldSpec(contestclarification.FieldID, field.TypeInt))
	_spec.From = ccq.sql
	if unique := ccq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ccq.path != nil {
		_spec.Unique = true
	}
	if fields := ccq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contestclarification.FieldID)
		for i := range fields {
			if fields[i] != contestclarification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ccq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ccq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ccq *ContestClarificationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ccq.driver.Dialect())
	t1 := builder.Table(contestclarification.Table)
	columns := ccq.ctx.Fields
	if len(columns) == 0 {
		columns = contestclarification.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ccq.sql != nil {
		selector = ccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ccq.ctx.Unique != nil && *ccq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ccq.predicates {
		p(selector)
	}
	for _, p := range ccq.order {
		p(selector)
	}
	if offset := ccq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ccq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ContestClarificationGroupBy is the group-by builder for ContestClarification entities.
type ContestClarificationGroupBy struct {
	selector
	build *ContestClarificationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ccgb *ContestClarificationGroupBy) Aggregate(fns ...AggregateFunc) *ContestClarificationGroupBy {
	ccgb.fns = append(ccgb.fns, fns...)
	return ccgb
}

// Scan applies the selector query and scans the result into the given value.
func (ccgb *ContestClarificationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccgb.build.ctx, "GroupBy")
	if err := ccgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContestClarificationQuery, *ContestClarificationGroupBy](ctx, ccgb.build, ccgb, ccgb.build.inters, v)
}

func (ccgb *ContestClarificationGroupBy) sqlScan(ctx context.Context, root *ContestClarificationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ccgb.fns))
	for _, fn := range ccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ccgb.flds)+len(ccgb.fns))
		for _, f := range *ccgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ccgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ContestClarificationSelect is the builder for selecting fields of ContestClarification entities.
type ContestClarificationSelect struct {
	*ContestClarificationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ccs *ContestClarificationSelect) Aggregate(fns ...AggregateFunc) *ContestClarificationSelect {
	ccs.fns = append(ccs.fns, fns...)
	return ccs
}

// Scan applies the selector query and scans the result into the given value.
func (ccs *ContestClarificationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccs.ctx, "Select")
	if err := ccs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContestClarificationQuery, *ContestClarificationSelect](ctx, ccs.ContestClarificationQuery, ccs, ccs.inters, v)
}

func (ccs *ContestClarificationSelect) sqlScan(ctx context.Context, root *ContestClarificationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ccs.fns))
	for _, fn := range ccs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
