// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/clarification"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// ClarificationCreate is the builder for creating a Clarification entity.
type ClarificationCreate struct {
	config
	mutation *ClarificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetContent sets the "content" field.
func (cc *ClarificationCreate) SetContent(s string) *ClarificationCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetIsPublic sets the "is_public" field.
func (cc *ClarificationCreate) SetIsPublic(b bool) *ClarificationCreate {
	cc.mutation.SetIsPublic(b)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ClarificationCreate) SetCreatedAt(t time.Time) *ClarificationCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ClarificationCreate) SetUpdatedAt(t time.Time) *ClarificationCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetAnswerContent sets the "answer_content" field.
func (cc *ClarificationCreate) SetAnswerContent(s string) *ClarificationCreate {
	cc.mutation.SetAnswerContent(s)
	return cc
}

// SetNillableAnswerContent sets the "answer_content" field if the given value is not nil.
func (cc *ClarificationCreate) SetNillableAnswerContent(s *string) *ClarificationCreate {
	if s != nil {
		cc.SetAnswerContent(*s)
	}
	return cc
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (cc *ClarificationCreate) SetAnswerCreatedAt(t time.Time) *ClarificationCreate {
	cc.mutation.SetAnswerCreatedAt(t)
	return cc
}

// SetNillableAnswerCreatedAt sets the "answer_created_at" field if the given value is not nil.
func (cc *ClarificationCreate) SetNillableAnswerCreatedAt(t *time.Time) *ClarificationCreate {
	if t != nil {
		cc.SetAnswerCreatedAt(*t)
	}
	return cc
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (cc *ClarificationCreate) SetAnswerUpdatedAt(t time.Time) *ClarificationCreate {
	cc.mutation.SetAnswerUpdatedAt(t)
	return cc
}

// SetNillableAnswerUpdatedAt sets the "answer_updated_at" field if the given value is not nil.
func (cc *ClarificationCreate) SetNillableAnswerUpdatedAt(t *time.Time) *ClarificationCreate {
	if t != nil {
		cc.SetAnswerUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ClarificationCreate) SetID(i int) *ClarificationCreate {
	cc.mutation.SetID(i)
	return cc
}

// AddContestIDs adds the "contest" edge to the Contest entity by IDs.
func (cc *ClarificationCreate) AddContestIDs(ids ...int) *ClarificationCreate {
	cc.mutation.AddContestIDs(ids...)
	return cc
}

// AddContest adds the "contest" edges to the Contest entity.
func (cc *ClarificationCreate) AddContest(c ...*Contest) *ClarificationCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddContestIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (cc *ClarificationCreate) AddTaskIDs(ids ...int) *ClarificationCreate {
	cc.mutation.AddTaskIDs(ids...)
	return cc
}

// AddTask adds the "task" edges to the Task entity.
func (cc *ClarificationCreate) AddTask(t ...*Task) *ClarificationCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTaskIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (cc *ClarificationCreate) AddUserIDs(ids ...int) *ClarificationCreate {
	cc.mutation.AddUserIDs(ids...)
	return cc
}

// AddUser adds the "user" edges to the User entity.
func (cc *ClarificationCreate) AddUser(u ...*User) *ClarificationCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddUserIDs(ids...)
}

// AddAnswerUserIDs adds the "answer_user" edge to the User entity by IDs.
func (cc *ClarificationCreate) AddAnswerUserIDs(ids ...int) *ClarificationCreate {
	cc.mutation.AddAnswerUserIDs(ids...)
	return cc
}

// AddAnswerUser adds the "answer_user" edges to the User entity.
func (cc *ClarificationCreate) AddAnswerUser(u ...*User) *ClarificationCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddAnswerUserIDs(ids...)
}

// Mutation returns the ClarificationMutation object of the builder.
func (cc *ClarificationCreate) Mutation() *ClarificationMutation {
	return cc.mutation
}

// Save creates the Clarification in the database.
func (cc *ClarificationCreate) Save(ctx context.Context) (*Clarification, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClarificationCreate) SaveX(ctx context.Context) *Clarification {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClarificationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClarificationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClarificationCreate) check() error {
	if _, ok := cc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Clarification.content"`)}
	}
	if _, ok := cc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "Clarification.is_public"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Clarification.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Clarification.updated_at"`)}
	}
	if len(cc.mutation.ContestIDs()) == 0 {
		return &ValidationError{Name: "contest", err: errors.New(`ent: missing required edge "Clarification.contest"`)}
	}
	if len(cc.mutation.TaskIDs()) == 0 {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "Clarification.task"`)}
	}
	if len(cc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Clarification.user"`)}
	}
	if len(cc.mutation.AnswerUserIDs()) == 0 {
		return &ValidationError{Name: "answer_user", err: errors.New(`ent: missing required edge "Clarification.answer_user"`)}
	}
	return nil
}

func (cc *ClarificationCreate) sqlSave(ctx context.Context) (*Clarification, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClarificationCreate) createSpec() (*Clarification, *sqlgraph.CreateSpec) {
	var (
		_node = &Clarification{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(clarification.Table, sqlgraph.NewFieldSpec(clarification.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(clarification.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cc.mutation.IsPublic(); ok {
		_spec.SetField(clarification.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(clarification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(clarification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.AnswerContent(); ok {
		_spec.SetField(clarification.FieldAnswerContent, field.TypeString, value)
		_node.AnswerContent = &value
	}
	if value, ok := cc.mutation.AnswerCreatedAt(); ok {
		_spec.SetField(clarification.FieldAnswerCreatedAt, field.TypeTime, value)
		_node.AnswerCreatedAt = &value
	}
	if value, ok := cc.mutation.AnswerUpdatedAt(); ok {
		_spec.SetField(clarification.FieldAnswerUpdatedAt, field.TypeTime, value)
		_node.AnswerUpdatedAt = &value
	}
	if nodes := cc.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.ContestTable,
			Columns: clarification.ContestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.TaskTable,
			Columns: clarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.UserTable,
			Columns: clarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.AnswerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.AnswerUserTable,
			Columns: clarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Clarification.Create().
//		SetContent(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClarificationUpsert) {
//			SetContent(v+v).
//		}).
//		Exec(ctx)
func (cc *ClarificationCreate) OnConflict(opts ...sql.ConflictOption) *ClarificationUpsertOne {
	cc.conflict = opts
	return &ClarificationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Clarification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ClarificationCreate) OnConflictColumns(columns ...string) *ClarificationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ClarificationUpsertOne{
		create: cc,
	}
}

type (
	// ClarificationUpsertOne is the builder for "upsert"-ing
	//  one Clarification node.
	ClarificationUpsertOne struct {
		create *ClarificationCreate
	}

	// ClarificationUpsert is the "OnConflict" setter.
	ClarificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetContent sets the "content" field.
func (u *ClarificationUpsert) SetContent(v string) *ClarificationUpsert {
	u.Set(clarification.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ClarificationUpsert) UpdateContent() *ClarificationUpsert {
	u.SetExcluded(clarification.FieldContent)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *ClarificationUpsert) SetIsPublic(v bool) *ClarificationUpsert {
	u.Set(clarification.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ClarificationUpsert) UpdateIsPublic() *ClarificationUpsert {
	u.SetExcluded(clarification.FieldIsPublic)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ClarificationUpsert) SetCreatedAt(v time.Time) *ClarificationUpsert {
	u.Set(clarification.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ClarificationUpsert) UpdateCreatedAt() *ClarificationUpsert {
	u.SetExcluded(clarification.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ClarificationUpsert) SetUpdatedAt(v time.Time) *ClarificationUpsert {
	u.Set(clarification.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ClarificationUpsert) UpdateUpdatedAt() *ClarificationUpsert {
	u.SetExcluded(clarification.FieldUpdatedAt)
	return u
}

// SetAnswerContent sets the "answer_content" field.
func (u *ClarificationUpsert) SetAnswerContent(v string) *ClarificationUpsert {
	u.Set(clarification.FieldAnswerContent, v)
	return u
}

// UpdateAnswerContent sets the "answer_content" field to the value that was provided on create.
func (u *ClarificationUpsert) UpdateAnswerContent() *ClarificationUpsert {
	u.SetExcluded(clarification.FieldAnswerContent)
	return u
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (u *ClarificationUpsert) ClearAnswerContent() *ClarificationUpsert {
	u.SetNull(clarification.FieldAnswerContent)
	return u
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (u *ClarificationUpsert) SetAnswerCreatedAt(v time.Time) *ClarificationUpsert {
	u.Set(clarification.FieldAnswerCreatedAt, v)
	return u
}

// UpdateAnswerCreatedAt sets the "answer_created_at" field to the value that was provided on create.
func (u *ClarificationUpsert) UpdateAnswerCreatedAt() *ClarificationUpsert {
	u.SetExcluded(clarification.FieldAnswerCreatedAt)
	return u
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (u *ClarificationUpsert) ClearAnswerCreatedAt() *ClarificationUpsert {
	u.SetNull(clarification.FieldAnswerCreatedAt)
	return u
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (u *ClarificationUpsert) SetAnswerUpdatedAt(v time.Time) *ClarificationUpsert {
	u.Set(clarification.FieldAnswerUpdatedAt, v)
	return u
}

// UpdateAnswerUpdatedAt sets the "answer_updated_at" field to the value that was provided on create.
func (u *ClarificationUpsert) UpdateAnswerUpdatedAt() *ClarificationUpsert {
	u.SetExcluded(clarification.FieldAnswerUpdatedAt)
	return u
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (u *ClarificationUpsert) ClearAnswerUpdatedAt() *ClarificationUpsert {
	u.SetNull(clarification.FieldAnswerUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Clarification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(clarification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClarificationUpsertOne) UpdateNewValues() *ClarificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(clarification.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Clarification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ClarificationUpsertOne) Ignore() *ClarificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClarificationUpsertOne) DoNothing() *ClarificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClarificationCreate.OnConflict
// documentation for more info.
func (u *ClarificationUpsertOne) Update(set func(*ClarificationUpsert)) *ClarificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClarificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *ClarificationUpsertOne) SetContent(v string) *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ClarificationUpsertOne) UpdateContent() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateContent()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *ClarificationUpsertOne) SetIsPublic(v bool) *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ClarificationUpsertOne) UpdateIsPublic() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateIsPublic()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ClarificationUpsertOne) SetCreatedAt(v time.Time) *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ClarificationUpsertOne) UpdateCreatedAt() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ClarificationUpsertOne) SetUpdatedAt(v time.Time) *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ClarificationUpsertOne) UpdateUpdatedAt() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAnswerContent sets the "answer_content" field.
func (u *ClarificationUpsertOne) SetAnswerContent(v string) *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetAnswerContent(v)
	})
}

// UpdateAnswerContent sets the "answer_content" field to the value that was provided on create.
func (u *ClarificationUpsertOne) UpdateAnswerContent() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateAnswerContent()
	})
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (u *ClarificationUpsertOne) ClearAnswerContent() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.ClearAnswerContent()
	})
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (u *ClarificationUpsertOne) SetAnswerCreatedAt(v time.Time) *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetAnswerCreatedAt(v)
	})
}

// UpdateAnswerCreatedAt sets the "answer_created_at" field to the value that was provided on create.
func (u *ClarificationUpsertOne) UpdateAnswerCreatedAt() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateAnswerCreatedAt()
	})
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (u *ClarificationUpsertOne) ClearAnswerCreatedAt() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.ClearAnswerCreatedAt()
	})
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (u *ClarificationUpsertOne) SetAnswerUpdatedAt(v time.Time) *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetAnswerUpdatedAt(v)
	})
}

// UpdateAnswerUpdatedAt sets the "answer_updated_at" field to the value that was provided on create.
func (u *ClarificationUpsertOne) UpdateAnswerUpdatedAt() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateAnswerUpdatedAt()
	})
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (u *ClarificationUpsertOne) ClearAnswerUpdatedAt() *ClarificationUpsertOne {
	return u.Update(func(s *ClarificationUpsert) {
		s.ClearAnswerUpdatedAt()
	})
}

// Exec executes the query.
func (u *ClarificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ClarificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClarificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ClarificationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ClarificationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ClarificationCreateBulk is the builder for creating many Clarification entities in bulk.
type ClarificationCreateBulk struct {
	config
	builders []*ClarificationCreate
	conflict []sql.ConflictOption
}

// Save creates the Clarification entities in the database.
func (ccb *ClarificationCreateBulk) Save(ctx context.Context) ([]*Clarification, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Clarification, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClarificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClarificationCreateBulk) SaveX(ctx context.Context) []*Clarification {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClarificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClarificationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Clarification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClarificationUpsert) {
//			SetContent(v+v).
//		}).
//		Exec(ctx)
func (ccb *ClarificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ClarificationUpsertBulk {
	ccb.conflict = opts
	return &ClarificationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Clarification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ClarificationCreateBulk) OnConflictColumns(columns ...string) *ClarificationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ClarificationUpsertBulk{
		create: ccb,
	}
}

// ClarificationUpsertBulk is the builder for "upsert"-ing
// a bulk of Clarification nodes.
type ClarificationUpsertBulk struct {
	create *ClarificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Clarification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(clarification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClarificationUpsertBulk) UpdateNewValues() *ClarificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(clarification.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Clarification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ClarificationUpsertBulk) Ignore() *ClarificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClarificationUpsertBulk) DoNothing() *ClarificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClarificationCreateBulk.OnConflict
// documentation for more info.
func (u *ClarificationUpsertBulk) Update(set func(*ClarificationUpsert)) *ClarificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClarificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *ClarificationUpsertBulk) SetContent(v string) *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ClarificationUpsertBulk) UpdateContent() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateContent()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *ClarificationUpsertBulk) SetIsPublic(v bool) *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ClarificationUpsertBulk) UpdateIsPublic() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateIsPublic()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ClarificationUpsertBulk) SetCreatedAt(v time.Time) *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ClarificationUpsertBulk) UpdateCreatedAt() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ClarificationUpsertBulk) SetUpdatedAt(v time.Time) *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ClarificationUpsertBulk) UpdateUpdatedAt() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAnswerContent sets the "answer_content" field.
func (u *ClarificationUpsertBulk) SetAnswerContent(v string) *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetAnswerContent(v)
	})
}

// UpdateAnswerContent sets the "answer_content" field to the value that was provided on create.
func (u *ClarificationUpsertBulk) UpdateAnswerContent() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateAnswerContent()
	})
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (u *ClarificationUpsertBulk) ClearAnswerContent() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.ClearAnswerContent()
	})
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (u *ClarificationUpsertBulk) SetAnswerCreatedAt(v time.Time) *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetAnswerCreatedAt(v)
	})
}

// UpdateAnswerCreatedAt sets the "answer_created_at" field to the value that was provided on create.
func (u *ClarificationUpsertBulk) UpdateAnswerCreatedAt() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateAnswerCreatedAt()
	})
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (u *ClarificationUpsertBulk) ClearAnswerCreatedAt() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.ClearAnswerCreatedAt()
	})
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (u *ClarificationUpsertBulk) SetAnswerUpdatedAt(v time.Time) *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.SetAnswerUpdatedAt(v)
	})
}

// UpdateAnswerUpdatedAt sets the "answer_updated_at" field to the value that was provided on create.
func (u *ClarificationUpsertBulk) UpdateAnswerUpdatedAt() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.UpdateAnswerUpdatedAt()
	})
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (u *ClarificationUpsertBulk) ClearAnswerUpdatedAt() *ClarificationUpsertBulk {
	return u.Update(func(s *ClarificationUpsert) {
		s.ClearAnswerUpdatedAt()
	})
}

// Exec executes the query.
func (u *ClarificationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ClarificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ClarificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClarificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
