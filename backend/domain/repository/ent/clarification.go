// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/clarification"
)

// Clarification is the model entity for the Clarification schema.
type Clarification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AnswerContent holds the value of the "answer_content" field.
	AnswerContent *string `json:"answer_content,omitempty"`
	// AnswerCreatedAt holds the value of the "answer_created_at" field.
	AnswerCreatedAt *time.Time `json:"answer_created_at,omitempty"`
	// AnswerUpdatedAt holds the value of the "answer_updated_at" field.
	AnswerUpdatedAt *time.Time `json:"answer_updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClarificationQuery when eager-loading is set.
	Edges        ClarificationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClarificationEdges holds the relations/edges for other nodes in the graph.
type ClarificationEdges struct {
	// Contest holds the value of the contest edge.
	Contest []*Contest `json:"contest,omitempty"`
	// Task holds the value of the task edge.
	Task []*Task `json:"task,omitempty"`
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// AnswerUser holds the value of the answer_user edge.
	AnswerUser []*User `json:"answer_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ContestOrErr returns the Contest value or an error if the edge
// was not loaded in eager-loading.
func (e ClarificationEdges) ContestOrErr() ([]*Contest, error) {
	if e.loadedTypes[0] {
		return e.Contest, nil
	}
	return nil, &NotLoadedError{edge: "contest"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading.
func (e ClarificationEdges) TaskOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e ClarificationEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AnswerUserOrErr returns the AnswerUser value or an error if the edge
// was not loaded in eager-loading.
func (e ClarificationEdges) AnswerUserOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.AnswerUser, nil
	}
	return nil, &NotLoadedError{edge: "answer_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Clarification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clarification.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case clarification.FieldID:
			values[i] = new(sql.NullInt64)
		case clarification.FieldContent, clarification.FieldAnswerContent:
			values[i] = new(sql.NullString)
		case clarification.FieldCreatedAt, clarification.FieldUpdatedAt, clarification.FieldAnswerCreatedAt, clarification.FieldAnswerUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Clarification fields.
func (c *Clarification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clarification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case clarification.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case clarification.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				c.IsPublic = value.Bool
			}
		case clarification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case clarification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case clarification.FieldAnswerContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer_content", values[i])
			} else if value.Valid {
				c.AnswerContent = new(string)
				*c.AnswerContent = value.String
			}
		case clarification.FieldAnswerCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field answer_created_at", values[i])
			} else if value.Valid {
				c.AnswerCreatedAt = new(time.Time)
				*c.AnswerCreatedAt = value.Time
			}
		case clarification.FieldAnswerUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field answer_updated_at", values[i])
			} else if value.Valid {
				c.AnswerUpdatedAt = new(time.Time)
				*c.AnswerUpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Clarification.
// This includes values selected through modifiers, order, etc.
func (c *Clarification) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryContest queries the "contest" edge of the Clarification entity.
func (c *Clarification) QueryContest() *ContestQuery {
	return NewClarificationClient(c.config).QueryContest(c)
}

// QueryTask queries the "task" edge of the Clarification entity.
func (c *Clarification) QueryTask() *TaskQuery {
	return NewClarificationClient(c.config).QueryTask(c)
}

// QueryUser queries the "user" edge of the Clarification entity.
func (c *Clarification) QueryUser() *UserQuery {
	return NewClarificationClient(c.config).QueryUser(c)
}

// QueryAnswerUser queries the "answer_user" edge of the Clarification entity.
func (c *Clarification) QueryAnswerUser() *UserQuery {
	return NewClarificationClient(c.config).QueryAnswerUser(c)
}

// Update returns a builder for updating this Clarification.
// Note that you need to call Clarification.Unwrap() before calling this method if this Clarification
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Clarification) Update() *ClarificationUpdateOne {
	return NewClarificationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Clarification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Clarification) Unwrap() *Clarification {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Clarification is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Clarification) String() string {
	var builder strings.Builder
	builder.WriteString("Clarification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("content=")
	builder.WriteString(c.Content)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", c.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.AnswerContent; v != nil {
		builder.WriteString("answer_content=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.AnswerCreatedAt; v != nil {
		builder.WriteString("answer_created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.AnswerUpdatedAt; v != nil {
		builder.WriteString("answer_updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Clarifications is a parsable slice of Clarification.
type Clarifications []*Clarification
