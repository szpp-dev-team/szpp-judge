// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contestusers"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// ContestUsersUpdate is the builder for updating ContestUsers entities.
type ContestUsersUpdate struct {
	config
	hooks    []Hook
	mutation *ContestUsersMutation
}

// Where appends a list predicates to the ContestUsersUpdate builder.
func (cuu *ContestUsersUpdate) Where(ps ...predicate.ContestUsers) *ContestUsersUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetRole sets the "role" field.
func (cuu *ContestUsersUpdate) SetRole(s string) *ContestUsersUpdate {
	cuu.mutation.SetRole(s)
	return cuu
}

// SetContestID sets the "contest_id" field.
func (cuu *ContestUsersUpdate) SetContestID(i int) *ContestUsersUpdate {
	cuu.mutation.SetContestID(i)
	return cuu
}

// SetUserID sets the "user_id" field.
func (cuu *ContestUsersUpdate) SetUserID(i int) *ContestUsersUpdate {
	cuu.mutation.SetUserID(i)
	return cuu
}

// SetContestsID sets the "contests" edge to the Contest entity by ID.
func (cuu *ContestUsersUpdate) SetContestsID(id int) *ContestUsersUpdate {
	cuu.mutation.SetContestsID(id)
	return cuu
}

// SetContests sets the "contests" edge to the Contest entity.
func (cuu *ContestUsersUpdate) SetContests(c *Contest) *ContestUsersUpdate {
	return cuu.SetContestsID(c.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (cuu *ContestUsersUpdate) SetUsersID(id int) *ContestUsersUpdate {
	cuu.mutation.SetUsersID(id)
	return cuu
}

// SetUsers sets the "users" edge to the User entity.
func (cuu *ContestUsersUpdate) SetUsers(u *User) *ContestUsersUpdate {
	return cuu.SetUsersID(u.ID)
}

// Mutation returns the ContestUsersMutation object of the builder.
func (cuu *ContestUsersUpdate) Mutation() *ContestUsersMutation {
	return cuu.mutation
}

// ClearContests clears the "contests" edge to the Contest entity.
func (cuu *ContestUsersUpdate) ClearContests() *ContestUsersUpdate {
	cuu.mutation.ClearContests()
	return cuu
}

// ClearUsers clears the "users" edge to the User entity.
func (cuu *ContestUsersUpdate) ClearUsers() *ContestUsersUpdate {
	cuu.mutation.ClearUsers()
	return cuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *ContestUsersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cuu.sqlSave, cuu.mutation, cuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *ContestUsersUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *ContestUsersUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *ContestUsersUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuu *ContestUsersUpdate) check() error {
	if _, ok := cuu.mutation.ContestsID(); cuu.mutation.ContestsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestUsers.contests"`)
	}
	if _, ok := cuu.mutation.UsersID(); cuu.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestUsers.users"`)
	}
	return nil
}

func (cuu *ContestUsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contestusers.Table, contestusers.Columns, sqlgraph.NewFieldSpec(contestusers.FieldID, field.TypeInt))
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuu.mutation.Role(); ok {
		_spec.SetField(contestusers.FieldRole, field.TypeString, value)
	}
	if cuu.mutation.ContestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestusers.ContestsTable,
			Columns: []string{contestusers.ContestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.ContestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestusers.ContestsTable,
			Columns: []string{contestusers.ContestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestusers.UsersTable,
			Columns: []string{contestusers.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestusers.UsersTable,
			Columns: []string{contestusers.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestusers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cuu.mutation.done = true
	return n, nil
}

// ContestUsersUpdateOne is the builder for updating a single ContestUsers entity.
type ContestUsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContestUsersMutation
}

// SetRole sets the "role" field.
func (cuuo *ContestUsersUpdateOne) SetRole(s string) *ContestUsersUpdateOne {
	cuuo.mutation.SetRole(s)
	return cuuo
}

// SetContestID sets the "contest_id" field.
func (cuuo *ContestUsersUpdateOne) SetContestID(i int) *ContestUsersUpdateOne {
	cuuo.mutation.SetContestID(i)
	return cuuo
}

// SetUserID sets the "user_id" field.
func (cuuo *ContestUsersUpdateOne) SetUserID(i int) *ContestUsersUpdateOne {
	cuuo.mutation.SetUserID(i)
	return cuuo
}

// SetContestsID sets the "contests" edge to the Contest entity by ID.
func (cuuo *ContestUsersUpdateOne) SetContestsID(id int) *ContestUsersUpdateOne {
	cuuo.mutation.SetContestsID(id)
	return cuuo
}

// SetContests sets the "contests" edge to the Contest entity.
func (cuuo *ContestUsersUpdateOne) SetContests(c *Contest) *ContestUsersUpdateOne {
	return cuuo.SetContestsID(c.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (cuuo *ContestUsersUpdateOne) SetUsersID(id int) *ContestUsersUpdateOne {
	cuuo.mutation.SetUsersID(id)
	return cuuo
}

// SetUsers sets the "users" edge to the User entity.
func (cuuo *ContestUsersUpdateOne) SetUsers(u *User) *ContestUsersUpdateOne {
	return cuuo.SetUsersID(u.ID)
}

// Mutation returns the ContestUsersMutation object of the builder.
func (cuuo *ContestUsersUpdateOne) Mutation() *ContestUsersMutation {
	return cuuo.mutation
}

// ClearContests clears the "contests" edge to the Contest entity.
func (cuuo *ContestUsersUpdateOne) ClearContests() *ContestUsersUpdateOne {
	cuuo.mutation.ClearContests()
	return cuuo
}

// ClearUsers clears the "users" edge to the User entity.
func (cuuo *ContestUsersUpdateOne) ClearUsers() *ContestUsersUpdateOne {
	cuuo.mutation.ClearUsers()
	return cuuo
}

// Where appends a list predicates to the ContestUsersUpdate builder.
func (cuuo *ContestUsersUpdateOne) Where(ps ...predicate.ContestUsers) *ContestUsersUpdateOne {
	cuuo.mutation.Where(ps...)
	return cuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *ContestUsersUpdateOne) Select(field string, fields ...string) *ContestUsersUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated ContestUsers entity.
func (cuuo *ContestUsersUpdateOne) Save(ctx context.Context) (*ContestUsers, error) {
	return withHooks(ctx, cuuo.sqlSave, cuuo.mutation, cuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *ContestUsersUpdateOne) SaveX(ctx context.Context) *ContestUsers {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *ContestUsersUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *ContestUsersUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuuo *ContestUsersUpdateOne) check() error {
	if _, ok := cuuo.mutation.ContestsID(); cuuo.mutation.ContestsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestUsers.contests"`)
	}
	if _, ok := cuuo.mutation.UsersID(); cuuo.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContestUsers.users"`)
	}
	return nil
}

func (cuuo *ContestUsersUpdateOne) sqlSave(ctx context.Context) (_node *ContestUsers, err error) {
	if err := cuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contestusers.Table, contestusers.Columns, sqlgraph.NewFieldSpec(contestusers.FieldID, field.TypeInt))
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContestUsers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contestusers.FieldID)
		for _, f := range fields {
			if !contestusers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contestusers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuuo.mutation.Role(); ok {
		_spec.SetField(contestusers.FieldRole, field.TypeString, value)
	}
	if cuuo.mutation.ContestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestusers.ContestsTable,
			Columns: []string{contestusers.ContestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.ContestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contestusers.ContestsTable,
			Columns: []string{contestusers.ContestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestusers.UsersTable,
			Columns: []string{contestusers.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestusers.UsersTable,
			Columns: []string{contestusers.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContestUsers{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestusers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuuo.mutation.done = true
	return _node, nil
}
