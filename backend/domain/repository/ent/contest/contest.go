// Code generated by ent, DO NOT EDIT.

package contest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the contest type in the database.
	Label = "contest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// EdgeSubmits holds the string denoting the submits edge name in mutations.
	EdgeSubmits = "submits"
	// EdgeContestUser holds the string denoting the contest_user edge name in mutations.
	EdgeContestUser = "contest_user"
	// EdgeContestTask holds the string denoting the contest_task edge name in mutations.
	EdgeContestTask = "contest_task"
	// Table holds the table name of the contest in the database.
	Table = "contests"
	// SubmitsTable is the table that holds the submits relation/edge.
	SubmitsTable = "submits"
	// SubmitsInverseTable is the table name for the Submit entity.
	// It exists in this package in order to avoid circular dependency with the "submit" package.
	SubmitsInverseTable = "submits"
	// SubmitsColumn is the table column denoting the submits relation/edge.
	SubmitsColumn = "contest_submits"
	// ContestUserTable is the table that holds the contest_user relation/edge.
	ContestUserTable = "contest_users"
	// ContestUserInverseTable is the table name for the ContestUser entity.
	// It exists in this package in order to avoid circular dependency with the "contestuser" package.
	ContestUserInverseTable = "contest_users"
	// ContestUserColumn is the table column denoting the contest_user relation/edge.
	ContestUserColumn = "contest_id"
	// ContestTaskTable is the table that holds the contest_task relation/edge.
	ContestTaskTable = "contest_tasks"
	// ContestTaskInverseTable is the table name for the ContestTask entity.
	// It exists in this package in order to avoid circular dependency with the "contesttask" package.
	ContestTaskInverseTable = "contest_tasks"
	// ContestTaskColumn is the table column denoting the contest_task relation/edge.
	ContestTaskColumn = "contest_id"
)

// Columns holds all SQL columns for contest fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldDescription,
	FieldStartAt,
	FieldEndAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Contest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// BySubmitsCount orders the results by submits count.
func BySubmitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubmitsStep(), opts...)
	}
}

// BySubmits orders the results by submits terms.
func BySubmits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContestUserCount orders the results by contest_user count.
func ByContestUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContestUserStep(), opts...)
	}
}

// ByContestUser orders the results by contest_user terms.
func ByContestUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContestUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContestTaskCount orders the results by contest_task count.
func ByContestTaskCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContestTaskStep(), opts...)
	}
}

// ByContestTask orders the results by contest_task terms.
func ByContestTask(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContestTaskStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSubmitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubmitsTable, SubmitsColumn),
	)
}
func newContestUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContestUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContestUserTable, ContestUserColumn),
	)
}
func newContestTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContestTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContestTaskTable, ContestTaskColumn),
	)
}
