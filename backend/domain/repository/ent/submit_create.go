// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/language"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/submit"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseresult"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// SubmitCreate is the builder for creating a Submit entity.
type SubmitCreate struct {
	config
	mutation *SubmitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (sc *SubmitCreate) SetStatus(s string) *SubmitCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SubmitCreate) SetNillableStatus(s *string) *SubmitCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetExecTime sets the "exec_time" field.
func (sc *SubmitCreate) SetExecTime(i int) *SubmitCreate {
	sc.mutation.SetExecTime(i)
	return sc
}

// SetNillableExecTime sets the "exec_time" field if the given value is not nil.
func (sc *SubmitCreate) SetNillableExecTime(i *int) *SubmitCreate {
	if i != nil {
		sc.SetExecTime(*i)
	}
	return sc
}

// SetExecMemory sets the "exec_memory" field.
func (sc *SubmitCreate) SetExecMemory(i int) *SubmitCreate {
	sc.mutation.SetExecMemory(i)
	return sc
}

// SetNillableExecMemory sets the "exec_memory" field if the given value is not nil.
func (sc *SubmitCreate) SetNillableExecMemory(i *int) *SubmitCreate {
	if i != nil {
		sc.SetExecMemory(*i)
	}
	return sc
}

// SetScore sets the "score" field.
func (sc *SubmitCreate) SetScore(i int) *SubmitCreate {
	sc.mutation.SetScore(i)
	return sc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (sc *SubmitCreate) SetNillableScore(i *int) *SubmitCreate {
	if i != nil {
		sc.SetScore(*i)
	}
	return sc
}

// SetCompileMessage sets the "compile_message" field.
func (sc *SubmitCreate) SetCompileMessage(s string) *SubmitCreate {
	sc.mutation.SetCompileMessage(s)
	return sc
}

// SetNillableCompileMessage sets the "compile_message" field if the given value is not nil.
func (sc *SubmitCreate) SetNillableCompileMessage(s *string) *SubmitCreate {
	if s != nil {
		sc.SetCompileMessage(*s)
	}
	return sc
}

// SetSubmittedAt sets the "submitted_at" field.
func (sc *SubmitCreate) SetSubmittedAt(t time.Time) *SubmitCreate {
	sc.mutation.SetSubmittedAt(t)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubmitCreate) SetCreatedAt(t time.Time) *SubmitCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubmitCreate) SetUpdatedAt(t time.Time) *SubmitCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubmitCreate) SetNillableUpdatedAt(t *time.Time) *SubmitCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubmitCreate) SetID(i int) *SubmitCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sc *SubmitCreate) SetUserID(id int) *SubmitCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *SubmitCreate) SetUser(u *User) *SubmitCreate {
	return sc.SetUserID(u.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (sc *SubmitCreate) SetTaskID(id int) *SubmitCreate {
	sc.mutation.SetTaskID(id)
	return sc
}

// SetTask sets the "task" edge to the Task entity.
func (sc *SubmitCreate) SetTask(t *Task) *SubmitCreate {
	return sc.SetTaskID(t.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (sc *SubmitCreate) SetLanguageID(id int) *SubmitCreate {
	sc.mutation.SetLanguageID(id)
	return sc
}

// SetLanguage sets the "language" edge to the Language entity.
func (sc *SubmitCreate) SetLanguage(l *Language) *SubmitCreate {
	return sc.SetLanguageID(l.ID)
}

// SetContestID sets the "contest" edge to the Contest entity by ID.
func (sc *SubmitCreate) SetContestID(id int) *SubmitCreate {
	sc.mutation.SetContestID(id)
	return sc
}

// SetNillableContestID sets the "contest" edge to the Contest entity by ID if the given value is not nil.
func (sc *SubmitCreate) SetNillableContestID(id *int) *SubmitCreate {
	if id != nil {
		sc = sc.SetContestID(*id)
	}
	return sc
}

// SetContest sets the "contest" edge to the Contest entity.
func (sc *SubmitCreate) SetContest(c *Contest) *SubmitCreate {
	return sc.SetContestID(c.ID)
}

// AddTestcaseResultIDs adds the "testcase_results" edge to the TestcaseResult entity by IDs.
func (sc *SubmitCreate) AddTestcaseResultIDs(ids ...int) *SubmitCreate {
	sc.mutation.AddTestcaseResultIDs(ids...)
	return sc
}

// AddTestcaseResults adds the "testcase_results" edges to the TestcaseResult entity.
func (sc *SubmitCreate) AddTestcaseResults(t ...*TestcaseResult) *SubmitCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTestcaseResultIDs(ids...)
}

// Mutation returns the SubmitMutation object of the builder.
func (sc *SubmitCreate) Mutation() *SubmitMutation {
	return sc.mutation
}

// Save creates the Submit in the database.
func (sc *SubmitCreate) Save(ctx context.Context) (*Submit, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubmitCreate) SaveX(ctx context.Context) *Submit {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubmitCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubmitCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubmitCreate) check() error {
	if _, ok := sc.mutation.SubmittedAt(); !ok {
		return &ValidationError{Name: "submitted_at", err: errors.New(`ent: missing required field "Submit.submitted_at"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Submit.created_at"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Submit.user"`)}
	}
	if _, ok := sc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "Submit.task"`)}
	}
	if _, ok := sc.mutation.LanguageID(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "Submit.language"`)}
	}
	return nil
}

func (sc *SubmitCreate) sqlSave(ctx context.Context) (*Submit, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubmitCreate) createSpec() (*Submit, *sqlgraph.CreateSpec) {
	var (
		_node = &Submit{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(submit.Table, sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(submit.FieldStatus, field.TypeString, value)
		_node.Status = &value
	}
	if value, ok := sc.mutation.ExecTime(); ok {
		_spec.SetField(submit.FieldExecTime, field.TypeInt, value)
		_node.ExecTime = value
	}
	if value, ok := sc.mutation.ExecMemory(); ok {
		_spec.SetField(submit.FieldExecMemory, field.TypeInt, value)
		_node.ExecMemory = value
	}
	if value, ok := sc.mutation.Score(); ok {
		_spec.SetField(submit.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if value, ok := sc.mutation.CompileMessage(); ok {
		_spec.SetField(submit.FieldCompileMessage, field.TypeString, value)
		_node.CompileMessage = value
	}
	if value, ok := sc.mutation.SubmittedAt(); ok {
		_spec.SetField(submit.FieldSubmittedAt, field.TypeTime, value)
		_node.SubmittedAt = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(submit.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(submit.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submit.UserTable,
			Columns: []string{submit.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_submits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submit.TaskTable,
			Columns: []string{submit.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_submits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submit.LanguageTable,
			Columns: []string{submit.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.language_submits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submit.ContestTable,
			Columns: []string{submit.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.contest_submits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TestcaseResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   submit.TestcaseResultsTable,
			Columns: []string{submit.TestcaseResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Submit.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubmitUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (sc *SubmitCreate) OnConflict(opts ...sql.ConflictOption) *SubmitUpsertOne {
	sc.conflict = opts
	return &SubmitUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Submit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SubmitCreate) OnConflictColumns(columns ...string) *SubmitUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SubmitUpsertOne{
		create: sc,
	}
}

type (
	// SubmitUpsertOne is the builder for "upsert"-ing
	//  one Submit node.
	SubmitUpsertOne struct {
		create *SubmitCreate
	}

	// SubmitUpsert is the "OnConflict" setter.
	SubmitUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *SubmitUpsert) SetStatus(v string) *SubmitUpsert {
	u.Set(submit.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubmitUpsert) UpdateStatus() *SubmitUpsert {
	u.SetExcluded(submit.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *SubmitUpsert) ClearStatus() *SubmitUpsert {
	u.SetNull(submit.FieldStatus)
	return u
}

// SetExecTime sets the "exec_time" field.
func (u *SubmitUpsert) SetExecTime(v int) *SubmitUpsert {
	u.Set(submit.FieldExecTime, v)
	return u
}

// UpdateExecTime sets the "exec_time" field to the value that was provided on create.
func (u *SubmitUpsert) UpdateExecTime() *SubmitUpsert {
	u.SetExcluded(submit.FieldExecTime)
	return u
}

// AddExecTime adds v to the "exec_time" field.
func (u *SubmitUpsert) AddExecTime(v int) *SubmitUpsert {
	u.Add(submit.FieldExecTime, v)
	return u
}

// ClearExecTime clears the value of the "exec_time" field.
func (u *SubmitUpsert) ClearExecTime() *SubmitUpsert {
	u.SetNull(submit.FieldExecTime)
	return u
}

// SetExecMemory sets the "exec_memory" field.
func (u *SubmitUpsert) SetExecMemory(v int) *SubmitUpsert {
	u.Set(submit.FieldExecMemory, v)
	return u
}

// UpdateExecMemory sets the "exec_memory" field to the value that was provided on create.
func (u *SubmitUpsert) UpdateExecMemory() *SubmitUpsert {
	u.SetExcluded(submit.FieldExecMemory)
	return u
}

// AddExecMemory adds v to the "exec_memory" field.
func (u *SubmitUpsert) AddExecMemory(v int) *SubmitUpsert {
	u.Add(submit.FieldExecMemory, v)
	return u
}

// ClearExecMemory clears the value of the "exec_memory" field.
func (u *SubmitUpsert) ClearExecMemory() *SubmitUpsert {
	u.SetNull(submit.FieldExecMemory)
	return u
}

// SetScore sets the "score" field.
func (u *SubmitUpsert) SetScore(v int) *SubmitUpsert {
	u.Set(submit.FieldScore, v)
	return u
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *SubmitUpsert) UpdateScore() *SubmitUpsert {
	u.SetExcluded(submit.FieldScore)
	return u
}

// AddScore adds v to the "score" field.
func (u *SubmitUpsert) AddScore(v int) *SubmitUpsert {
	u.Add(submit.FieldScore, v)
	return u
}

// ClearScore clears the value of the "score" field.
func (u *SubmitUpsert) ClearScore() *SubmitUpsert {
	u.SetNull(submit.FieldScore)
	return u
}

// SetCompileMessage sets the "compile_message" field.
func (u *SubmitUpsert) SetCompileMessage(v string) *SubmitUpsert {
	u.Set(submit.FieldCompileMessage, v)
	return u
}

// UpdateCompileMessage sets the "compile_message" field to the value that was provided on create.
func (u *SubmitUpsert) UpdateCompileMessage() *SubmitUpsert {
	u.SetExcluded(submit.FieldCompileMessage)
	return u
}

// ClearCompileMessage clears the value of the "compile_message" field.
func (u *SubmitUpsert) ClearCompileMessage() *SubmitUpsert {
	u.SetNull(submit.FieldCompileMessage)
	return u
}

// SetSubmittedAt sets the "submitted_at" field.
func (u *SubmitUpsert) SetSubmittedAt(v time.Time) *SubmitUpsert {
	u.Set(submit.FieldSubmittedAt, v)
	return u
}

// UpdateSubmittedAt sets the "submitted_at" field to the value that was provided on create.
func (u *SubmitUpsert) UpdateSubmittedAt() *SubmitUpsert {
	u.SetExcluded(submit.FieldSubmittedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubmitUpsert) SetCreatedAt(v time.Time) *SubmitUpsert {
	u.Set(submit.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubmitUpsert) UpdateCreatedAt() *SubmitUpsert {
	u.SetExcluded(submit.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubmitUpsert) SetUpdatedAt(v time.Time) *SubmitUpsert {
	u.Set(submit.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubmitUpsert) UpdateUpdatedAt() *SubmitUpsert {
	u.SetExcluded(submit.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SubmitUpsert) ClearUpdatedAt() *SubmitUpsert {
	u.SetNull(submit.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Submit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(submit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubmitUpsertOne) UpdateNewValues() *SubmitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(submit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Submit.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubmitUpsertOne) Ignore() *SubmitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubmitUpsertOne) DoNothing() *SubmitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubmitCreate.OnConflict
// documentation for more info.
func (u *SubmitUpsertOne) Update(set func(*SubmitUpsert)) *SubmitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubmitUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *SubmitUpsertOne) SetStatus(v string) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubmitUpsertOne) UpdateStatus() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SubmitUpsertOne) ClearStatus() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearStatus()
	})
}

// SetExecTime sets the "exec_time" field.
func (u *SubmitUpsertOne) SetExecTime(v int) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.SetExecTime(v)
	})
}

// AddExecTime adds v to the "exec_time" field.
func (u *SubmitUpsertOne) AddExecTime(v int) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.AddExecTime(v)
	})
}

// UpdateExecTime sets the "exec_time" field to the value that was provided on create.
func (u *SubmitUpsertOne) UpdateExecTime() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateExecTime()
	})
}

// ClearExecTime clears the value of the "exec_time" field.
func (u *SubmitUpsertOne) ClearExecTime() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearExecTime()
	})
}

// SetExecMemory sets the "exec_memory" field.
func (u *SubmitUpsertOne) SetExecMemory(v int) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.SetExecMemory(v)
	})
}

// AddExecMemory adds v to the "exec_memory" field.
func (u *SubmitUpsertOne) AddExecMemory(v int) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.AddExecMemory(v)
	})
}

// UpdateExecMemory sets the "exec_memory" field to the value that was provided on create.
func (u *SubmitUpsertOne) UpdateExecMemory() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateExecMemory()
	})
}

// ClearExecMemory clears the value of the "exec_memory" field.
func (u *SubmitUpsertOne) ClearExecMemory() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearExecMemory()
	})
}

// SetScore sets the "score" field.
func (u *SubmitUpsertOne) SetScore(v int) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.SetScore(v)
	})
}

// AddScore adds v to the "score" field.
func (u *SubmitUpsertOne) AddScore(v int) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.AddScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *SubmitUpsertOne) UpdateScore() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateScore()
	})
}

// ClearScore clears the value of the "score" field.
func (u *SubmitUpsertOne) ClearScore() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearScore()
	})
}

// SetCompileMessage sets the "compile_message" field.
func (u *SubmitUpsertOne) SetCompileMessage(v string) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.SetCompileMessage(v)
	})
}

// UpdateCompileMessage sets the "compile_message" field to the value that was provided on create.
func (u *SubmitUpsertOne) UpdateCompileMessage() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateCompileMessage()
	})
}

// ClearCompileMessage clears the value of the "compile_message" field.
func (u *SubmitUpsertOne) ClearCompileMessage() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearCompileMessage()
	})
}

// SetSubmittedAt sets the "submitted_at" field.
func (u *SubmitUpsertOne) SetSubmittedAt(v time.Time) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.SetSubmittedAt(v)
	})
}

// UpdateSubmittedAt sets the "submitted_at" field to the value that was provided on create.
func (u *SubmitUpsertOne) UpdateSubmittedAt() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateSubmittedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SubmitUpsertOne) SetCreatedAt(v time.Time) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubmitUpsertOne) UpdateCreatedAt() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubmitUpsertOne) SetUpdatedAt(v time.Time) *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubmitUpsertOne) UpdateUpdatedAt() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SubmitUpsertOne) ClearUpdatedAt() *SubmitUpsertOne {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *SubmitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubmitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubmitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubmitUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubmitUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubmitCreateBulk is the builder for creating many Submit entities in bulk.
type SubmitCreateBulk struct {
	config
	builders []*SubmitCreate
	conflict []sql.ConflictOption
}

// Save creates the Submit entities in the database.
func (scb *SubmitCreateBulk) Save(ctx context.Context) ([]*Submit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Submit, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubmitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubmitCreateBulk) SaveX(ctx context.Context) []*Submit {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubmitCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubmitCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Submit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubmitUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (scb *SubmitCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubmitUpsertBulk {
	scb.conflict = opts
	return &SubmitUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Submit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SubmitCreateBulk) OnConflictColumns(columns ...string) *SubmitUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SubmitUpsertBulk{
		create: scb,
	}
}

// SubmitUpsertBulk is the builder for "upsert"-ing
// a bulk of Submit nodes.
type SubmitUpsertBulk struct {
	create *SubmitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Submit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(submit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubmitUpsertBulk) UpdateNewValues() *SubmitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(submit.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Submit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubmitUpsertBulk) Ignore() *SubmitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubmitUpsertBulk) DoNothing() *SubmitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubmitCreateBulk.OnConflict
// documentation for more info.
func (u *SubmitUpsertBulk) Update(set func(*SubmitUpsert)) *SubmitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubmitUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *SubmitUpsertBulk) SetStatus(v string) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubmitUpsertBulk) UpdateStatus() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SubmitUpsertBulk) ClearStatus() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearStatus()
	})
}

// SetExecTime sets the "exec_time" field.
func (u *SubmitUpsertBulk) SetExecTime(v int) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.SetExecTime(v)
	})
}

// AddExecTime adds v to the "exec_time" field.
func (u *SubmitUpsertBulk) AddExecTime(v int) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.AddExecTime(v)
	})
}

// UpdateExecTime sets the "exec_time" field to the value that was provided on create.
func (u *SubmitUpsertBulk) UpdateExecTime() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateExecTime()
	})
}

// ClearExecTime clears the value of the "exec_time" field.
func (u *SubmitUpsertBulk) ClearExecTime() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearExecTime()
	})
}

// SetExecMemory sets the "exec_memory" field.
func (u *SubmitUpsertBulk) SetExecMemory(v int) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.SetExecMemory(v)
	})
}

// AddExecMemory adds v to the "exec_memory" field.
func (u *SubmitUpsertBulk) AddExecMemory(v int) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.AddExecMemory(v)
	})
}

// UpdateExecMemory sets the "exec_memory" field to the value that was provided on create.
func (u *SubmitUpsertBulk) UpdateExecMemory() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateExecMemory()
	})
}

// ClearExecMemory clears the value of the "exec_memory" field.
func (u *SubmitUpsertBulk) ClearExecMemory() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearExecMemory()
	})
}

// SetScore sets the "score" field.
func (u *SubmitUpsertBulk) SetScore(v int) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.SetScore(v)
	})
}

// AddScore adds v to the "score" field.
func (u *SubmitUpsertBulk) AddScore(v int) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.AddScore(v)
	})
}

// UpdateScore sets the "score" field to the value that was provided on create.
func (u *SubmitUpsertBulk) UpdateScore() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateScore()
	})
}

// ClearScore clears the value of the "score" field.
func (u *SubmitUpsertBulk) ClearScore() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearScore()
	})
}

// SetCompileMessage sets the "compile_message" field.
func (u *SubmitUpsertBulk) SetCompileMessage(v string) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.SetCompileMessage(v)
	})
}

// UpdateCompileMessage sets the "compile_message" field to the value that was provided on create.
func (u *SubmitUpsertBulk) UpdateCompileMessage() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateCompileMessage()
	})
}

// ClearCompileMessage clears the value of the "compile_message" field.
func (u *SubmitUpsertBulk) ClearCompileMessage() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearCompileMessage()
	})
}

// SetSubmittedAt sets the "submitted_at" field.
func (u *SubmitUpsertBulk) SetSubmittedAt(v time.Time) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.SetSubmittedAt(v)
	})
}

// UpdateSubmittedAt sets the "submitted_at" field to the value that was provided on create.
func (u *SubmitUpsertBulk) UpdateSubmittedAt() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateSubmittedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SubmitUpsertBulk) SetCreatedAt(v time.Time) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubmitUpsertBulk) UpdateCreatedAt() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubmitUpsertBulk) SetUpdatedAt(v time.Time) *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubmitUpsertBulk) UpdateUpdatedAt() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SubmitUpsertBulk) ClearUpdatedAt() *SubmitUpsertBulk {
	return u.Update(func(s *SubmitUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *SubmitUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubmitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubmitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubmitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
