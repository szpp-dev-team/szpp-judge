// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contestclarification"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// ContestClarificationUpdate is the builder for updating ContestClarification entities.
type ContestClarificationUpdate struct {
	config
	hooks    []Hook
	mutation *ContestClarificationMutation
}

// Where appends a list predicates to the ContestClarificationUpdate builder.
func (ccu *ContestClarificationUpdate) Where(ps ...predicate.ContestClarification) *ContestClarificationUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetContent sets the "content" field.
func (ccu *ContestClarificationUpdate) SetContent(s string) *ContestClarificationUpdate {
	ccu.mutation.SetContent(s)
	return ccu
}

// SetIsPublic sets the "is_public" field.
func (ccu *ContestClarificationUpdate) SetIsPublic(b bool) *ContestClarificationUpdate {
	ccu.mutation.SetIsPublic(b)
	return ccu
}

// SetCreatedAt sets the "created_at" field.
func (ccu *ContestClarificationUpdate) SetCreatedAt(t time.Time) *ContestClarificationUpdate {
	ccu.mutation.SetCreatedAt(t)
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *ContestClarificationUpdate) SetUpdatedAt(t time.Time) *ContestClarificationUpdate {
	ccu.mutation.SetUpdatedAt(t)
	return ccu
}

// SetAnswerContent sets the "answer_content" field.
func (ccu *ContestClarificationUpdate) SetAnswerContent(s string) *ContestClarificationUpdate {
	ccu.mutation.SetAnswerContent(s)
	return ccu
}

// SetNillableAnswerContent sets the "answer_content" field if the given value is not nil.
func (ccu *ContestClarificationUpdate) SetNillableAnswerContent(s *string) *ContestClarificationUpdate {
	if s != nil {
		ccu.SetAnswerContent(*s)
	}
	return ccu
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (ccu *ContestClarificationUpdate) ClearAnswerContent() *ContestClarificationUpdate {
	ccu.mutation.ClearAnswerContent()
	return ccu
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (ccu *ContestClarificationUpdate) SetAnswerCreatedAt(t time.Time) *ContestClarificationUpdate {
	ccu.mutation.SetAnswerCreatedAt(t)
	return ccu
}

// SetNillableAnswerCreatedAt sets the "answer_created_at" field if the given value is not nil.
func (ccu *ContestClarificationUpdate) SetNillableAnswerCreatedAt(t *time.Time) *ContestClarificationUpdate {
	if t != nil {
		ccu.SetAnswerCreatedAt(*t)
	}
	return ccu
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (ccu *ContestClarificationUpdate) ClearAnswerCreatedAt() *ContestClarificationUpdate {
	ccu.mutation.ClearAnswerCreatedAt()
	return ccu
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (ccu *ContestClarificationUpdate) SetAnswerUpdatedAt(t time.Time) *ContestClarificationUpdate {
	ccu.mutation.SetAnswerUpdatedAt(t)
	return ccu
}

// SetNillableAnswerUpdatedAt sets the "answer_updated_at" field if the given value is not nil.
func (ccu *ContestClarificationUpdate) SetNillableAnswerUpdatedAt(t *time.Time) *ContestClarificationUpdate {
	if t != nil {
		ccu.SetAnswerUpdatedAt(*t)
	}
	return ccu
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (ccu *ContestClarificationUpdate) ClearAnswerUpdatedAt() *ContestClarificationUpdate {
	ccu.mutation.ClearAnswerUpdatedAt()
	return ccu
}

// AddContestIDs adds the "contest" edge to the Contest entity by IDs.
func (ccu *ContestClarificationUpdate) AddContestIDs(ids ...int) *ContestClarificationUpdate {
	ccu.mutation.AddContestIDs(ids...)
	return ccu
}

// AddContest adds the "contest" edges to the Contest entity.
func (ccu *ContestClarificationUpdate) AddContest(c ...*Contest) *ContestClarificationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.AddContestIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (ccu *ContestClarificationUpdate) AddTaskIDs(ids ...int) *ContestClarificationUpdate {
	ccu.mutation.AddTaskIDs(ids...)
	return ccu
}

// AddTask adds the "task" edges to the Task entity.
func (ccu *ContestClarificationUpdate) AddTask(t ...*Task) *ContestClarificationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ccu.AddTaskIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ccu *ContestClarificationUpdate) AddUserIDs(ids ...int) *ContestClarificationUpdate {
	ccu.mutation.AddUserIDs(ids...)
	return ccu
}

// AddUser adds the "user" edges to the User entity.
func (ccu *ContestClarificationUpdate) AddUser(u ...*User) *ContestClarificationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccu.AddUserIDs(ids...)
}

// AddAnswerUserIDs adds the "answer_user" edge to the User entity by IDs.
func (ccu *ContestClarificationUpdate) AddAnswerUserIDs(ids ...int) *ContestClarificationUpdate {
	ccu.mutation.AddAnswerUserIDs(ids...)
	return ccu
}

// AddAnswerUser adds the "answer_user" edges to the User entity.
func (ccu *ContestClarificationUpdate) AddAnswerUser(u ...*User) *ContestClarificationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccu.AddAnswerUserIDs(ids...)
}

// Mutation returns the ContestClarificationMutation object of the builder.
func (ccu *ContestClarificationUpdate) Mutation() *ContestClarificationMutation {
	return ccu.mutation
}

// ClearContest clears all "contest" edges to the Contest entity.
func (ccu *ContestClarificationUpdate) ClearContest() *ContestClarificationUpdate {
	ccu.mutation.ClearContest()
	return ccu
}

// RemoveContestIDs removes the "contest" edge to Contest entities by IDs.
func (ccu *ContestClarificationUpdate) RemoveContestIDs(ids ...int) *ContestClarificationUpdate {
	ccu.mutation.RemoveContestIDs(ids...)
	return ccu
}

// RemoveContest removes "contest" edges to Contest entities.
func (ccu *ContestClarificationUpdate) RemoveContest(c ...*Contest) *ContestClarificationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.RemoveContestIDs(ids...)
}

// ClearTask clears all "task" edges to the Task entity.
func (ccu *ContestClarificationUpdate) ClearTask() *ContestClarificationUpdate {
	ccu.mutation.ClearTask()
	return ccu
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (ccu *ContestClarificationUpdate) RemoveTaskIDs(ids ...int) *ContestClarificationUpdate {
	ccu.mutation.RemoveTaskIDs(ids...)
	return ccu
}

// RemoveTask removes "task" edges to Task entities.
func (ccu *ContestClarificationUpdate) RemoveTask(t ...*Task) *ContestClarificationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ccu.RemoveTaskIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (ccu *ContestClarificationUpdate) ClearUser() *ContestClarificationUpdate {
	ccu.mutation.ClearUser()
	return ccu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ccu *ContestClarificationUpdate) RemoveUserIDs(ids ...int) *ContestClarificationUpdate {
	ccu.mutation.RemoveUserIDs(ids...)
	return ccu
}

// RemoveUser removes "user" edges to User entities.
func (ccu *ContestClarificationUpdate) RemoveUser(u ...*User) *ContestClarificationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccu.RemoveUserIDs(ids...)
}

// ClearAnswerUser clears all "answer_user" edges to the User entity.
func (ccu *ContestClarificationUpdate) ClearAnswerUser() *ContestClarificationUpdate {
	ccu.mutation.ClearAnswerUser()
	return ccu
}

// RemoveAnswerUserIDs removes the "answer_user" edge to User entities by IDs.
func (ccu *ContestClarificationUpdate) RemoveAnswerUserIDs(ids ...int) *ContestClarificationUpdate {
	ccu.mutation.RemoveAnswerUserIDs(ids...)
	return ccu
}

// RemoveAnswerUser removes "answer_user" edges to User entities.
func (ccu *ContestClarificationUpdate) RemoveAnswerUser(u ...*User) *ContestClarificationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccu.RemoveAnswerUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *ContestClarificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *ContestClarificationUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *ContestClarificationUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *ContestClarificationUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccu *ContestClarificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contestclarification.Table, contestclarification.Columns, sqlgraph.NewFieldSpec(contestclarification.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.Content(); ok {
		_spec.SetField(contestclarification.FieldContent, field.TypeString, value)
	}
	if value, ok := ccu.mutation.IsPublic(); ok {
		_spec.SetField(contestclarification.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := ccu.mutation.CreatedAt(); ok {
		_spec.SetField(contestclarification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.SetField(contestclarification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccu.mutation.AnswerContent(); ok {
		_spec.SetField(contestclarification.FieldAnswerContent, field.TypeString, value)
	}
	if ccu.mutation.AnswerContentCleared() {
		_spec.ClearField(contestclarification.FieldAnswerContent, field.TypeString)
	}
	if value, ok := ccu.mutation.AnswerCreatedAt(); ok {
		_spec.SetField(contestclarification.FieldAnswerCreatedAt, field.TypeTime, value)
	}
	if ccu.mutation.AnswerCreatedAtCleared() {
		_spec.ClearField(contestclarification.FieldAnswerCreatedAt, field.TypeTime)
	}
	if value, ok := ccu.mutation.AnswerUpdatedAt(); ok {
		_spec.SetField(contestclarification.FieldAnswerUpdatedAt, field.TypeTime, value)
	}
	if ccu.mutation.AnswerUpdatedAtCleared() {
		_spec.ClearField(contestclarification.FieldAnswerUpdatedAt, field.TypeTime)
	}
	if ccu.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.ContestTable,
			Columns: contestclarification.ContestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedContestIDs(); len(nodes) > 0 && !ccu.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.ContestTable,
			Columns: contestclarification.ContestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.ContestTable,
			Columns: contestclarification.ContestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.TaskTable,
			Columns: contestclarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !ccu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.TaskTable,
			Columns: contestclarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.TaskTable,
			Columns: contestclarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.UserTable,
			Columns: contestclarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedUserIDs(); len(nodes) > 0 && !ccu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.UserTable,
			Columns: contestclarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.UserTable,
			Columns: contestclarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.AnswerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.AnswerUserTable,
			Columns: contestclarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedAnswerUserIDs(); len(nodes) > 0 && !ccu.mutation.AnswerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.AnswerUserTable,
			Columns: contestclarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.AnswerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.AnswerUserTable,
			Columns: contestclarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestclarification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// ContestClarificationUpdateOne is the builder for updating a single ContestClarification entity.
type ContestClarificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContestClarificationMutation
}

// SetContent sets the "content" field.
func (ccuo *ContestClarificationUpdateOne) SetContent(s string) *ContestClarificationUpdateOne {
	ccuo.mutation.SetContent(s)
	return ccuo
}

// SetIsPublic sets the "is_public" field.
func (ccuo *ContestClarificationUpdateOne) SetIsPublic(b bool) *ContestClarificationUpdateOne {
	ccuo.mutation.SetIsPublic(b)
	return ccuo
}

// SetCreatedAt sets the "created_at" field.
func (ccuo *ContestClarificationUpdateOne) SetCreatedAt(t time.Time) *ContestClarificationUpdateOne {
	ccuo.mutation.SetCreatedAt(t)
	return ccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *ContestClarificationUpdateOne) SetUpdatedAt(t time.Time) *ContestClarificationUpdateOne {
	ccuo.mutation.SetUpdatedAt(t)
	return ccuo
}

// SetAnswerContent sets the "answer_content" field.
func (ccuo *ContestClarificationUpdateOne) SetAnswerContent(s string) *ContestClarificationUpdateOne {
	ccuo.mutation.SetAnswerContent(s)
	return ccuo
}

// SetNillableAnswerContent sets the "answer_content" field if the given value is not nil.
func (ccuo *ContestClarificationUpdateOne) SetNillableAnswerContent(s *string) *ContestClarificationUpdateOne {
	if s != nil {
		ccuo.SetAnswerContent(*s)
	}
	return ccuo
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (ccuo *ContestClarificationUpdateOne) ClearAnswerContent() *ContestClarificationUpdateOne {
	ccuo.mutation.ClearAnswerContent()
	return ccuo
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (ccuo *ContestClarificationUpdateOne) SetAnswerCreatedAt(t time.Time) *ContestClarificationUpdateOne {
	ccuo.mutation.SetAnswerCreatedAt(t)
	return ccuo
}

// SetNillableAnswerCreatedAt sets the "answer_created_at" field if the given value is not nil.
func (ccuo *ContestClarificationUpdateOne) SetNillableAnswerCreatedAt(t *time.Time) *ContestClarificationUpdateOne {
	if t != nil {
		ccuo.SetAnswerCreatedAt(*t)
	}
	return ccuo
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (ccuo *ContestClarificationUpdateOne) ClearAnswerCreatedAt() *ContestClarificationUpdateOne {
	ccuo.mutation.ClearAnswerCreatedAt()
	return ccuo
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (ccuo *ContestClarificationUpdateOne) SetAnswerUpdatedAt(t time.Time) *ContestClarificationUpdateOne {
	ccuo.mutation.SetAnswerUpdatedAt(t)
	return ccuo
}

// SetNillableAnswerUpdatedAt sets the "answer_updated_at" field if the given value is not nil.
func (ccuo *ContestClarificationUpdateOne) SetNillableAnswerUpdatedAt(t *time.Time) *ContestClarificationUpdateOne {
	if t != nil {
		ccuo.SetAnswerUpdatedAt(*t)
	}
	return ccuo
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (ccuo *ContestClarificationUpdateOne) ClearAnswerUpdatedAt() *ContestClarificationUpdateOne {
	ccuo.mutation.ClearAnswerUpdatedAt()
	return ccuo
}

// AddContestIDs adds the "contest" edge to the Contest entity by IDs.
func (ccuo *ContestClarificationUpdateOne) AddContestIDs(ids ...int) *ContestClarificationUpdateOne {
	ccuo.mutation.AddContestIDs(ids...)
	return ccuo
}

// AddContest adds the "contest" edges to the Contest entity.
func (ccuo *ContestClarificationUpdateOne) AddContest(c ...*Contest) *ContestClarificationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.AddContestIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (ccuo *ContestClarificationUpdateOne) AddTaskIDs(ids ...int) *ContestClarificationUpdateOne {
	ccuo.mutation.AddTaskIDs(ids...)
	return ccuo
}

// AddTask adds the "task" edges to the Task entity.
func (ccuo *ContestClarificationUpdateOne) AddTask(t ...*Task) *ContestClarificationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ccuo.AddTaskIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ccuo *ContestClarificationUpdateOne) AddUserIDs(ids ...int) *ContestClarificationUpdateOne {
	ccuo.mutation.AddUserIDs(ids...)
	return ccuo
}

// AddUser adds the "user" edges to the User entity.
func (ccuo *ContestClarificationUpdateOne) AddUser(u ...*User) *ContestClarificationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccuo.AddUserIDs(ids...)
}

// AddAnswerUserIDs adds the "answer_user" edge to the User entity by IDs.
func (ccuo *ContestClarificationUpdateOne) AddAnswerUserIDs(ids ...int) *ContestClarificationUpdateOne {
	ccuo.mutation.AddAnswerUserIDs(ids...)
	return ccuo
}

// AddAnswerUser adds the "answer_user" edges to the User entity.
func (ccuo *ContestClarificationUpdateOne) AddAnswerUser(u ...*User) *ContestClarificationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccuo.AddAnswerUserIDs(ids...)
}

// Mutation returns the ContestClarificationMutation object of the builder.
func (ccuo *ContestClarificationUpdateOne) Mutation() *ContestClarificationMutation {
	return ccuo.mutation
}

// ClearContest clears all "contest" edges to the Contest entity.
func (ccuo *ContestClarificationUpdateOne) ClearContest() *ContestClarificationUpdateOne {
	ccuo.mutation.ClearContest()
	return ccuo
}

// RemoveContestIDs removes the "contest" edge to Contest entities by IDs.
func (ccuo *ContestClarificationUpdateOne) RemoveContestIDs(ids ...int) *ContestClarificationUpdateOne {
	ccuo.mutation.RemoveContestIDs(ids...)
	return ccuo
}

// RemoveContest removes "contest" edges to Contest entities.
func (ccuo *ContestClarificationUpdateOne) RemoveContest(c ...*Contest) *ContestClarificationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.RemoveContestIDs(ids...)
}

// ClearTask clears all "task" edges to the Task entity.
func (ccuo *ContestClarificationUpdateOne) ClearTask() *ContestClarificationUpdateOne {
	ccuo.mutation.ClearTask()
	return ccuo
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (ccuo *ContestClarificationUpdateOne) RemoveTaskIDs(ids ...int) *ContestClarificationUpdateOne {
	ccuo.mutation.RemoveTaskIDs(ids...)
	return ccuo
}

// RemoveTask removes "task" edges to Task entities.
func (ccuo *ContestClarificationUpdateOne) RemoveTask(t ...*Task) *ContestClarificationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ccuo.RemoveTaskIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (ccuo *ContestClarificationUpdateOne) ClearUser() *ContestClarificationUpdateOne {
	ccuo.mutation.ClearUser()
	return ccuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ccuo *ContestClarificationUpdateOne) RemoveUserIDs(ids ...int) *ContestClarificationUpdateOne {
	ccuo.mutation.RemoveUserIDs(ids...)
	return ccuo
}

// RemoveUser removes "user" edges to User entities.
func (ccuo *ContestClarificationUpdateOne) RemoveUser(u ...*User) *ContestClarificationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccuo.RemoveUserIDs(ids...)
}

// ClearAnswerUser clears all "answer_user" edges to the User entity.
func (ccuo *ContestClarificationUpdateOne) ClearAnswerUser() *ContestClarificationUpdateOne {
	ccuo.mutation.ClearAnswerUser()
	return ccuo
}

// RemoveAnswerUserIDs removes the "answer_user" edge to User entities by IDs.
func (ccuo *ContestClarificationUpdateOne) RemoveAnswerUserIDs(ids ...int) *ContestClarificationUpdateOne {
	ccuo.mutation.RemoveAnswerUserIDs(ids...)
	return ccuo
}

// RemoveAnswerUser removes "answer_user" edges to User entities.
func (ccuo *ContestClarificationUpdateOne) RemoveAnswerUser(u ...*User) *ContestClarificationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccuo.RemoveAnswerUserIDs(ids...)
}

// Where appends a list predicates to the ContestClarificationUpdate builder.
func (ccuo *ContestClarificationUpdateOne) Where(ps ...predicate.ContestClarification) *ContestClarificationUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *ContestClarificationUpdateOne) Select(field string, fields ...string) *ContestClarificationUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated ContestClarification entity.
func (ccuo *ContestClarificationUpdateOne) Save(ctx context.Context) (*ContestClarification, error) {
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *ContestClarificationUpdateOne) SaveX(ctx context.Context) *ContestClarification {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *ContestClarificationUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *ContestClarificationUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccuo *ContestClarificationUpdateOne) sqlSave(ctx context.Context) (_node *ContestClarification, err error) {
	_spec := sqlgraph.NewUpdateSpec(contestclarification.Table, contestclarification.Columns, sqlgraph.NewFieldSpec(contestclarification.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContestClarification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contestclarification.FieldID)
		for _, f := range fields {
			if !contestclarification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contestclarification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.Content(); ok {
		_spec.SetField(contestclarification.FieldContent, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.IsPublic(); ok {
		_spec.SetField(contestclarification.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := ccuo.mutation.CreatedAt(); ok {
		_spec.SetField(contestclarification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contestclarification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ccuo.mutation.AnswerContent(); ok {
		_spec.SetField(contestclarification.FieldAnswerContent, field.TypeString, value)
	}
	if ccuo.mutation.AnswerContentCleared() {
		_spec.ClearField(contestclarification.FieldAnswerContent, field.TypeString)
	}
	if value, ok := ccuo.mutation.AnswerCreatedAt(); ok {
		_spec.SetField(contestclarification.FieldAnswerCreatedAt, field.TypeTime, value)
	}
	if ccuo.mutation.AnswerCreatedAtCleared() {
		_spec.ClearField(contestclarification.FieldAnswerCreatedAt, field.TypeTime)
	}
	if value, ok := ccuo.mutation.AnswerUpdatedAt(); ok {
		_spec.SetField(contestclarification.FieldAnswerUpdatedAt, field.TypeTime, value)
	}
	if ccuo.mutation.AnswerUpdatedAtCleared() {
		_spec.ClearField(contestclarification.FieldAnswerUpdatedAt, field.TypeTime)
	}
	if ccuo.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.ContestTable,
			Columns: contestclarification.ContestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedContestIDs(); len(nodes) > 0 && !ccuo.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.ContestTable,
			Columns: contestclarification.ContestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.ContestTable,
			Columns: contestclarification.ContestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.TaskTable,
			Columns: contestclarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !ccuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.TaskTable,
			Columns: contestclarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.TaskTable,
			Columns: contestclarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.UserTable,
			Columns: contestclarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !ccuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.UserTable,
			Columns: contestclarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.UserTable,
			Columns: contestclarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.AnswerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.AnswerUserTable,
			Columns: contestclarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedAnswerUserIDs(); len(nodes) > 0 && !ccuo.mutation.AnswerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.AnswerUserTable,
			Columns: contestclarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.AnswerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.AnswerUserTable,
			Columns: contestclarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContestClarification{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestclarification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
