// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/submit"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcase"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseresult"
)

// TestcaseResultUpdate is the builder for updating TestcaseResult entities.
type TestcaseResultUpdate struct {
	config
	hooks    []Hook
	mutation *TestcaseResultMutation
}

// Where appends a list predicates to the TestcaseResultUpdate builder.
func (tru *TestcaseResultUpdate) Where(ps ...predicate.TestcaseResult) *TestcaseResultUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetStatus sets the "status" field.
func (tru *TestcaseResultUpdate) SetStatus(s string) *TestcaseResultUpdate {
	tru.mutation.SetStatus(s)
	return tru
}

// SetExecTime sets the "exec_time" field.
func (tru *TestcaseResultUpdate) SetExecTime(i int) *TestcaseResultUpdate {
	tru.mutation.ResetExecTime()
	tru.mutation.SetExecTime(i)
	return tru
}

// AddExecTime adds i to the "exec_time" field.
func (tru *TestcaseResultUpdate) AddExecTime(i int) *TestcaseResultUpdate {
	tru.mutation.AddExecTime(i)
	return tru
}

// SetExecMemory sets the "exec_memory" field.
func (tru *TestcaseResultUpdate) SetExecMemory(i int) *TestcaseResultUpdate {
	tru.mutation.ResetExecMemory()
	tru.mutation.SetExecMemory(i)
	return tru
}

// AddExecMemory adds i to the "exec_memory" field.
func (tru *TestcaseResultUpdate) AddExecMemory(i int) *TestcaseResultUpdate {
	tru.mutation.AddExecMemory(i)
	return tru
}

// SetSubmitID sets the "submit" edge to the Submit entity by ID.
func (tru *TestcaseResultUpdate) SetSubmitID(id int) *TestcaseResultUpdate {
	tru.mutation.SetSubmitID(id)
	return tru
}

// SetSubmit sets the "submit" edge to the Submit entity.
func (tru *TestcaseResultUpdate) SetSubmit(s *Submit) *TestcaseResultUpdate {
	return tru.SetSubmitID(s.ID)
}

// SetTestcaseID sets the "testcase" edge to the Testcase entity by ID.
func (tru *TestcaseResultUpdate) SetTestcaseID(id int) *TestcaseResultUpdate {
	tru.mutation.SetTestcaseID(id)
	return tru
}

// SetTestcase sets the "testcase" edge to the Testcase entity.
func (tru *TestcaseResultUpdate) SetTestcase(t *Testcase) *TestcaseResultUpdate {
	return tru.SetTestcaseID(t.ID)
}

// Mutation returns the TestcaseResultMutation object of the builder.
func (tru *TestcaseResultUpdate) Mutation() *TestcaseResultMutation {
	return tru.mutation
}

// ClearSubmit clears the "submit" edge to the Submit entity.
func (tru *TestcaseResultUpdate) ClearSubmit() *TestcaseResultUpdate {
	tru.mutation.ClearSubmit()
	return tru
}

// ClearTestcase clears the "testcase" edge to the Testcase entity.
func (tru *TestcaseResultUpdate) ClearTestcase() *TestcaseResultUpdate {
	tru.mutation.ClearTestcase()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TestcaseResultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TestcaseResultUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TestcaseResultUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TestcaseResultUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TestcaseResultUpdate) check() error {
	if _, ok := tru.mutation.SubmitID(); tru.mutation.SubmitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestcaseResult.submit"`)
	}
	if _, ok := tru.mutation.TestcaseID(); tru.mutation.TestcaseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestcaseResult.testcase"`)
	}
	return nil
}

func (tru *TestcaseResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcaseresult.Table, testcaseresult.Columns, sqlgraph.NewFieldSpec(testcaseresult.FieldID, field.TypeInt))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.Status(); ok {
		_spec.SetField(testcaseresult.FieldStatus, field.TypeString, value)
	}
	if value, ok := tru.mutation.ExecTime(); ok {
		_spec.SetField(testcaseresult.FieldExecTime, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedExecTime(); ok {
		_spec.AddField(testcaseresult.FieldExecTime, field.TypeInt, value)
	}
	if value, ok := tru.mutation.ExecMemory(); ok {
		_spec.SetField(testcaseresult.FieldExecMemory, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedExecMemory(); ok {
		_spec.AddField(testcaseresult.FieldExecMemory, field.TypeInt, value)
	}
	if tru.mutation.SubmitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseresult.SubmitTable,
			Columns: []string{testcaseresult.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.SubmitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseresult.SubmitTable,
			Columns: []string{testcaseresult.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.TestcaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testcaseresult.TestcaseTable,
			Columns: []string{testcaseresult.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TestcaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testcaseresult.TestcaseTable,
			Columns: []string{testcaseresult.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcaseresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TestcaseResultUpdateOne is the builder for updating a single TestcaseResult entity.
type TestcaseResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestcaseResultMutation
}

// SetStatus sets the "status" field.
func (truo *TestcaseResultUpdateOne) SetStatus(s string) *TestcaseResultUpdateOne {
	truo.mutation.SetStatus(s)
	return truo
}

// SetExecTime sets the "exec_time" field.
func (truo *TestcaseResultUpdateOne) SetExecTime(i int) *TestcaseResultUpdateOne {
	truo.mutation.ResetExecTime()
	truo.mutation.SetExecTime(i)
	return truo
}

// AddExecTime adds i to the "exec_time" field.
func (truo *TestcaseResultUpdateOne) AddExecTime(i int) *TestcaseResultUpdateOne {
	truo.mutation.AddExecTime(i)
	return truo
}

// SetExecMemory sets the "exec_memory" field.
func (truo *TestcaseResultUpdateOne) SetExecMemory(i int) *TestcaseResultUpdateOne {
	truo.mutation.ResetExecMemory()
	truo.mutation.SetExecMemory(i)
	return truo
}

// AddExecMemory adds i to the "exec_memory" field.
func (truo *TestcaseResultUpdateOne) AddExecMemory(i int) *TestcaseResultUpdateOne {
	truo.mutation.AddExecMemory(i)
	return truo
}

// SetSubmitID sets the "submit" edge to the Submit entity by ID.
func (truo *TestcaseResultUpdateOne) SetSubmitID(id int) *TestcaseResultUpdateOne {
	truo.mutation.SetSubmitID(id)
	return truo
}

// SetSubmit sets the "submit" edge to the Submit entity.
func (truo *TestcaseResultUpdateOne) SetSubmit(s *Submit) *TestcaseResultUpdateOne {
	return truo.SetSubmitID(s.ID)
}

// SetTestcaseID sets the "testcase" edge to the Testcase entity by ID.
func (truo *TestcaseResultUpdateOne) SetTestcaseID(id int) *TestcaseResultUpdateOne {
	truo.mutation.SetTestcaseID(id)
	return truo
}

// SetTestcase sets the "testcase" edge to the Testcase entity.
func (truo *TestcaseResultUpdateOne) SetTestcase(t *Testcase) *TestcaseResultUpdateOne {
	return truo.SetTestcaseID(t.ID)
}

// Mutation returns the TestcaseResultMutation object of the builder.
func (truo *TestcaseResultUpdateOne) Mutation() *TestcaseResultMutation {
	return truo.mutation
}

// ClearSubmit clears the "submit" edge to the Submit entity.
func (truo *TestcaseResultUpdateOne) ClearSubmit() *TestcaseResultUpdateOne {
	truo.mutation.ClearSubmit()
	return truo
}

// ClearTestcase clears the "testcase" edge to the Testcase entity.
func (truo *TestcaseResultUpdateOne) ClearTestcase() *TestcaseResultUpdateOne {
	truo.mutation.ClearTestcase()
	return truo
}

// Where appends a list predicates to the TestcaseResultUpdate builder.
func (truo *TestcaseResultUpdateOne) Where(ps ...predicate.TestcaseResult) *TestcaseResultUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TestcaseResultUpdateOne) Select(field string, fields ...string) *TestcaseResultUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TestcaseResult entity.
func (truo *TestcaseResultUpdateOne) Save(ctx context.Context) (*TestcaseResult, error) {
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TestcaseResultUpdateOne) SaveX(ctx context.Context) *TestcaseResult {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TestcaseResultUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TestcaseResultUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TestcaseResultUpdateOne) check() error {
	if _, ok := truo.mutation.SubmitID(); truo.mutation.SubmitCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestcaseResult.submit"`)
	}
	if _, ok := truo.mutation.TestcaseID(); truo.mutation.TestcaseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TestcaseResult.testcase"`)
	}
	return nil
}

func (truo *TestcaseResultUpdateOne) sqlSave(ctx context.Context) (_node *TestcaseResult, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcaseresult.Table, testcaseresult.Columns, sqlgraph.NewFieldSpec(testcaseresult.FieldID, field.TypeInt))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestcaseResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcaseresult.FieldID)
		for _, f := range fields {
			if !testcaseresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testcaseresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.Status(); ok {
		_spec.SetField(testcaseresult.FieldStatus, field.TypeString, value)
	}
	if value, ok := truo.mutation.ExecTime(); ok {
		_spec.SetField(testcaseresult.FieldExecTime, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedExecTime(); ok {
		_spec.AddField(testcaseresult.FieldExecTime, field.TypeInt, value)
	}
	if value, ok := truo.mutation.ExecMemory(); ok {
		_spec.SetField(testcaseresult.FieldExecMemory, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedExecMemory(); ok {
		_spec.AddField(testcaseresult.FieldExecMemory, field.TypeInt, value)
	}
	if truo.mutation.SubmitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseresult.SubmitTable,
			Columns: []string{testcaseresult.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.SubmitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcaseresult.SubmitTable,
			Columns: []string{testcaseresult.SubmitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.TestcaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testcaseresult.TestcaseTable,
			Columns: []string{testcaseresult.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TestcaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testcaseresult.TestcaseTable,
			Columns: []string{testcaseresult.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestcaseResult{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcaseresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
