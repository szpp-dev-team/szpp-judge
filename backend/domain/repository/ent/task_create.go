// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcaseset"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (tc *TaskCreate) SetTitle(s string) *TaskCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetStatement sets the "statement" field.
func (tc *TaskCreate) SetStatement(s string) *TaskCreate {
	tc.mutation.SetStatement(s)
	return tc
}

// SetDifficulty sets the "difficulty" field.
func (tc *TaskCreate) SetDifficulty(s string) *TaskCreate {
	tc.mutation.SetDifficulty(s)
	return tc
}

// SetExecTimeLimit sets the "exec_time_limit" field.
func (tc *TaskCreate) SetExecTimeLimit(u uint) *TaskCreate {
	tc.mutation.SetExecTimeLimit(u)
	return tc
}

// SetExecMemoryLimit sets the "exec_memory_limit" field.
func (tc *TaskCreate) SetExecMemoryLimit(u uint) *TaskCreate {
	tc.mutation.SetExecMemoryLimit(u)
	return tc
}

// SetCaseInsensitive sets the "case_insensitive" field.
func (tc *TaskCreate) SetCaseInsensitive(b bool) *TaskCreate {
	tc.mutation.SetCaseInsensitive(b)
	return tc
}

// SetNdigits sets the "ndigits" field.
func (tc *TaskCreate) SetNdigits(u uint) *TaskCreate {
	tc.mutation.SetNdigits(u)
	return tc
}

// SetJudgeCodePath sets the "judge_code_path" field.
func (tc *TaskCreate) SetJudgeCodePath(s string) *TaskCreate {
	tc.mutation.SetJudgeCodePath(s)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(i int) *TaskCreate {
	tc.mutation.SetID(i)
	return tc
}

// AddTestcaseSetIDs adds the "testcase_sets" edge to the TestcaseSet entity by IDs.
func (tc *TaskCreate) AddTestcaseSetIDs(ids ...int) *TaskCreate {
	tc.mutation.AddTestcaseSetIDs(ids...)
	return tc
}

// AddTestcaseSets adds the "testcase_sets" edges to the TestcaseSet entity.
func (tc *TaskCreate) AddTestcaseSets(t ...*TestcaseSet) *TaskCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTestcaseSetIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (tc *TaskCreate) SetUsersID(id int) *TaskCreate {
	tc.mutation.SetUsersID(id)
	return tc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableUsersID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetUsersID(*id)
	}
	return tc
}

// SetUsers sets the "users" edge to the User entity.
func (tc *TaskCreate) SetUsers(u *User) *TaskCreate {
	return tc.SetUsersID(u.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Task.title"`)}
	}
	if _, ok := tc.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "Task.statement"`)}
	}
	if _, ok := tc.mutation.Difficulty(); !ok {
		return &ValidationError{Name: "difficulty", err: errors.New(`ent: missing required field "Task.difficulty"`)}
	}
	if _, ok := tc.mutation.ExecTimeLimit(); !ok {
		return &ValidationError{Name: "exec_time_limit", err: errors.New(`ent: missing required field "Task.exec_time_limit"`)}
	}
	if _, ok := tc.mutation.ExecMemoryLimit(); !ok {
		return &ValidationError{Name: "exec_memory_limit", err: errors.New(`ent: missing required field "Task.exec_memory_limit"`)}
	}
	if _, ok := tc.mutation.CaseInsensitive(); !ok {
		return &ValidationError{Name: "case_insensitive", err: errors.New(`ent: missing required field "Task.case_insensitive"`)}
	}
	if _, ok := tc.mutation.Ndigits(); !ok {
		return &ValidationError{Name: "ndigits", err: errors.New(`ent: missing required field "Task.ndigits"`)}
	}
	if _, ok := tc.mutation.JudgeCodePath(); !ok {
		return &ValidationError{Name: "judge_code_path", err: errors.New(`ent: missing required field "Task.judge_code_path"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Statement(); ok {
		_spec.SetField(task.FieldStatement, field.TypeString, value)
		_node.Statement = value
	}
	if value, ok := tc.mutation.Difficulty(); ok {
		_spec.SetField(task.FieldDifficulty, field.TypeString, value)
		_node.Difficulty = value
	}
	if value, ok := tc.mutation.ExecTimeLimit(); ok {
		_spec.SetField(task.FieldExecTimeLimit, field.TypeUint, value)
		_node.ExecTimeLimit = value
	}
	if value, ok := tc.mutation.ExecMemoryLimit(); ok {
		_spec.SetField(task.FieldExecMemoryLimit, field.TypeUint, value)
		_node.ExecMemoryLimit = value
	}
	if value, ok := tc.mutation.CaseInsensitive(); ok {
		_spec.SetField(task.FieldCaseInsensitive, field.TypeBool, value)
		_node.CaseInsensitive = value
	}
	if value, ok := tc.mutation.Ndigits(); ok {
		_spec.SetField(task.FieldNdigits, field.TypeUint, value)
		_node.Ndigits = value
	}
	if value, ok := tc.mutation.JudgeCodePath(); ok {
		_spec.SetField(task.FieldJudgeCodePath, field.TypeString, value)
		_node.JudgeCodePath = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := tc.mutation.TestcaseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TestcaseSetsTable,
			Columns: []string{task.TestcaseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcaseset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: []string{task.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
