// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/clarification"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// ClarificationUpdate is the builder for updating Clarification entities.
type ClarificationUpdate struct {
	config
	hooks    []Hook
	mutation *ClarificationMutation
}

// Where appends a list predicates to the ClarificationUpdate builder.
func (cu *ClarificationUpdate) Where(ps ...predicate.Clarification) *ClarificationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetContent sets the "content" field.
func (cu *ClarificationUpdate) SetContent(s string) *ClarificationUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetIsPublic sets the "is_public" field.
func (cu *ClarificationUpdate) SetIsPublic(b bool) *ClarificationUpdate {
	cu.mutation.SetIsPublic(b)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ClarificationUpdate) SetCreatedAt(t time.Time) *ClarificationUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ClarificationUpdate) SetUpdatedAt(t time.Time) *ClarificationUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetAnswerContent sets the "answer_content" field.
func (cu *ClarificationUpdate) SetAnswerContent(s string) *ClarificationUpdate {
	cu.mutation.SetAnswerContent(s)
	return cu
}

// SetNillableAnswerContent sets the "answer_content" field if the given value is not nil.
func (cu *ClarificationUpdate) SetNillableAnswerContent(s *string) *ClarificationUpdate {
	if s != nil {
		cu.SetAnswerContent(*s)
	}
	return cu
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (cu *ClarificationUpdate) ClearAnswerContent() *ClarificationUpdate {
	cu.mutation.ClearAnswerContent()
	return cu
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (cu *ClarificationUpdate) SetAnswerCreatedAt(t time.Time) *ClarificationUpdate {
	cu.mutation.SetAnswerCreatedAt(t)
	return cu
}

// SetNillableAnswerCreatedAt sets the "answer_created_at" field if the given value is not nil.
func (cu *ClarificationUpdate) SetNillableAnswerCreatedAt(t *time.Time) *ClarificationUpdate {
	if t != nil {
		cu.SetAnswerCreatedAt(*t)
	}
	return cu
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (cu *ClarificationUpdate) ClearAnswerCreatedAt() *ClarificationUpdate {
	cu.mutation.ClearAnswerCreatedAt()
	return cu
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (cu *ClarificationUpdate) SetAnswerUpdatedAt(t time.Time) *ClarificationUpdate {
	cu.mutation.SetAnswerUpdatedAt(t)
	return cu
}

// SetNillableAnswerUpdatedAt sets the "answer_updated_at" field if the given value is not nil.
func (cu *ClarificationUpdate) SetNillableAnswerUpdatedAt(t *time.Time) *ClarificationUpdate {
	if t != nil {
		cu.SetAnswerUpdatedAt(*t)
	}
	return cu
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (cu *ClarificationUpdate) ClearAnswerUpdatedAt() *ClarificationUpdate {
	cu.mutation.ClearAnswerUpdatedAt()
	return cu
}

// SetContestID sets the "contest" edge to the Contest entity by ID.
func (cu *ClarificationUpdate) SetContestID(id int) *ClarificationUpdate {
	cu.mutation.SetContestID(id)
	return cu
}

// SetContest sets the "contest" edge to the Contest entity.
func (cu *ClarificationUpdate) SetContest(c *Contest) *ClarificationUpdate {
	return cu.SetContestID(c.ID)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (cu *ClarificationUpdate) AddTaskIDs(ids ...int) *ClarificationUpdate {
	cu.mutation.AddTaskIDs(ids...)
	return cu
}

// AddTask adds the "task" edges to the Task entity.
func (cu *ClarificationUpdate) AddTask(t ...*Task) *ClarificationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTaskIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (cu *ClarificationUpdate) AddUserIDs(ids ...int) *ClarificationUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUser adds the "user" edges to the User entity.
func (cu *ClarificationUpdate) AddUser(u ...*User) *ClarificationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// AddAnswerUserIDs adds the "answer_user" edge to the User entity by IDs.
func (cu *ClarificationUpdate) AddAnswerUserIDs(ids ...int) *ClarificationUpdate {
	cu.mutation.AddAnswerUserIDs(ids...)
	return cu
}

// AddAnswerUser adds the "answer_user" edges to the User entity.
func (cu *ClarificationUpdate) AddAnswerUser(u ...*User) *ClarificationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddAnswerUserIDs(ids...)
}

// Mutation returns the ClarificationMutation object of the builder.
func (cu *ClarificationUpdate) Mutation() *ClarificationMutation {
	return cu.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (cu *ClarificationUpdate) ClearContest() *ClarificationUpdate {
	cu.mutation.ClearContest()
	return cu
}

// ClearTask clears all "task" edges to the Task entity.
func (cu *ClarificationUpdate) ClearTask() *ClarificationUpdate {
	cu.mutation.ClearTask()
	return cu
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (cu *ClarificationUpdate) RemoveTaskIDs(ids ...int) *ClarificationUpdate {
	cu.mutation.RemoveTaskIDs(ids...)
	return cu
}

// RemoveTask removes "task" edges to Task entities.
func (cu *ClarificationUpdate) RemoveTask(t ...*Task) *ClarificationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTaskIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (cu *ClarificationUpdate) ClearUser() *ClarificationUpdate {
	cu.mutation.ClearUser()
	return cu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (cu *ClarificationUpdate) RemoveUserIDs(ids ...int) *ClarificationUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUser removes "user" edges to User entities.
func (cu *ClarificationUpdate) RemoveUser(u ...*User) *ClarificationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// ClearAnswerUser clears all "answer_user" edges to the User entity.
func (cu *ClarificationUpdate) ClearAnswerUser() *ClarificationUpdate {
	cu.mutation.ClearAnswerUser()
	return cu
}

// RemoveAnswerUserIDs removes the "answer_user" edge to User entities by IDs.
func (cu *ClarificationUpdate) RemoveAnswerUserIDs(ids ...int) *ClarificationUpdate {
	cu.mutation.RemoveAnswerUserIDs(ids...)
	return cu
}

// RemoveAnswerUser removes "answer_user" edges to User entities.
func (cu *ClarificationUpdate) RemoveAnswerUser(u ...*User) *ClarificationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveAnswerUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClarificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClarificationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClarificationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClarificationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClarificationUpdate) check() error {
	if _, ok := cu.mutation.ContestID(); cu.mutation.ContestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Clarification.contest"`)
	}
	return nil
}

func (cu *ClarificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(clarification.Table, clarification.Columns, sqlgraph.NewFieldSpec(clarification.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(clarification.FieldContent, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsPublic(); ok {
		_spec.SetField(clarification.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(clarification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(clarification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.AnswerContent(); ok {
		_spec.SetField(clarification.FieldAnswerContent, field.TypeString, value)
	}
	if cu.mutation.AnswerContentCleared() {
		_spec.ClearField(clarification.FieldAnswerContent, field.TypeString)
	}
	if value, ok := cu.mutation.AnswerCreatedAt(); ok {
		_spec.SetField(clarification.FieldAnswerCreatedAt, field.TypeTime, value)
	}
	if cu.mutation.AnswerCreatedAtCleared() {
		_spec.ClearField(clarification.FieldAnswerCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.AnswerUpdatedAt(); ok {
		_spec.SetField(clarification.FieldAnswerUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.AnswerUpdatedAtCleared() {
		_spec.ClearField(clarification.FieldAnswerUpdatedAt, field.TypeTime)
	}
	if cu.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clarification.ContestTable,
			Columns: []string{clarification.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clarification.ContestTable,
			Columns: []string{clarification.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.TaskTable,
			Columns: clarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !cu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.TaskTable,
			Columns: clarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.TaskTable,
			Columns: clarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.UserTable,
			Columns: clarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUserIDs(); len(nodes) > 0 && !cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.UserTable,
			Columns: clarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.UserTable,
			Columns: clarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AnswerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.AnswerUserTable,
			Columns: clarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAnswerUserIDs(); len(nodes) > 0 && !cu.mutation.AnswerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.AnswerUserTable,
			Columns: clarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AnswerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.AnswerUserTable,
			Columns: clarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clarification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClarificationUpdateOne is the builder for updating a single Clarification entity.
type ClarificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClarificationMutation
}

// SetContent sets the "content" field.
func (cuo *ClarificationUpdateOne) SetContent(s string) *ClarificationUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetIsPublic sets the "is_public" field.
func (cuo *ClarificationUpdateOne) SetIsPublic(b bool) *ClarificationUpdateOne {
	cuo.mutation.SetIsPublic(b)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ClarificationUpdateOne) SetCreatedAt(t time.Time) *ClarificationUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ClarificationUpdateOne) SetUpdatedAt(t time.Time) *ClarificationUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetAnswerContent sets the "answer_content" field.
func (cuo *ClarificationUpdateOne) SetAnswerContent(s string) *ClarificationUpdateOne {
	cuo.mutation.SetAnswerContent(s)
	return cuo
}

// SetNillableAnswerContent sets the "answer_content" field if the given value is not nil.
func (cuo *ClarificationUpdateOne) SetNillableAnswerContent(s *string) *ClarificationUpdateOne {
	if s != nil {
		cuo.SetAnswerContent(*s)
	}
	return cuo
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (cuo *ClarificationUpdateOne) ClearAnswerContent() *ClarificationUpdateOne {
	cuo.mutation.ClearAnswerContent()
	return cuo
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (cuo *ClarificationUpdateOne) SetAnswerCreatedAt(t time.Time) *ClarificationUpdateOne {
	cuo.mutation.SetAnswerCreatedAt(t)
	return cuo
}

// SetNillableAnswerCreatedAt sets the "answer_created_at" field if the given value is not nil.
func (cuo *ClarificationUpdateOne) SetNillableAnswerCreatedAt(t *time.Time) *ClarificationUpdateOne {
	if t != nil {
		cuo.SetAnswerCreatedAt(*t)
	}
	return cuo
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (cuo *ClarificationUpdateOne) ClearAnswerCreatedAt() *ClarificationUpdateOne {
	cuo.mutation.ClearAnswerCreatedAt()
	return cuo
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (cuo *ClarificationUpdateOne) SetAnswerUpdatedAt(t time.Time) *ClarificationUpdateOne {
	cuo.mutation.SetAnswerUpdatedAt(t)
	return cuo
}

// SetNillableAnswerUpdatedAt sets the "answer_updated_at" field if the given value is not nil.
func (cuo *ClarificationUpdateOne) SetNillableAnswerUpdatedAt(t *time.Time) *ClarificationUpdateOne {
	if t != nil {
		cuo.SetAnswerUpdatedAt(*t)
	}
	return cuo
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (cuo *ClarificationUpdateOne) ClearAnswerUpdatedAt() *ClarificationUpdateOne {
	cuo.mutation.ClearAnswerUpdatedAt()
	return cuo
}

// SetContestID sets the "contest" edge to the Contest entity by ID.
func (cuo *ClarificationUpdateOne) SetContestID(id int) *ClarificationUpdateOne {
	cuo.mutation.SetContestID(id)
	return cuo
}

// SetContest sets the "contest" edge to the Contest entity.
func (cuo *ClarificationUpdateOne) SetContest(c *Contest) *ClarificationUpdateOne {
	return cuo.SetContestID(c.ID)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (cuo *ClarificationUpdateOne) AddTaskIDs(ids ...int) *ClarificationUpdateOne {
	cuo.mutation.AddTaskIDs(ids...)
	return cuo
}

// AddTask adds the "task" edges to the Task entity.
func (cuo *ClarificationUpdateOne) AddTask(t ...*Task) *ClarificationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTaskIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (cuo *ClarificationUpdateOne) AddUserIDs(ids ...int) *ClarificationUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUser adds the "user" edges to the User entity.
func (cuo *ClarificationUpdateOne) AddUser(u ...*User) *ClarificationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// AddAnswerUserIDs adds the "answer_user" edge to the User entity by IDs.
func (cuo *ClarificationUpdateOne) AddAnswerUserIDs(ids ...int) *ClarificationUpdateOne {
	cuo.mutation.AddAnswerUserIDs(ids...)
	return cuo
}

// AddAnswerUser adds the "answer_user" edges to the User entity.
func (cuo *ClarificationUpdateOne) AddAnswerUser(u ...*User) *ClarificationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddAnswerUserIDs(ids...)
}

// Mutation returns the ClarificationMutation object of the builder.
func (cuo *ClarificationUpdateOne) Mutation() *ClarificationMutation {
	return cuo.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (cuo *ClarificationUpdateOne) ClearContest() *ClarificationUpdateOne {
	cuo.mutation.ClearContest()
	return cuo
}

// ClearTask clears all "task" edges to the Task entity.
func (cuo *ClarificationUpdateOne) ClearTask() *ClarificationUpdateOne {
	cuo.mutation.ClearTask()
	return cuo
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (cuo *ClarificationUpdateOne) RemoveTaskIDs(ids ...int) *ClarificationUpdateOne {
	cuo.mutation.RemoveTaskIDs(ids...)
	return cuo
}

// RemoveTask removes "task" edges to Task entities.
func (cuo *ClarificationUpdateOne) RemoveTask(t ...*Task) *ClarificationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTaskIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (cuo *ClarificationUpdateOne) ClearUser() *ClarificationUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (cuo *ClarificationUpdateOne) RemoveUserIDs(ids ...int) *ClarificationUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUser removes "user" edges to User entities.
func (cuo *ClarificationUpdateOne) RemoveUser(u ...*User) *ClarificationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// ClearAnswerUser clears all "answer_user" edges to the User entity.
func (cuo *ClarificationUpdateOne) ClearAnswerUser() *ClarificationUpdateOne {
	cuo.mutation.ClearAnswerUser()
	return cuo
}

// RemoveAnswerUserIDs removes the "answer_user" edge to User entities by IDs.
func (cuo *ClarificationUpdateOne) RemoveAnswerUserIDs(ids ...int) *ClarificationUpdateOne {
	cuo.mutation.RemoveAnswerUserIDs(ids...)
	return cuo
}

// RemoveAnswerUser removes "answer_user" edges to User entities.
func (cuo *ClarificationUpdateOne) RemoveAnswerUser(u ...*User) *ClarificationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveAnswerUserIDs(ids...)
}

// Where appends a list predicates to the ClarificationUpdate builder.
func (cuo *ClarificationUpdateOne) Where(ps ...predicate.Clarification) *ClarificationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClarificationUpdateOne) Select(field string, fields ...string) *ClarificationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Clarification entity.
func (cuo *ClarificationUpdateOne) Save(ctx context.Context) (*Clarification, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClarificationUpdateOne) SaveX(ctx context.Context) *Clarification {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClarificationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClarificationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClarificationUpdateOne) check() error {
	if _, ok := cuo.mutation.ContestID(); cuo.mutation.ContestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Clarification.contest"`)
	}
	return nil
}

func (cuo *ClarificationUpdateOne) sqlSave(ctx context.Context) (_node *Clarification, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clarification.Table, clarification.Columns, sqlgraph.NewFieldSpec(clarification.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Clarification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clarification.FieldID)
		for _, f := range fields {
			if !clarification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clarification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(clarification.FieldContent, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsPublic(); ok {
		_spec.SetField(clarification.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(clarification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(clarification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.AnswerContent(); ok {
		_spec.SetField(clarification.FieldAnswerContent, field.TypeString, value)
	}
	if cuo.mutation.AnswerContentCleared() {
		_spec.ClearField(clarification.FieldAnswerContent, field.TypeString)
	}
	if value, ok := cuo.mutation.AnswerCreatedAt(); ok {
		_spec.SetField(clarification.FieldAnswerCreatedAt, field.TypeTime, value)
	}
	if cuo.mutation.AnswerCreatedAtCleared() {
		_spec.ClearField(clarification.FieldAnswerCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.AnswerUpdatedAt(); ok {
		_spec.SetField(clarification.FieldAnswerUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.AnswerUpdatedAtCleared() {
		_spec.ClearField(clarification.FieldAnswerUpdatedAt, field.TypeTime)
	}
	if cuo.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clarification.ContestTable,
			Columns: []string{clarification.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clarification.ContestTable,
			Columns: []string{clarification.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.TaskTable,
			Columns: clarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !cuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.TaskTable,
			Columns: clarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.TaskTable,
			Columns: clarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.UserTable,
			Columns: clarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.UserTable,
			Columns: clarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.UserTable,
			Columns: clarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AnswerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.AnswerUserTable,
			Columns: clarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAnswerUserIDs(); len(nodes) > 0 && !cuo.mutation.AnswerUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.AnswerUserTable,
			Columns: clarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AnswerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   clarification.AnswerUserTable,
			Columns: clarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Clarification{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clarification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
