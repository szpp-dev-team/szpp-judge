// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contest"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/contestclarification"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/user"
)

// ContestClarificationCreate is the builder for creating a ContestClarification entity.
type ContestClarificationCreate struct {
	config
	mutation *ContestClarificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetContent sets the "content" field.
func (ccc *ContestClarificationCreate) SetContent(s string) *ContestClarificationCreate {
	ccc.mutation.SetContent(s)
	return ccc
}

// SetIsPublic sets the "is_public" field.
func (ccc *ContestClarificationCreate) SetIsPublic(b bool) *ContestClarificationCreate {
	ccc.mutation.SetIsPublic(b)
	return ccc
}

// SetCreatedAt sets the "created_at" field.
func (ccc *ContestClarificationCreate) SetCreatedAt(t time.Time) *ContestClarificationCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *ContestClarificationCreate) SetUpdatedAt(t time.Time) *ContestClarificationCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetAnswerContent sets the "answer_content" field.
func (ccc *ContestClarificationCreate) SetAnswerContent(s string) *ContestClarificationCreate {
	ccc.mutation.SetAnswerContent(s)
	return ccc
}

// SetNillableAnswerContent sets the "answer_content" field if the given value is not nil.
func (ccc *ContestClarificationCreate) SetNillableAnswerContent(s *string) *ContestClarificationCreate {
	if s != nil {
		ccc.SetAnswerContent(*s)
	}
	return ccc
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (ccc *ContestClarificationCreate) SetAnswerCreatedAt(t time.Time) *ContestClarificationCreate {
	ccc.mutation.SetAnswerCreatedAt(t)
	return ccc
}

// SetNillableAnswerCreatedAt sets the "answer_created_at" field if the given value is not nil.
func (ccc *ContestClarificationCreate) SetNillableAnswerCreatedAt(t *time.Time) *ContestClarificationCreate {
	if t != nil {
		ccc.SetAnswerCreatedAt(*t)
	}
	return ccc
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (ccc *ContestClarificationCreate) SetAnswerUpdatedAt(t time.Time) *ContestClarificationCreate {
	ccc.mutation.SetAnswerUpdatedAt(t)
	return ccc
}

// SetNillableAnswerUpdatedAt sets the "answer_updated_at" field if the given value is not nil.
func (ccc *ContestClarificationCreate) SetNillableAnswerUpdatedAt(t *time.Time) *ContestClarificationCreate {
	if t != nil {
		ccc.SetAnswerUpdatedAt(*t)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *ContestClarificationCreate) SetID(i int) *ContestClarificationCreate {
	ccc.mutation.SetID(i)
	return ccc
}

// AddContestIDs adds the "contest" edge to the Contest entity by IDs.
func (ccc *ContestClarificationCreate) AddContestIDs(ids ...int) *ContestClarificationCreate {
	ccc.mutation.AddContestIDs(ids...)
	return ccc
}

// AddContest adds the "contest" edges to the Contest entity.
func (ccc *ContestClarificationCreate) AddContest(c ...*Contest) *ContestClarificationCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccc.AddContestIDs(ids...)
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (ccc *ContestClarificationCreate) AddTaskIDs(ids ...int) *ContestClarificationCreate {
	ccc.mutation.AddTaskIDs(ids...)
	return ccc
}

// AddTask adds the "task" edges to the Task entity.
func (ccc *ContestClarificationCreate) AddTask(t ...*Task) *ContestClarificationCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ccc.AddTaskIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ccc *ContestClarificationCreate) AddUserIDs(ids ...int) *ContestClarificationCreate {
	ccc.mutation.AddUserIDs(ids...)
	return ccc
}

// AddUser adds the "user" edges to the User entity.
func (ccc *ContestClarificationCreate) AddUser(u ...*User) *ContestClarificationCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccc.AddUserIDs(ids...)
}

// AddAnswerUserIDs adds the "answer_user" edge to the User entity by IDs.
func (ccc *ContestClarificationCreate) AddAnswerUserIDs(ids ...int) *ContestClarificationCreate {
	ccc.mutation.AddAnswerUserIDs(ids...)
	return ccc
}

// AddAnswerUser adds the "answer_user" edges to the User entity.
func (ccc *ContestClarificationCreate) AddAnswerUser(u ...*User) *ContestClarificationCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccc.AddAnswerUserIDs(ids...)
}

// Mutation returns the ContestClarificationMutation object of the builder.
func (ccc *ContestClarificationCreate) Mutation() *ContestClarificationMutation {
	return ccc.mutation
}

// Save creates the ContestClarification in the database.
func (ccc *ContestClarificationCreate) Save(ctx context.Context) (*ContestClarification, error) {
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *ContestClarificationCreate) SaveX(ctx context.Context) *ContestClarification {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *ContestClarificationCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *ContestClarificationCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *ContestClarificationCreate) check() error {
	if _, ok := ccc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "ContestClarification.content"`)}
	}
	if _, ok := ccc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "ContestClarification.is_public"`)}
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ContestClarification.created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ContestClarification.updated_at"`)}
	}
	if len(ccc.mutation.ContestIDs()) == 0 {
		return &ValidationError{Name: "contest", err: errors.New(`ent: missing required edge "ContestClarification.contest"`)}
	}
	if len(ccc.mutation.TaskIDs()) == 0 {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "ContestClarification.task"`)}
	}
	if len(ccc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ContestClarification.user"`)}
	}
	if len(ccc.mutation.AnswerUserIDs()) == 0 {
		return &ValidationError{Name: "answer_user", err: errors.New(`ent: missing required edge "ContestClarification.answer_user"`)}
	}
	return nil
}

func (ccc *ContestClarificationCreate) sqlSave(ctx context.Context) (*ContestClarification, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *ContestClarificationCreate) createSpec() (*ContestClarification, *sqlgraph.CreateSpec) {
	var (
		_node = &ContestClarification{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(contestclarification.Table, sqlgraph.NewFieldSpec(contestclarification.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ccc.conflict
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.Content(); ok {
		_spec.SetField(contestclarification.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := ccc.mutation.IsPublic(); ok {
		_spec.SetField(contestclarification.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(contestclarification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(contestclarification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.AnswerContent(); ok {
		_spec.SetField(contestclarification.FieldAnswerContent, field.TypeString, value)
		_node.AnswerContent = &value
	}
	if value, ok := ccc.mutation.AnswerCreatedAt(); ok {
		_spec.SetField(contestclarification.FieldAnswerCreatedAt, field.TypeTime, value)
		_node.AnswerCreatedAt = &value
	}
	if value, ok := ccc.mutation.AnswerUpdatedAt(); ok {
		_spec.SetField(contestclarification.FieldAnswerUpdatedAt, field.TypeTime, value)
		_node.AnswerUpdatedAt = &value
	}
	if nodes := ccc.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.ContestTable,
			Columns: contestclarification.ContestPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.TaskTable,
			Columns: contestclarification.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.UserTable,
			Columns: contestclarification.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.AnswerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contestclarification.AnswerUserTable,
			Columns: contestclarification.AnswerUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ContestClarification.Create().
//		SetContent(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContestClarificationUpsert) {
//			SetContent(v+v).
//		}).
//		Exec(ctx)
func (ccc *ContestClarificationCreate) OnConflict(opts ...sql.ConflictOption) *ContestClarificationUpsertOne {
	ccc.conflict = opts
	return &ContestClarificationUpsertOne{
		create: ccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ContestClarification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccc *ContestClarificationCreate) OnConflictColumns(columns ...string) *ContestClarificationUpsertOne {
	ccc.conflict = append(ccc.conflict, sql.ConflictColumns(columns...))
	return &ContestClarificationUpsertOne{
		create: ccc,
	}
}

type (
	// ContestClarificationUpsertOne is the builder for "upsert"-ing
	//  one ContestClarification node.
	ContestClarificationUpsertOne struct {
		create *ContestClarificationCreate
	}

	// ContestClarificationUpsert is the "OnConflict" setter.
	ContestClarificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetContent sets the "content" field.
func (u *ContestClarificationUpsert) SetContent(v string) *ContestClarificationUpsert {
	u.Set(contestclarification.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ContestClarificationUpsert) UpdateContent() *ContestClarificationUpsert {
	u.SetExcluded(contestclarification.FieldContent)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *ContestClarificationUpsert) SetIsPublic(v bool) *ContestClarificationUpsert {
	u.Set(contestclarification.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ContestClarificationUpsert) UpdateIsPublic() *ContestClarificationUpsert {
	u.SetExcluded(contestclarification.FieldIsPublic)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ContestClarificationUpsert) SetCreatedAt(v time.Time) *ContestClarificationUpsert {
	u.Set(contestclarification.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContestClarificationUpsert) UpdateCreatedAt() *ContestClarificationUpsert {
	u.SetExcluded(contestclarification.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContestClarificationUpsert) SetUpdatedAt(v time.Time) *ContestClarificationUpsert {
	u.Set(contestclarification.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContestClarificationUpsert) UpdateUpdatedAt() *ContestClarificationUpsert {
	u.SetExcluded(contestclarification.FieldUpdatedAt)
	return u
}

// SetAnswerContent sets the "answer_content" field.
func (u *ContestClarificationUpsert) SetAnswerContent(v string) *ContestClarificationUpsert {
	u.Set(contestclarification.FieldAnswerContent, v)
	return u
}

// UpdateAnswerContent sets the "answer_content" field to the value that was provided on create.
func (u *ContestClarificationUpsert) UpdateAnswerContent() *ContestClarificationUpsert {
	u.SetExcluded(contestclarification.FieldAnswerContent)
	return u
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (u *ContestClarificationUpsert) ClearAnswerContent() *ContestClarificationUpsert {
	u.SetNull(contestclarification.FieldAnswerContent)
	return u
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (u *ContestClarificationUpsert) SetAnswerCreatedAt(v time.Time) *ContestClarificationUpsert {
	u.Set(contestclarification.FieldAnswerCreatedAt, v)
	return u
}

// UpdateAnswerCreatedAt sets the "answer_created_at" field to the value that was provided on create.
func (u *ContestClarificationUpsert) UpdateAnswerCreatedAt() *ContestClarificationUpsert {
	u.SetExcluded(contestclarification.FieldAnswerCreatedAt)
	return u
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (u *ContestClarificationUpsert) ClearAnswerCreatedAt() *ContestClarificationUpsert {
	u.SetNull(contestclarification.FieldAnswerCreatedAt)
	return u
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (u *ContestClarificationUpsert) SetAnswerUpdatedAt(v time.Time) *ContestClarificationUpsert {
	u.Set(contestclarification.FieldAnswerUpdatedAt, v)
	return u
}

// UpdateAnswerUpdatedAt sets the "answer_updated_at" field to the value that was provided on create.
func (u *ContestClarificationUpsert) UpdateAnswerUpdatedAt() *ContestClarificationUpsert {
	u.SetExcluded(contestclarification.FieldAnswerUpdatedAt)
	return u
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (u *ContestClarificationUpsert) ClearAnswerUpdatedAt() *ContestClarificationUpsert {
	u.SetNull(contestclarification.FieldAnswerUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ContestClarification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contestclarification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContestClarificationUpsertOne) UpdateNewValues() *ContestClarificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(contestclarification.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ContestClarification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContestClarificationUpsertOne) Ignore() *ContestClarificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContestClarificationUpsertOne) DoNothing() *ContestClarificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContestClarificationCreate.OnConflict
// documentation for more info.
func (u *ContestClarificationUpsertOne) Update(set func(*ContestClarificationUpsert)) *ContestClarificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContestClarificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *ContestClarificationUpsertOne) SetContent(v string) *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ContestClarificationUpsertOne) UpdateContent() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateContent()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *ContestClarificationUpsertOne) SetIsPublic(v bool) *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ContestClarificationUpsertOne) UpdateIsPublic() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateIsPublic()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ContestClarificationUpsertOne) SetCreatedAt(v time.Time) *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContestClarificationUpsertOne) UpdateCreatedAt() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContestClarificationUpsertOne) SetUpdatedAt(v time.Time) *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContestClarificationUpsertOne) UpdateUpdatedAt() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAnswerContent sets the "answer_content" field.
func (u *ContestClarificationUpsertOne) SetAnswerContent(v string) *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetAnswerContent(v)
	})
}

// UpdateAnswerContent sets the "answer_content" field to the value that was provided on create.
func (u *ContestClarificationUpsertOne) UpdateAnswerContent() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateAnswerContent()
	})
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (u *ContestClarificationUpsertOne) ClearAnswerContent() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.ClearAnswerContent()
	})
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (u *ContestClarificationUpsertOne) SetAnswerCreatedAt(v time.Time) *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetAnswerCreatedAt(v)
	})
}

// UpdateAnswerCreatedAt sets the "answer_created_at" field to the value that was provided on create.
func (u *ContestClarificationUpsertOne) UpdateAnswerCreatedAt() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateAnswerCreatedAt()
	})
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (u *ContestClarificationUpsertOne) ClearAnswerCreatedAt() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.ClearAnswerCreatedAt()
	})
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (u *ContestClarificationUpsertOne) SetAnswerUpdatedAt(v time.Time) *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetAnswerUpdatedAt(v)
	})
}

// UpdateAnswerUpdatedAt sets the "answer_updated_at" field to the value that was provided on create.
func (u *ContestClarificationUpsertOne) UpdateAnswerUpdatedAt() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateAnswerUpdatedAt()
	})
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (u *ContestClarificationUpsertOne) ClearAnswerUpdatedAt() *ContestClarificationUpsertOne {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.ClearAnswerUpdatedAt()
	})
}

// Exec executes the query.
func (u *ContestClarificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContestClarificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContestClarificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContestClarificationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContestClarificationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContestClarificationCreateBulk is the builder for creating many ContestClarification entities in bulk.
type ContestClarificationCreateBulk struct {
	config
	builders []*ContestClarificationCreate
	conflict []sql.ConflictOption
}

// Save creates the ContestClarification entities in the database.
func (cccb *ContestClarificationCreateBulk) Save(ctx context.Context) ([]*ContestClarification, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*ContestClarification, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContestClarificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *ContestClarificationCreateBulk) SaveX(ctx context.Context) []*ContestClarification {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *ContestClarificationCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *ContestClarificationCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ContestClarification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContestClarificationUpsert) {
//			SetContent(v+v).
//		}).
//		Exec(ctx)
func (cccb *ContestClarificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContestClarificationUpsertBulk {
	cccb.conflict = opts
	return &ContestClarificationUpsertBulk{
		create: cccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ContestClarification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cccb *ContestClarificationCreateBulk) OnConflictColumns(columns ...string) *ContestClarificationUpsertBulk {
	cccb.conflict = append(cccb.conflict, sql.ConflictColumns(columns...))
	return &ContestClarificationUpsertBulk{
		create: cccb,
	}
}

// ContestClarificationUpsertBulk is the builder for "upsert"-ing
// a bulk of ContestClarification nodes.
type ContestClarificationUpsertBulk struct {
	create *ContestClarificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ContestClarification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contestclarification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContestClarificationUpsertBulk) UpdateNewValues() *ContestClarificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(contestclarification.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ContestClarification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContestClarificationUpsertBulk) Ignore() *ContestClarificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContestClarificationUpsertBulk) DoNothing() *ContestClarificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContestClarificationCreateBulk.OnConflict
// documentation for more info.
func (u *ContestClarificationUpsertBulk) Update(set func(*ContestClarificationUpsert)) *ContestClarificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContestClarificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetContent sets the "content" field.
func (u *ContestClarificationUpsertBulk) SetContent(v string) *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ContestClarificationUpsertBulk) UpdateContent() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateContent()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *ContestClarificationUpsertBulk) SetIsPublic(v bool) *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ContestClarificationUpsertBulk) UpdateIsPublic() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateIsPublic()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ContestClarificationUpsertBulk) SetCreatedAt(v time.Time) *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContestClarificationUpsertBulk) UpdateCreatedAt() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContestClarificationUpsertBulk) SetUpdatedAt(v time.Time) *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContestClarificationUpsertBulk) UpdateUpdatedAt() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAnswerContent sets the "answer_content" field.
func (u *ContestClarificationUpsertBulk) SetAnswerContent(v string) *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetAnswerContent(v)
	})
}

// UpdateAnswerContent sets the "answer_content" field to the value that was provided on create.
func (u *ContestClarificationUpsertBulk) UpdateAnswerContent() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateAnswerContent()
	})
}

// ClearAnswerContent clears the value of the "answer_content" field.
func (u *ContestClarificationUpsertBulk) ClearAnswerContent() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.ClearAnswerContent()
	})
}

// SetAnswerCreatedAt sets the "answer_created_at" field.
func (u *ContestClarificationUpsertBulk) SetAnswerCreatedAt(v time.Time) *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetAnswerCreatedAt(v)
	})
}

// UpdateAnswerCreatedAt sets the "answer_created_at" field to the value that was provided on create.
func (u *ContestClarificationUpsertBulk) UpdateAnswerCreatedAt() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateAnswerCreatedAt()
	})
}

// ClearAnswerCreatedAt clears the value of the "answer_created_at" field.
func (u *ContestClarificationUpsertBulk) ClearAnswerCreatedAt() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.ClearAnswerCreatedAt()
	})
}

// SetAnswerUpdatedAt sets the "answer_updated_at" field.
func (u *ContestClarificationUpsertBulk) SetAnswerUpdatedAt(v time.Time) *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.SetAnswerUpdatedAt(v)
	})
}

// UpdateAnswerUpdatedAt sets the "answer_updated_at" field to the value that was provided on create.
func (u *ContestClarificationUpsertBulk) UpdateAnswerUpdatedAt() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.UpdateAnswerUpdatedAt()
	})
}

// ClearAnswerUpdatedAt clears the value of the "answer_updated_at" field.
func (u *ContestClarificationUpsertBulk) ClearAnswerUpdatedAt() *ContestClarificationUpsertBulk {
	return u.Update(func(s *ContestClarificationUpsert) {
		s.ClearAnswerUpdatedAt()
	})
}

// Exec executes the query.
func (u *ContestClarificationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContestClarificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContestClarificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContestClarificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
