// Code generated by ent, DO NOT EDIT.

package submit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldStatus, v))
}

// ExecTime applies equality check predicate on the "exec_time" field. It's identical to ExecTimeEQ.
func ExecTime(v int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldExecTime, v))
}

// ExecMemory applies equality check predicate on the "exec_memory" field. It's identical to ExecMemoryEQ.
func ExecMemory(v int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldExecMemory, v))
}

// SubmittedAt applies equality check predicate on the "submitted_at" field. It's identical to SubmittedAtEQ.
func SubmittedAt(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldSubmittedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Submit {
	return predicate.Submit(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Submit {
	return predicate.Submit(sql.FieldContainsFold(FieldStatus, v))
}

// ExecTimeEQ applies the EQ predicate on the "exec_time" field.
func ExecTimeEQ(v int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldExecTime, v))
}

// ExecTimeNEQ applies the NEQ predicate on the "exec_time" field.
func ExecTimeNEQ(v int) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldExecTime, v))
}

// ExecTimeIn applies the In predicate on the "exec_time" field.
func ExecTimeIn(vs ...int) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldExecTime, vs...))
}

// ExecTimeNotIn applies the NotIn predicate on the "exec_time" field.
func ExecTimeNotIn(vs ...int) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldExecTime, vs...))
}

// ExecTimeGT applies the GT predicate on the "exec_time" field.
func ExecTimeGT(v int) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldExecTime, v))
}

// ExecTimeGTE applies the GTE predicate on the "exec_time" field.
func ExecTimeGTE(v int) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldExecTime, v))
}

// ExecTimeLT applies the LT predicate on the "exec_time" field.
func ExecTimeLT(v int) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldExecTime, v))
}

// ExecTimeLTE applies the LTE predicate on the "exec_time" field.
func ExecTimeLTE(v int) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldExecTime, v))
}

// ExecTimeIsNil applies the IsNil predicate on the "exec_time" field.
func ExecTimeIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldExecTime))
}

// ExecTimeNotNil applies the NotNil predicate on the "exec_time" field.
func ExecTimeNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldExecTime))
}

// ExecMemoryEQ applies the EQ predicate on the "exec_memory" field.
func ExecMemoryEQ(v int) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldExecMemory, v))
}

// ExecMemoryNEQ applies the NEQ predicate on the "exec_memory" field.
func ExecMemoryNEQ(v int) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldExecMemory, v))
}

// ExecMemoryIn applies the In predicate on the "exec_memory" field.
func ExecMemoryIn(vs ...int) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldExecMemory, vs...))
}

// ExecMemoryNotIn applies the NotIn predicate on the "exec_memory" field.
func ExecMemoryNotIn(vs ...int) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldExecMemory, vs...))
}

// ExecMemoryGT applies the GT predicate on the "exec_memory" field.
func ExecMemoryGT(v int) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldExecMemory, v))
}

// ExecMemoryGTE applies the GTE predicate on the "exec_memory" field.
func ExecMemoryGTE(v int) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldExecMemory, v))
}

// ExecMemoryLT applies the LT predicate on the "exec_memory" field.
func ExecMemoryLT(v int) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldExecMemory, v))
}

// ExecMemoryLTE applies the LTE predicate on the "exec_memory" field.
func ExecMemoryLTE(v int) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldExecMemory, v))
}

// ExecMemoryIsNil applies the IsNil predicate on the "exec_memory" field.
func ExecMemoryIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldExecMemory))
}

// ExecMemoryNotNil applies the NotNil predicate on the "exec_memory" field.
func ExecMemoryNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldExecMemory))
}

// SubmittedAtEQ applies the EQ predicate on the "submitted_at" field.
func SubmittedAtEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldSubmittedAt, v))
}

// SubmittedAtNEQ applies the NEQ predicate on the "submitted_at" field.
func SubmittedAtNEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldSubmittedAt, v))
}

// SubmittedAtIn applies the In predicate on the "submitted_at" field.
func SubmittedAtIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldSubmittedAt, vs...))
}

// SubmittedAtNotIn applies the NotIn predicate on the "submitted_at" field.
func SubmittedAtNotIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldSubmittedAt, vs...))
}

// SubmittedAtGT applies the GT predicate on the "submitted_at" field.
func SubmittedAtGT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldSubmittedAt, v))
}

// SubmittedAtGTE applies the GTE predicate on the "submitted_at" field.
func SubmittedAtGTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldSubmittedAt, v))
}

// SubmittedAtLT applies the LT predicate on the "submitted_at" field.
func SubmittedAtLT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldSubmittedAt, v))
}

// SubmittedAtLTE applies the LTE predicate on the "submitted_at" field.
func SubmittedAtLTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldSubmittedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Submit {
	return predicate.Submit(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Submit {
	return predicate.Submit(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Submit {
	return predicate.Submit(sql.FieldNotNull(FieldUpdatedAt))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestcaseResults applies the HasEdge predicate on the "testcase_results" edge.
func HasTestcaseResults() predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestcaseResultsTable, TestcaseResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestcaseResultsWith applies the HasEdge predicate on the "testcase_results" edge with a given conditions (other predicates).
func HasTestcaseResultsWith(preds ...predicate.TestcaseResult) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		step := newTestcaseResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Submit) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Submit) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Submit) predicate.Submit {
	return predicate.Submit(func(s *sql.Selector) {
		p(s.Not())
	})
}
