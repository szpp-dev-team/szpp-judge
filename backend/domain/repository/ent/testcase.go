// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/task"
	"github.com/szpp-dev-team/szpp-judge/backend/domain/repository/ent/testcase"
)

// Testcase is the model entity for the Testcase schema.
type Testcase struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestcaseQuery when eager-loading is set.
	Edges          TestcaseEdges `json:"edges"`
	task_testcases *int
	selectValues   sql.SelectValues
}

// TestcaseEdges holds the relations/edges for other nodes in the graph.
type TestcaseEdges struct {
	// TestcaseSets holds the value of the testcase_sets edge.
	TestcaseSets []*TestcaseSet `json:"testcase_sets,omitempty"`
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TestcaseSetsOrErr returns the TestcaseSets value or an error if the edge
// was not loaded in eager-loading.
func (e TestcaseEdges) TestcaseSetsOrErr() ([]*TestcaseSet, error) {
	if e.loadedTypes[0] {
		return e.TestcaseSets, nil
	}
	return nil, &NotLoadedError{edge: "testcase_sets"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestcaseEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Testcase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testcase.FieldID:
			values[i] = new(sql.NullInt64)
		case testcase.FieldName, testcase.FieldDescription:
			values[i] = new(sql.NullString)
		case testcase.FieldCreatedAt, testcase.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case testcase.ForeignKeys[0]: // task_testcases
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Testcase fields.
func (t *Testcase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testcase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case testcase.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case testcase.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = new(string)
				*t.Description = value.String
			}
		case testcase.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case testcase.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = new(time.Time)
				*t.UpdatedAt = value.Time
			}
		case testcase.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_testcases", value)
			} else if value.Valid {
				t.task_testcases = new(int)
				*t.task_testcases = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Testcase.
// This includes values selected through modifiers, order, etc.
func (t *Testcase) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTestcaseSets queries the "testcase_sets" edge of the Testcase entity.
func (t *Testcase) QueryTestcaseSets() *TestcaseSetQuery {
	return NewTestcaseClient(t.config).QueryTestcaseSets(t)
}

// QueryTask queries the "task" edge of the Testcase entity.
func (t *Testcase) QueryTask() *TaskQuery {
	return NewTestcaseClient(t.config).QueryTask(t)
}

// Update returns a builder for updating this Testcase.
// Note that you need to call Testcase.Unwrap() before calling this method if this Testcase
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Testcase) Update() *TestcaseUpdateOne {
	return NewTestcaseClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Testcase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Testcase) Unwrap() *Testcase {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Testcase is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Testcase) String() string {
	var builder strings.Builder
	builder.WriteString("Testcase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	if v := t.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Testcases is a parsable slice of Testcase.
type Testcases []*Testcase
