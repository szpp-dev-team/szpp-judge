// @generated by protoc-gen-connect-query v0.5.1 with parameter "target=ts,import_extension=none"
// @generated from file backend/v1/task_service.proto (package backend.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateTaskRequest, CreateTaskResponse, GetTaskRequest, GetTaskResponse, GetTestcaseSetsRequest, GetTestcaseSetsResponse, SyncTestcaseSetsRequest, SyncTestcaseSetsResponse, UpdateTaskRequest, UpdateTaskResponse } from "./task_service_pb";
import { MethodKind } from "@bufbuild/protobuf";
import { createQueryService, createUnaryHooks } from "@connectrpc/connect-query";

export const typeName = "backend.v1.TaskService";

/**
 * @generated from service backend.v1.TaskService
 */
export const TaskService = {
  typeName: "backend.v1.TaskService",
  methods: {
    /**
     * Task を作成する
     *
     * @generated from rpc backend.v1.TaskService.CreateTask
     */
    createTask: {
      name: "CreateTask",
      I: CreateTaskRequest,
      O: CreateTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * 指定された Task を取得する
     *
     * @generated from rpc backend.v1.TaskService.GetTask
     */
    getTask: {
      name: "GetTask",
      I: GetTaskRequest,
      O: GetTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Task を更新する
     *
     * @generated from rpc backend.v1.TaskService.UpdateTask
     */
    updateTask: {
      name: "UpdateTask",
      I: UpdateTaskRequest,
      O: UpdateTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TestcaseSet の一覧を取得する。また、Testcase の一覧も取得する。
     * contestant によるリクエストの場合は sample のみ取得する。
     *
     * @generated from rpc backend.v1.TaskService.GetTestcaseSets
     */
    getTestcaseSets: {
      name: "GetTestcaseSets",
      I: GetTestcaseSetsRequest,
      O: GetTestcaseSetsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * TestcaseSet を同期する。全てのリソースは上書きされ、このリクエストに含まれないリソースは削除される。
     *
     * @generated from rpc backend.v1.TaskService.SyncTestcaseSets
     */
    syncTestcaseSets: {
      name: "SyncTestcaseSets",
      I: SyncTestcaseSetsRequest,
      O: SyncTestcaseSetsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

const $queryService = createQueryService({  service: TaskService,});

/**
 * Task を作成する
 *
 * @generated from rpc backend.v1.TaskService.CreateTask
 */
export const createTask = {   ...$queryService.createTask,  ...createUnaryHooks($queryService.createTask)};

/**
 * 指定された Task を取得する
 *
 * @generated from rpc backend.v1.TaskService.GetTask
 */
export const getTask = {   ...$queryService.getTask,  ...createUnaryHooks($queryService.getTask)};

/**
 * Task を更新する
 *
 * @generated from rpc backend.v1.TaskService.UpdateTask
 */
export const updateTask = {   ...$queryService.updateTask,  ...createUnaryHooks($queryService.updateTask)};

/**
 * TestcaseSet の一覧を取得する。また、Testcase の一覧も取得する。
 * contestant によるリクエストの場合は sample のみ取得する。
 *
 * @generated from rpc backend.v1.TaskService.GetTestcaseSets
 */
export const getTestcaseSets = {   ...$queryService.getTestcaseSets,  ...createUnaryHooks($queryService.getTestcaseSets)};

/**
 * TestcaseSet を同期する。全てのリソースは上書きされ、このリクエストに含まれないリソースは削除される。
 *
 * @generated from rpc backend.v1.TaskService.SyncTestcaseSets
 */
export const syncTestcaseSets = {   ...$queryService.syncTestcaseSets,  ...createUnaryHooks($queryService.syncTestcaseSets)};
