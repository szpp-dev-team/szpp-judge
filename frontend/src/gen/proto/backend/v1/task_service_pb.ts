// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file backend/v1/task_service.proto (package backend.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { MutationTask, MutationTestcase, MutationTestcaseSet, Task, Testcase, TestcaseSet } from "./task_resources_pb";

/**
 * @generated from message backend.v1.CreateTaskRequest
 */
export class CreateTaskRequest extends Message<CreateTaskRequest> {
  /**
   * @generated from field: backend.v1.MutationTask task = 1;
   */
  task?: MutationTask;

  constructor(data?: PartialMessage<CreateTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: MutationTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined, b: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined): boolean {
    return proto3.util.equals(CreateTaskRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.CreateTaskResponse
 */
export class CreateTaskResponse extends Message<CreateTaskResponse> {
  /**
   * @generated from field: backend.v1.Task task = 1;
   */
  task?: Task;

  constructor(data?: PartialMessage<CreateTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined, b: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined): boolean {
    return proto3.util.equals(CreateTaskResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetTaskRequest
 */
export class GetTaskRequest extends Message<GetTaskRequest> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  constructor(data?: PartialMessage<GetTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTaskRequest | PlainMessage<GetTaskRequest> | undefined, b: GetTaskRequest | PlainMessage<GetTaskRequest> | undefined): boolean {
    return proto3.util.equals(GetTaskRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetTaskResponse
 */
export class GetTaskResponse extends Message<GetTaskResponse> {
  /**
   * @generated from field: backend.v1.Task task = 1;
   */
  task?: Task;

  constructor(data?: PartialMessage<GetTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTaskResponse {
    return new GetTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTaskResponse {
    return new GetTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTaskResponse {
    return new GetTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTaskResponse | PlainMessage<GetTaskResponse> | undefined, b: GetTaskResponse | PlainMessage<GetTaskResponse> | undefined): boolean {
    return proto3.util.equals(GetTaskResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateTaskRequest
 */
export class UpdateTaskRequest extends Message<UpdateTaskRequest> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  /**
   * @generated from field: backend.v1.MutationTask task = 2;
   */
  task?: MutationTask;

  constructor(data?: PartialMessage<UpdateTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "task", kind: "message", T: MutationTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTaskRequest {
    return new UpdateTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTaskRequest {
    return new UpdateTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTaskRequest {
    return new UpdateTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTaskRequest | PlainMessage<UpdateTaskRequest> | undefined, b: UpdateTaskRequest | PlainMessage<UpdateTaskRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTaskRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateTaskResponse
 */
export class UpdateTaskResponse extends Message<UpdateTaskResponse> {
  /**
   * @generated from field: backend.v1.Task task = 1;
   */
  task?: Task;

  constructor(data?: PartialMessage<UpdateTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTaskResponse {
    return new UpdateTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTaskResponse {
    return new UpdateTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTaskResponse {
    return new UpdateTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTaskResponse | PlainMessage<UpdateTaskResponse> | undefined, b: UpdateTaskResponse | PlainMessage<UpdateTaskResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTaskResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetTestcaseSetsRequest
 */
export class GetTestcaseSetsRequest extends Message<GetTestcaseSetsRequest> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  constructor(data?: PartialMessage<GetTestcaseSetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetTestcaseSetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTestcaseSetsRequest {
    return new GetTestcaseSetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTestcaseSetsRequest {
    return new GetTestcaseSetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTestcaseSetsRequest {
    return new GetTestcaseSetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTestcaseSetsRequest | PlainMessage<GetTestcaseSetsRequest> | undefined, b: GetTestcaseSetsRequest | PlainMessage<GetTestcaseSetsRequest> | undefined): boolean {
    return proto3.util.equals(GetTestcaseSetsRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetTestcaseSetsResponse
 */
export class GetTestcaseSetsResponse extends Message<GetTestcaseSetsResponse> {
  /**
   * @generated from field: repeated backend.v1.TestcaseSet testcase_sets = 1;
   */
  testcaseSets: TestcaseSet[] = [];

  /**
   * @generated from field: repeated backend.v1.Testcase testcases = 2;
   */
  testcases: Testcase[] = [];

  constructor(data?: PartialMessage<GetTestcaseSetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetTestcaseSetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "testcase_sets", kind: "message", T: TestcaseSet, repeated: true },
    { no: 2, name: "testcases", kind: "message", T: Testcase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTestcaseSetsResponse {
    return new GetTestcaseSetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTestcaseSetsResponse {
    return new GetTestcaseSetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTestcaseSetsResponse {
    return new GetTestcaseSetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTestcaseSetsResponse | PlainMessage<GetTestcaseSetsResponse> | undefined, b: GetTestcaseSetsResponse | PlainMessage<GetTestcaseSetsResponse> | undefined): boolean {
    return proto3.util.equals(GetTestcaseSetsResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.SyncTestcaseSetsRequest
 */
export class SyncTestcaseSetsRequest extends Message<SyncTestcaseSetsRequest> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  /**
   * @generated from field: repeated backend.v1.MutationTestcaseSet testcase_sets = 2;
   */
  testcaseSets: MutationTestcaseSet[] = [];

  /**
   * @generated from field: repeated backend.v1.MutationTestcase testcases = 3;
   */
  testcases: MutationTestcase[] = [];

  constructor(data?: PartialMessage<SyncTestcaseSetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.SyncTestcaseSetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "testcase_sets", kind: "message", T: MutationTestcaseSet, repeated: true },
    { no: 3, name: "testcases", kind: "message", T: MutationTestcase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncTestcaseSetsRequest {
    return new SyncTestcaseSetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncTestcaseSetsRequest {
    return new SyncTestcaseSetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncTestcaseSetsRequest {
    return new SyncTestcaseSetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncTestcaseSetsRequest | PlainMessage<SyncTestcaseSetsRequest> | undefined, b: SyncTestcaseSetsRequest | PlainMessage<SyncTestcaseSetsRequest> | undefined): boolean {
    return proto3.util.equals(SyncTestcaseSetsRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.SyncTestcaseSetsResponse
 */
export class SyncTestcaseSetsResponse extends Message<SyncTestcaseSetsResponse> {
  /**
   * @generated from field: repeated backend.v1.TestcaseSet testcase_sets = 1;
   */
  testcaseSets: TestcaseSet[] = [];

  /**
   * @generated from field: repeated backend.v1.Testcase testcases = 2;
   */
  testcases: Testcase[] = [];

  constructor(data?: PartialMessage<SyncTestcaseSetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.SyncTestcaseSetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "testcase_sets", kind: "message", T: TestcaseSet, repeated: true },
    { no: 2, name: "testcases", kind: "message", T: Testcase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncTestcaseSetsResponse {
    return new SyncTestcaseSetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncTestcaseSetsResponse {
    return new SyncTestcaseSetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncTestcaseSetsResponse {
    return new SyncTestcaseSetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncTestcaseSetsResponse | PlainMessage<SyncTestcaseSetsResponse> | undefined, b: SyncTestcaseSetsResponse | PlainMessage<SyncTestcaseSetsResponse> | undefined): boolean {
    return proto3.util.equals(SyncTestcaseSetsResponse, a, b);
  }
}

