// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file backend/v1/task_service.proto (package backend.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Clarification, Clarification_Answer, JudgeProgress, MutationTask, MutationTestcase, MutationTestcaseSet, SubmissionDetail, SubmissionSummary, Task, Testcase, TestcaseSet } from "./task_resources_pb";

/**
 * @generated from message backend.v1.CreateTaskRequest
 */
export class CreateTaskRequest extends Message<CreateTaskRequest> {
  /**
   * @generated from field: backend.v1.MutationTask task = 1;
   */
  task?: MutationTask;

  constructor(data?: PartialMessage<CreateTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: MutationTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined, b: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined): boolean {
    return proto3.util.equals(CreateTaskRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.CreateTaskResponse
 */
export class CreateTaskResponse extends Message<CreateTaskResponse> {
  /**
   * @generated from field: backend.v1.Task task = 1;
   */
  task?: Task;

  constructor(data?: PartialMessage<CreateTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined, b: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined): boolean {
    return proto3.util.equals(CreateTaskResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetTaskRequest
 */
export class GetTaskRequest extends Message<GetTaskRequest> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  constructor(data?: PartialMessage<GetTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTaskRequest {
    return new GetTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTaskRequest | PlainMessage<GetTaskRequest> | undefined, b: GetTaskRequest | PlainMessage<GetTaskRequest> | undefined): boolean {
    return proto3.util.equals(GetTaskRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetTaskResponse
 */
export class GetTaskResponse extends Message<GetTaskResponse> {
  /**
   * @generated from field: backend.v1.Task task = 1;
   */
  task?: Task;

  constructor(data?: PartialMessage<GetTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTaskResponse {
    return new GetTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTaskResponse {
    return new GetTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTaskResponse {
    return new GetTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTaskResponse | PlainMessage<GetTaskResponse> | undefined, b: GetTaskResponse | PlainMessage<GetTaskResponse> | undefined): boolean {
    return proto3.util.equals(GetTaskResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateTaskRequest
 */
export class UpdateTaskRequest extends Message<UpdateTaskRequest> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  /**
   * @generated from field: backend.v1.MutationTask task = 2;
   */
  task?: MutationTask;

  constructor(data?: PartialMessage<UpdateTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "task", kind: "message", T: MutationTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTaskRequest {
    return new UpdateTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTaskRequest {
    return new UpdateTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTaskRequest {
    return new UpdateTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTaskRequest | PlainMessage<UpdateTaskRequest> | undefined, b: UpdateTaskRequest | PlainMessage<UpdateTaskRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTaskRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateTaskResponse
 */
export class UpdateTaskResponse extends Message<UpdateTaskResponse> {
  /**
   * @generated from field: backend.v1.Task task = 1;
   */
  task?: Task;

  constructor(data?: PartialMessage<UpdateTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTaskResponse {
    return new UpdateTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTaskResponse {
    return new UpdateTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTaskResponse {
    return new UpdateTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTaskResponse | PlainMessage<UpdateTaskResponse> | undefined, b: UpdateTaskResponse | PlainMessage<UpdateTaskResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTaskResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetTestcaseSetsRequest
 */
export class GetTestcaseSetsRequest extends Message<GetTestcaseSetsRequest> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  constructor(data?: PartialMessage<GetTestcaseSetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetTestcaseSetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTestcaseSetsRequest {
    return new GetTestcaseSetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTestcaseSetsRequest {
    return new GetTestcaseSetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTestcaseSetsRequest {
    return new GetTestcaseSetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTestcaseSetsRequest | PlainMessage<GetTestcaseSetsRequest> | undefined, b: GetTestcaseSetsRequest | PlainMessage<GetTestcaseSetsRequest> | undefined): boolean {
    return proto3.util.equals(GetTestcaseSetsRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetTestcaseSetsResponse
 */
export class GetTestcaseSetsResponse extends Message<GetTestcaseSetsResponse> {
  /**
   * @generated from field: repeated backend.v1.TestcaseSet testcase_sets = 1;
   */
  testcaseSets: TestcaseSet[] = [];

  /**
   * @generated from field: repeated backend.v1.Testcase testcases = 2;
   */
  testcases: Testcase[] = [];

  constructor(data?: PartialMessage<GetTestcaseSetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetTestcaseSetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "testcase_sets", kind: "message", T: TestcaseSet, repeated: true },
    { no: 2, name: "testcases", kind: "message", T: Testcase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTestcaseSetsResponse {
    return new GetTestcaseSetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTestcaseSetsResponse {
    return new GetTestcaseSetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTestcaseSetsResponse {
    return new GetTestcaseSetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTestcaseSetsResponse | PlainMessage<GetTestcaseSetsResponse> | undefined, b: GetTestcaseSetsResponse | PlainMessage<GetTestcaseSetsResponse> | undefined): boolean {
    return proto3.util.equals(GetTestcaseSetsResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.SyncTestcaseSetsRequest
 */
export class SyncTestcaseSetsRequest extends Message<SyncTestcaseSetsRequest> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  /**
   * @generated from field: repeated backend.v1.MutationTestcaseSet testcase_sets = 2;
   */
  testcaseSets: MutationTestcaseSet[] = [];

  /**
   * @generated from field: repeated backend.v1.MutationTestcase testcases = 3;
   */
  testcases: MutationTestcase[] = [];

  constructor(data?: PartialMessage<SyncTestcaseSetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.SyncTestcaseSetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "testcase_sets", kind: "message", T: MutationTestcaseSet, repeated: true },
    { no: 3, name: "testcases", kind: "message", T: MutationTestcase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncTestcaseSetsRequest {
    return new SyncTestcaseSetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncTestcaseSetsRequest {
    return new SyncTestcaseSetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncTestcaseSetsRequest {
    return new SyncTestcaseSetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncTestcaseSetsRequest | PlainMessage<SyncTestcaseSetsRequest> | undefined, b: SyncTestcaseSetsRequest | PlainMessage<SyncTestcaseSetsRequest> | undefined): boolean {
    return proto3.util.equals(SyncTestcaseSetsRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.SyncTestcaseSetsResponse
 */
export class SyncTestcaseSetsResponse extends Message<SyncTestcaseSetsResponse> {
  /**
   * @generated from field: repeated backend.v1.TestcaseSet testcase_sets = 1;
   */
  testcaseSets: TestcaseSet[] = [];

  /**
   * @generated from field: repeated backend.v1.Testcase testcases = 2;
   */
  testcases: Testcase[] = [];

  constructor(data?: PartialMessage<SyncTestcaseSetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.SyncTestcaseSetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "testcase_sets", kind: "message", T: TestcaseSet, repeated: true },
    { no: 2, name: "testcases", kind: "message", T: Testcase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncTestcaseSetsResponse {
    return new SyncTestcaseSetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncTestcaseSetsResponse {
    return new SyncTestcaseSetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncTestcaseSetsResponse {
    return new SyncTestcaseSetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncTestcaseSetsResponse | PlainMessage<SyncTestcaseSetsResponse> | undefined, b: SyncTestcaseSetsResponse | PlainMessage<SyncTestcaseSetsResponse> | undefined): boolean {
    return proto3.util.equals(SyncTestcaseSetsResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.SubmitRequest
 */
export class SubmitRequest extends Message<SubmitRequest> {
  /**
   * @generated from field: optional int32 contest_id = 1;
   */
  contestId?: number;

  /**
   * @generated from field: int32 task_id = 2;
   */
  taskId = 0;

  /**
   * @generated from field: string lang_id = 3;
   */
  langId = "";

  /**
   * @generated from field: string source_code = 4;
   */
  sourceCode = "";

  constructor(data?: PartialMessage<SubmitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.SubmitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "lang_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "source_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitRequest {
    return new SubmitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitRequest {
    return new SubmitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitRequest {
    return new SubmitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitRequest | PlainMessage<SubmitRequest> | undefined, b: SubmitRequest | PlainMessage<SubmitRequest> | undefined): boolean {
    return proto3.util.equals(SubmitRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.SubmitResponse
 */
export class SubmitResponse extends Message<SubmitResponse> {
  /**
   * @generated from field: int32 submission_id = 1;
   */
  submissionId = 0;

  constructor(data?: PartialMessage<SubmitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.SubmitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "submission_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitResponse {
    return new SubmitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitResponse {
    return new SubmitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitResponse {
    return new SubmitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitResponse | PlainMessage<SubmitResponse> | undefined, b: SubmitResponse | PlainMessage<SubmitResponse> | undefined): boolean {
    return proto3.util.equals(SubmitResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetSubmissionDetailRequest
 */
export class GetSubmissionDetailRequest extends Message<GetSubmissionDetailRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetSubmissionDetailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetSubmissionDetailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubmissionDetailRequest {
    return new GetSubmissionDetailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubmissionDetailRequest {
    return new GetSubmissionDetailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubmissionDetailRequest {
    return new GetSubmissionDetailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubmissionDetailRequest | PlainMessage<GetSubmissionDetailRequest> | undefined, b: GetSubmissionDetailRequest | PlainMessage<GetSubmissionDetailRequest> | undefined): boolean {
    return proto3.util.equals(GetSubmissionDetailRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetSubmissionDetailResponse
 */
export class GetSubmissionDetailResponse extends Message<GetSubmissionDetailResponse> {
  /**
   * @generated from field: backend.v1.SubmissionDetail submission_detail = 1;
   */
  submissionDetail?: SubmissionDetail;

  constructor(data?: PartialMessage<GetSubmissionDetailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetSubmissionDetailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "submission_detail", kind: "message", T: SubmissionDetail },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubmissionDetailResponse {
    return new GetSubmissionDetailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubmissionDetailResponse {
    return new GetSubmissionDetailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubmissionDetailResponse {
    return new GetSubmissionDetailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubmissionDetailResponse | PlainMessage<GetSubmissionDetailResponse> | undefined, b: GetSubmissionDetailResponse | PlainMessage<GetSubmissionDetailResponse> | undefined): boolean {
    return proto3.util.equals(GetSubmissionDetailResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.ListSubmissionsRequest
 */
export class ListSubmissionsRequest extends Message<ListSubmissionsRequest> {
  /**
   * @generated from field: optional int32 contest_id = 1;
   */
  contestId?: number;

  /**
   * @generated from field: optional int32 user_id = 2;
   */
  userId?: number;

  constructor(data?: PartialMessage<ListSubmissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ListSubmissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubmissionsRequest {
    return new ListSubmissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubmissionsRequest {
    return new ListSubmissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubmissionsRequest {
    return new ListSubmissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSubmissionsRequest | PlainMessage<ListSubmissionsRequest> | undefined, b: ListSubmissionsRequest | PlainMessage<ListSubmissionsRequest> | undefined): boolean {
    return proto3.util.equals(ListSubmissionsRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.ListSubmissionsResponse
 */
export class ListSubmissionsResponse extends Message<ListSubmissionsResponse> {
  /**
   * @generated from field: repeated backend.v1.SubmissionSummary submissions = 1;
   */
  submissions: SubmissionSummary[] = [];

  constructor(data?: PartialMessage<ListSubmissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ListSubmissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "submissions", kind: "message", T: SubmissionSummary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubmissionsResponse {
    return new ListSubmissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubmissionsResponse {
    return new ListSubmissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubmissionsResponse {
    return new ListSubmissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSubmissionsResponse | PlainMessage<ListSubmissionsResponse> | undefined, b: ListSubmissionsResponse | PlainMessage<ListSubmissionsResponse> | undefined): boolean {
    return proto3.util.equals(ListSubmissionsResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetJudgeProgressRequest
 */
export class GetJudgeProgressRequest extends Message<GetJudgeProgressRequest> {
  /**
   * @generated from field: int32 submission_id = 1;
   */
  submissionId = 0;

  constructor(data?: PartialMessage<GetJudgeProgressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetJudgeProgressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "submission_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJudgeProgressRequest {
    return new GetJudgeProgressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJudgeProgressRequest {
    return new GetJudgeProgressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJudgeProgressRequest {
    return new GetJudgeProgressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetJudgeProgressRequest | PlainMessage<GetJudgeProgressRequest> | undefined, b: GetJudgeProgressRequest | PlainMessage<GetJudgeProgressRequest> | undefined): boolean {
    return proto3.util.equals(GetJudgeProgressRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetJudgeProgressResponse
 */
export class GetJudgeProgressResponse extends Message<GetJudgeProgressResponse> {
  /**
   * @generated from field: backend.v1.JudgeProgress judge_progress = 1;
   */
  judgeProgress?: JudgeProgress;

  constructor(data?: PartialMessage<GetJudgeProgressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetJudgeProgressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "judge_progress", kind: "message", T: JudgeProgress },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJudgeProgressResponse {
    return new GetJudgeProgressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJudgeProgressResponse {
    return new GetJudgeProgressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJudgeProgressResponse {
    return new GetJudgeProgressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetJudgeProgressResponse | PlainMessage<GetJudgeProgressResponse> | undefined, b: GetJudgeProgressResponse | PlainMessage<GetJudgeProgressResponse> | undefined): boolean {
    return proto3.util.equals(GetJudgeProgressResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.CreateClarificationRequest
 */
export class CreateClarificationRequest extends Message<CreateClarificationRequest> {
  /**
   * @generated from field: int32 user_id = 1;
   */
  userId = 0;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: bool is_public = 3;
   */
  isPublic = false;

  constructor(data?: PartialMessage<CreateClarificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateClarificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClarificationRequest {
    return new CreateClarificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClarificationRequest {
    return new CreateClarificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClarificationRequest {
    return new CreateClarificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClarificationRequest | PlainMessage<CreateClarificationRequest> | undefined, b: CreateClarificationRequest | PlainMessage<CreateClarificationRequest> | undefined): boolean {
    return proto3.util.equals(CreateClarificationRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.CreateClarificationResponse
 */
export class CreateClarificationResponse extends Message<CreateClarificationResponse> {
  /**
   * @generated from field: backend.v1.Clarification clarification = 1;
   */
  clarification?: Clarification;

  constructor(data?: PartialMessage<CreateClarificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateClarificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clarification", kind: "message", T: Clarification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClarificationResponse {
    return new CreateClarificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClarificationResponse {
    return new CreateClarificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClarificationResponse {
    return new CreateClarificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClarificationResponse | PlainMessage<CreateClarificationResponse> | undefined, b: CreateClarificationResponse | PlainMessage<CreateClarificationResponse> | undefined): boolean {
    return proto3.util.equals(CreateClarificationResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetClarificationRequest
 */
export class GetClarificationRequest extends Message<GetClarificationRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetClarificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetClarificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClarificationRequest {
    return new GetClarificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClarificationRequest {
    return new GetClarificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClarificationRequest {
    return new GetClarificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClarificationRequest | PlainMessage<GetClarificationRequest> | undefined, b: GetClarificationRequest | PlainMessage<GetClarificationRequest> | undefined): boolean {
    return proto3.util.equals(GetClarificationRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetClarificationResponse
 */
export class GetClarificationResponse extends Message<GetClarificationResponse> {
  /**
   * @generated from field: backend.v1.Clarification clarification = 1;
   */
  clarification?: Clarification;

  constructor(data?: PartialMessage<GetClarificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetClarificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clarification", kind: "message", T: Clarification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClarificationResponse {
    return new GetClarificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClarificationResponse {
    return new GetClarificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClarificationResponse {
    return new GetClarificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClarificationResponse | PlainMessage<GetClarificationResponse> | undefined, b: GetClarificationResponse | PlainMessage<GetClarificationResponse> | undefined): boolean {
    return proto3.util.equals(GetClarificationResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.ListClarificationsRequest
 */
export class ListClarificationsRequest extends Message<ListClarificationsRequest> {
  constructor(data?: PartialMessage<ListClarificationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ListClarificationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListClarificationsRequest {
    return new ListClarificationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListClarificationsRequest {
    return new ListClarificationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListClarificationsRequest {
    return new ListClarificationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListClarificationsRequest | PlainMessage<ListClarificationsRequest> | undefined, b: ListClarificationsRequest | PlainMessage<ListClarificationsRequest> | undefined): boolean {
    return proto3.util.equals(ListClarificationsRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.ListClarificationsResponse
 */
export class ListClarificationsResponse extends Message<ListClarificationsResponse> {
  /**
   * @generated from field: repeated backend.v1.Clarification clarifications = 1;
   */
  clarifications: Clarification[] = [];

  constructor(data?: PartialMessage<ListClarificationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ListClarificationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clarifications", kind: "message", T: Clarification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListClarificationsResponse {
    return new ListClarificationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListClarificationsResponse {
    return new ListClarificationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListClarificationsResponse {
    return new ListClarificationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListClarificationsResponse | PlainMessage<ListClarificationsResponse> | undefined, b: ListClarificationsResponse | PlainMessage<ListClarificationsResponse> | undefined): boolean {
    return proto3.util.equals(ListClarificationsResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateClarificationRequest
 */
export class UpdateClarificationRequest extends Message<UpdateClarificationRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: bool is_public = 3;
   */
  isPublic = false;

  constructor(data?: PartialMessage<UpdateClarificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateClarificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClarificationRequest {
    return new UpdateClarificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClarificationRequest {
    return new UpdateClarificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClarificationRequest {
    return new UpdateClarificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClarificationRequest | PlainMessage<UpdateClarificationRequest> | undefined, b: UpdateClarificationRequest | PlainMessage<UpdateClarificationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateClarificationRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateClarificationResponse
 */
export class UpdateClarificationResponse extends Message<UpdateClarificationResponse> {
  /**
   * @generated from field: backend.v1.Clarification clarification = 1;
   */
  clarification?: Clarification;

  constructor(data?: PartialMessage<UpdateClarificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateClarificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clarification", kind: "message", T: Clarification },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClarificationResponse {
    return new UpdateClarificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClarificationResponse {
    return new UpdateClarificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClarificationResponse {
    return new UpdateClarificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClarificationResponse | PlainMessage<UpdateClarificationResponse> | undefined, b: UpdateClarificationResponse | PlainMessage<UpdateClarificationResponse> | undefined): boolean {
    return proto3.util.equals(UpdateClarificationResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.DeleteClarificationRequest
 */
export class DeleteClarificationRequest extends Message<DeleteClarificationRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteClarificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.DeleteClarificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteClarificationRequest {
    return new DeleteClarificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteClarificationRequest {
    return new DeleteClarificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteClarificationRequest {
    return new DeleteClarificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteClarificationRequest | PlainMessage<DeleteClarificationRequest> | undefined, b: DeleteClarificationRequest | PlainMessage<DeleteClarificationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteClarificationRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.DeleteClarificationResponse
 */
export class DeleteClarificationResponse extends Message<DeleteClarificationResponse> {
  constructor(data?: PartialMessage<DeleteClarificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.DeleteClarificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteClarificationResponse {
    return new DeleteClarificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteClarificationResponse {
    return new DeleteClarificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteClarificationResponse {
    return new DeleteClarificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteClarificationResponse | PlainMessage<DeleteClarificationResponse> | undefined, b: DeleteClarificationResponse | PlainMessage<DeleteClarificationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteClarificationResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.CreateAnswerRequest
 */
export class CreateAnswerRequest extends Message<CreateAnswerRequest> {
  /**
   * @generated from field: int32 clarification_id = 1;
   */
  clarificationId = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<CreateAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clarification_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAnswerRequest {
    return new CreateAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAnswerRequest {
    return new CreateAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAnswerRequest {
    return new CreateAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAnswerRequest | PlainMessage<CreateAnswerRequest> | undefined, b: CreateAnswerRequest | PlainMessage<CreateAnswerRequest> | undefined): boolean {
    return proto3.util.equals(CreateAnswerRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.CreateAnswerResponse
 */
export class CreateAnswerResponse extends Message<CreateAnswerResponse> {
  /**
   * @generated from field: backend.v1.Clarification.Answer answer = 1;
   */
  answer?: Clarification_Answer;

  constructor(data?: PartialMessage<CreateAnswerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateAnswerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "message", T: Clarification_Answer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAnswerResponse {
    return new CreateAnswerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAnswerResponse {
    return new CreateAnswerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAnswerResponse {
    return new CreateAnswerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAnswerResponse | PlainMessage<CreateAnswerResponse> | undefined, b: CreateAnswerResponse | PlainMessage<CreateAnswerResponse> | undefined): boolean {
    return proto3.util.equals(CreateAnswerResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetAnswerRequest
 */
export class GetAnswerRequest extends Message<GetAnswerRequest> {
  /**
   * @generated from field: int32 answer_id = 1;
   */
  answerId = 0;

  constructor(data?: PartialMessage<GetAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnswerRequest {
    return new GetAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnswerRequest {
    return new GetAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnswerRequest {
    return new GetAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnswerRequest | PlainMessage<GetAnswerRequest> | undefined, b: GetAnswerRequest | PlainMessage<GetAnswerRequest> | undefined): boolean {
    return proto3.util.equals(GetAnswerRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetAnswerResponse
 */
export class GetAnswerResponse extends Message<GetAnswerResponse> {
  /**
   * @generated from field: backend.v1.Clarification.Answer answer = 1;
   */
  answer?: Clarification_Answer;

  constructor(data?: PartialMessage<GetAnswerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetAnswerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "message", T: Clarification_Answer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnswerResponse {
    return new GetAnswerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnswerResponse {
    return new GetAnswerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnswerResponse {
    return new GetAnswerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnswerResponse | PlainMessage<GetAnswerResponse> | undefined, b: GetAnswerResponse | PlainMessage<GetAnswerResponse> | undefined): boolean {
    return proto3.util.equals(GetAnswerResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateAnswerRequest
 */
export class UpdateAnswerRequest extends Message<UpdateAnswerRequest> {
  /**
   * @generated from field: int32 answer_id = 1;
   */
  answerId = 0;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<UpdateAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAnswerRequest {
    return new UpdateAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAnswerRequest {
    return new UpdateAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAnswerRequest {
    return new UpdateAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAnswerRequest | PlainMessage<UpdateAnswerRequest> | undefined, b: UpdateAnswerRequest | PlainMessage<UpdateAnswerRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAnswerRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateAnswerResponse
 */
export class UpdateAnswerResponse extends Message<UpdateAnswerResponse> {
  /**
   * @generated from field: backend.v1.Clarification.Answer answer = 1;
   */
  answer?: Clarification_Answer;

  constructor(data?: PartialMessage<UpdateAnswerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateAnswerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "message", T: Clarification_Answer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAnswerResponse {
    return new UpdateAnswerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAnswerResponse {
    return new UpdateAnswerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAnswerResponse {
    return new UpdateAnswerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAnswerResponse | PlainMessage<UpdateAnswerResponse> | undefined, b: UpdateAnswerResponse | PlainMessage<UpdateAnswerResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAnswerResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.DeleteAnswerRequest
 */
export class DeleteAnswerRequest extends Message<DeleteAnswerRequest> {
  /**
   * @generated from field: int32 answer_id = 1;
   */
  answerId = 0;

  constructor(data?: PartialMessage<DeleteAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.DeleteAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAnswerRequest {
    return new DeleteAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAnswerRequest {
    return new DeleteAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAnswerRequest {
    return new DeleteAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAnswerRequest | PlainMessage<DeleteAnswerRequest> | undefined, b: DeleteAnswerRequest | PlainMessage<DeleteAnswerRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAnswerRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.DeleteAnswerResponse
 */
export class DeleteAnswerResponse extends Message<DeleteAnswerResponse> {
  constructor(data?: PartialMessage<DeleteAnswerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.DeleteAnswerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAnswerResponse {
    return new DeleteAnswerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAnswerResponse {
    return new DeleteAnswerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAnswerResponse {
    return new DeleteAnswerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAnswerResponse | PlainMessage<DeleteAnswerResponse> | undefined, b: DeleteAnswerResponse | PlainMessage<DeleteAnswerResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAnswerResponse, a, b);
  }
}

