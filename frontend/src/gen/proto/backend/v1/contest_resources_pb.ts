// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file backend/v1/contest_resources.proto (package backend.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Difficulty } from "./task_resources_pb";

/**
 * @generated from message backend.v1.ContestTask
 */
export class ContestTask extends Message<ContestTask> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: int32 exec_time_limit = 3;
   */
  execTimeLimit = 0;

  /**
   * @generated from field: int32 exec_memory_limit = 4;
   */
  execMemoryLimit = 0;

  /**
   * @generated from field: backend.v1.Difficulty difficulty = 5;
   */
  difficulty = Difficulty.DIFFICULTY_UNSPECIFIED;

  /**
   * @generated from field: int32 score = 6;
   */
  score = 0;

  constructor(data?: PartialMessage<ContestTask>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ContestTask";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "exec_time_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "exec_memory_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "difficulty", kind: "enum", T: proto3.getEnumType(Difficulty) },
    { no: 6, name: "score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContestTask {
    return new ContestTask().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContestTask {
    return new ContestTask().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContestTask {
    return new ContestTask().fromJsonString(jsonString, options);
  }

  static equals(a: ContestTask | PlainMessage<ContestTask> | undefined, b: ContestTask | PlainMessage<ContestTask> | undefined): boolean {
    return proto3.util.equals(ContestTask, a, b);
  }
}

/**
 * @generated from message backend.v1.Contest
 */
export class Contest extends Message<Contest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: repeated int32 task_ids = 5;
   */
  taskIds: number[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp start_at = 6;
   */
  startAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_at = 7;
   */
  endAt?: Timestamp;

  constructor(data?: PartialMessage<Contest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.Contest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "task_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 6, name: "start_at", kind: "message", T: Timestamp },
    { no: 7, name: "end_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contest {
    return new Contest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contest {
    return new Contest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contest {
    return new Contest().fromJsonString(jsonString, options);
  }

  static equals(a: Contest | PlainMessage<Contest> | undefined, b: Contest | PlainMessage<Contest> | undefined): boolean {
    return proto3.util.equals(Contest, a, b);
  }
}

/**
 * @generated from message backend.v1.MutationContest
 */
export class MutationContest extends Message<MutationContest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string slug = 2;
   */
  slug = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: google.protobuf.Timestamp start_at = 4;
   */
  startAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_at = 5;
   */
  endAt?: Timestamp;

  /**
   * @generated from field: bool is_public = 6;
   */
  isPublic = false;

  constructor(data?: PartialMessage<MutationContest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.MutationContest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_at", kind: "message", T: Timestamp },
    { no: 5, name: "end_at", kind: "message", T: Timestamp },
    { no: 6, name: "is_public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MutationContest {
    return new MutationContest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MutationContest {
    return new MutationContest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MutationContest {
    return new MutationContest().fromJsonString(jsonString, options);
  }

  static equals(a: MutationContest | PlainMessage<MutationContest> | undefined, b: MutationContest | PlainMessage<MutationContest> | undefined): boolean {
    return proto3.util.equals(MutationContest, a, b);
  }
}

/**
 * @generated from message backend.v1.StandingsElement
 */
export class StandingsElement extends Message<StandingsElement> {
  /**
   * @generated from field: int32 rank = 1;
   */
  rank = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  /**
   * @generated from field: string user_name = 3;
   */
  userName = "";

  /**
   * @generated from field: int32 total_score = 4;
   */
  totalScore = 0;

  /**
   * @generated from field: int32 total_penalty_count = 5;
   */
  totalPenaltyCount = 0;

  /**
   * @generated from field: google.protobuf.Timestamp latest_ac_at = 6;
   */
  latestAcAt?: Timestamp;

  /**
   * @generated from field: repeated backend.v1.StandingsElement.TaskDetail task_detail_list = 7;
   */
  taskDetailList: StandingsElement_TaskDetail[] = [];

  constructor(data?: PartialMessage<StandingsElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.StandingsElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rank", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "total_penalty_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "latest_ac_at", kind: "message", T: Timestamp },
    { no: 7, name: "task_detail_list", kind: "message", T: StandingsElement_TaskDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StandingsElement {
    return new StandingsElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StandingsElement {
    return new StandingsElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StandingsElement {
    return new StandingsElement().fromJsonString(jsonString, options);
  }

  static equals(a: StandingsElement | PlainMessage<StandingsElement> | undefined, b: StandingsElement | PlainMessage<StandingsElement> | undefined): boolean {
    return proto3.util.equals(StandingsElement, a, b);
  }
}

/**
 * @generated from message backend.v1.StandingsElement.TaskDetail
 */
export class StandingsElement_TaskDetail extends Message<StandingsElement_TaskDetail> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  /**
   * @generated from field: int32 penalty_count = 2;
   */
  penaltyCount = 0;

  /**
   * @generated from field: int32 ac_submit_id = 3;
   */
  acSubmitId = 0;

  /**
   * @generated from field: google.protobuf.Timestamp ac_elapsed = 4;
   */
  acElapsed?: Timestamp;

  constructor(data?: PartialMessage<StandingsElement_TaskDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.StandingsElement.TaskDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "penalty_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "ac_submit_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "ac_elapsed", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StandingsElement_TaskDetail {
    return new StandingsElement_TaskDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StandingsElement_TaskDetail {
    return new StandingsElement_TaskDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StandingsElement_TaskDetail {
    return new StandingsElement_TaskDetail().fromJsonString(jsonString, options);
  }

  static equals(a: StandingsElement_TaskDetail | PlainMessage<StandingsElement_TaskDetail> | undefined, b: StandingsElement_TaskDetail | PlainMessage<StandingsElement_TaskDetail> | undefined): boolean {
    return proto3.util.equals(StandingsElement_TaskDetail, a, b);
  }
}

/**
 * @generated from message backend.v1.SubmissionStatus
 */
export class SubmissionStatus extends Message<SubmissionStatus> {
  /**
   * @generated from field: int32 task_id = 1;
   */
  taskId = 0;

  /**
   * @generated from field: optional int32 score = 2;
   */
  score?: number;

  constructor(data?: PartialMessage<SubmissionStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.SubmissionStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "score", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmissionStatus {
    return new SubmissionStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmissionStatus {
    return new SubmissionStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmissionStatus {
    return new SubmissionStatus().fromJsonString(jsonString, options);
  }

  static equals(a: SubmissionStatus | PlainMessage<SubmissionStatus> | undefined, b: SubmissionStatus | PlainMessage<SubmissionStatus> | undefined): boolean {
    return proto3.util.equals(SubmissionStatus, a, b);
  }
}

