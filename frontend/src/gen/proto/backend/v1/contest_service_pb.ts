// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file backend/v1/contest_service.proto (package backend.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Contest, ContestTask, MutationContest, StandingsElement, SubmissionStatus } from "./contest_resources_pb";

/**
 * @generated from message backend.v1.CreateContestRequest
 */
export class CreateContestRequest extends Message<CreateContestRequest> {
  /**
   * @generated from field: backend.v1.MutationContest contest = 1;
   */
  contest?: MutationContest;

  constructor(data?: PartialMessage<CreateContestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateContestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest", kind: "message", T: MutationContest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateContestRequest {
    return new CreateContestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateContestRequest {
    return new CreateContestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateContestRequest {
    return new CreateContestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateContestRequest | PlainMessage<CreateContestRequest> | undefined, b: CreateContestRequest | PlainMessage<CreateContestRequest> | undefined): boolean {
    return proto3.util.equals(CreateContestRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.CreateContestResponse
 */
export class CreateContestResponse extends Message<CreateContestResponse> {
  /**
   * @generated from field: backend.v1.Contest contest = 1;
   */
  contest?: Contest;

  constructor(data?: PartialMessage<CreateContestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.CreateContestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest", kind: "message", T: Contest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateContestResponse {
    return new CreateContestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateContestResponse {
    return new CreateContestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateContestResponse {
    return new CreateContestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateContestResponse | PlainMessage<CreateContestResponse> | undefined, b: CreateContestResponse | PlainMessage<CreateContestResponse> | undefined): boolean {
    return proto3.util.equals(CreateContestResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetContestRequest
 */
export class GetContestRequest extends Message<GetContestRequest> {
  /**
   * @generated from field: string slug = 1;
   */
  slug = "";

  constructor(data?: PartialMessage<GetContestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetContestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContestRequest {
    return new GetContestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContestRequest {
    return new GetContestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContestRequest {
    return new GetContestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetContestRequest | PlainMessage<GetContestRequest> | undefined, b: GetContestRequest | PlainMessage<GetContestRequest> | undefined): boolean {
    return proto3.util.equals(GetContestRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetContestResponse
 */
export class GetContestResponse extends Message<GetContestResponse> {
  /**
   * @generated from field: backend.v1.Contest contest = 1;
   */
  contest?: Contest;

  constructor(data?: PartialMessage<GetContestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetContestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest", kind: "message", T: Contest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContestResponse {
    return new GetContestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContestResponse {
    return new GetContestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContestResponse {
    return new GetContestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetContestResponse | PlainMessage<GetContestResponse> | undefined, b: GetContestResponse | PlainMessage<GetContestResponse> | undefined): boolean {
    return proto3.util.equals(GetContestResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateContestRequest
 */
export class UpdateContestRequest extends Message<UpdateContestRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: backend.v1.MutationContest contest = 2;
   */
  contest?: MutationContest;

  constructor(data?: PartialMessage<UpdateContestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateContestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "contest", kind: "message", T: MutationContest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateContestRequest {
    return new UpdateContestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateContestRequest {
    return new UpdateContestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateContestRequest {
    return new UpdateContestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateContestRequest | PlainMessage<UpdateContestRequest> | undefined, b: UpdateContestRequest | PlainMessage<UpdateContestRequest> | undefined): boolean {
    return proto3.util.equals(UpdateContestRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.UpdateContestResponse
 */
export class UpdateContestResponse extends Message<UpdateContestResponse> {
  /**
   * @generated from field: backend.v1.Contest contest = 1;
   */
  contest?: Contest;

  constructor(data?: PartialMessage<UpdateContestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.UpdateContestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest", kind: "message", T: Contest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateContestResponse {
    return new UpdateContestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateContestResponse {
    return new UpdateContestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateContestResponse {
    return new UpdateContestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateContestResponse | PlainMessage<UpdateContestResponse> | undefined, b: UpdateContestResponse | PlainMessage<UpdateContestResponse> | undefined): boolean {
    return proto3.util.equals(UpdateContestResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.ListContestsRequest
 */
export class ListContestsRequest extends Message<ListContestsRequest> {
  constructor(data?: PartialMessage<ListContestsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ListContestsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContestsRequest {
    return new ListContestsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContestsRequest {
    return new ListContestsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContestsRequest {
    return new ListContestsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListContestsRequest | PlainMessage<ListContestsRequest> | undefined, b: ListContestsRequest | PlainMessage<ListContestsRequest> | undefined): boolean {
    return proto3.util.equals(ListContestsRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.ListContestsResponse
 */
export class ListContestsResponse extends Message<ListContestsResponse> {
  /**
   * @generated from field: repeated backend.v1.Contest contests = 1;
   */
  contests: Contest[] = [];

  constructor(data?: PartialMessage<ListContestsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ListContestsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contests", kind: "message", T: Contest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContestsResponse {
    return new ListContestsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContestsResponse {
    return new ListContestsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContestsResponse {
    return new ListContestsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListContestsResponse | PlainMessage<ListContestsResponse> | undefined, b: ListContestsResponse | PlainMessage<ListContestsResponse> | undefined): boolean {
    return proto3.util.equals(ListContestsResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.ListContestTasksRequest
 */
export class ListContestTasksRequest extends Message<ListContestTasksRequest> {
  /**
   * @generated from field: string contest_slug = 1;
   */
  contestSlug = "";

  constructor(data?: PartialMessage<ListContestTasksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ListContestTasksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest_slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContestTasksRequest {
    return new ListContestTasksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContestTasksRequest {
    return new ListContestTasksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContestTasksRequest {
    return new ListContestTasksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListContestTasksRequest | PlainMessage<ListContestTasksRequest> | undefined, b: ListContestTasksRequest | PlainMessage<ListContestTasksRequest> | undefined): boolean {
    return proto3.util.equals(ListContestTasksRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.ListContestTasksResponse
 */
export class ListContestTasksResponse extends Message<ListContestTasksResponse> {
  /**
   * 問題の並び順
   *
   * @generated from field: repeated backend.v1.ContestTask tasks = 1;
   */
  tasks: ContestTask[] = [];

  constructor(data?: PartialMessage<ListContestTasksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.ListContestTasksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tasks", kind: "message", T: ContestTask, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContestTasksResponse {
    return new ListContestTasksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContestTasksResponse {
    return new ListContestTasksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContestTasksResponse {
    return new ListContestTasksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListContestTasksResponse | PlainMessage<ListContestTasksResponse> | undefined, b: ListContestTasksResponse | PlainMessage<ListContestTasksResponse> | undefined): boolean {
    return proto3.util.equals(ListContestTasksResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetMySubmissionStatusesRequest
 */
export class GetMySubmissionStatusesRequest extends Message<GetMySubmissionStatusesRequest> {
  /**
   * @generated from field: string contest_slug = 1;
   */
  contestSlug = "";

  constructor(data?: PartialMessage<GetMySubmissionStatusesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetMySubmissionStatusesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest_slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMySubmissionStatusesRequest {
    return new GetMySubmissionStatusesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMySubmissionStatusesRequest {
    return new GetMySubmissionStatusesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMySubmissionStatusesRequest {
    return new GetMySubmissionStatusesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMySubmissionStatusesRequest | PlainMessage<GetMySubmissionStatusesRequest> | undefined, b: GetMySubmissionStatusesRequest | PlainMessage<GetMySubmissionStatusesRequest> | undefined): boolean {
    return proto3.util.equals(GetMySubmissionStatusesRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetMySubmissionStatusesResponse
 */
export class GetMySubmissionStatusesResponse extends Message<GetMySubmissionStatusesResponse> {
  /**
   * @generated from field: repeated backend.v1.SubmissionStatus submission_statuses = 1;
   */
  submissionStatuses: SubmissionStatus[] = [];

  constructor(data?: PartialMessage<GetMySubmissionStatusesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetMySubmissionStatusesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "submission_statuses", kind: "message", T: SubmissionStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMySubmissionStatusesResponse {
    return new GetMySubmissionStatusesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMySubmissionStatusesResponse {
    return new GetMySubmissionStatusesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMySubmissionStatusesResponse {
    return new GetMySubmissionStatusesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMySubmissionStatusesResponse | PlainMessage<GetMySubmissionStatusesResponse> | undefined, b: GetMySubmissionStatusesResponse | PlainMessage<GetMySubmissionStatusesResponse> | undefined): boolean {
    return proto3.util.equals(GetMySubmissionStatusesResponse, a, b);
  }
}

/**
 * @generated from message backend.v1.GetStandingsRequest
 */
export class GetStandingsRequest extends Message<GetStandingsRequest> {
  /**
   * @generated from field: int32 contest_id = 1;
   */
  contestId = 0;

  constructor(data?: PartialMessage<GetStandingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetStandingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStandingsRequest {
    return new GetStandingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStandingsRequest {
    return new GetStandingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStandingsRequest {
    return new GetStandingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStandingsRequest | PlainMessage<GetStandingsRequest> | undefined, b: GetStandingsRequest | PlainMessage<GetStandingsRequest> | undefined): boolean {
    return proto3.util.equals(GetStandingsRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.GetStandingsResponse
 */
export class GetStandingsResponse extends Message<GetStandingsResponse> {
  /**
   * @generated from field: repeated backend.v1.StandingsElement standings_list = 1;
   */
  standingsList: StandingsElement[] = [];

  constructor(data?: PartialMessage<GetStandingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.GetStandingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "standings_list", kind: "message", T: StandingsElement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStandingsResponse {
    return new GetStandingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStandingsResponse {
    return new GetStandingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStandingsResponse {
    return new GetStandingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStandingsResponse | PlainMessage<GetStandingsResponse> | undefined, b: GetStandingsResponse | PlainMessage<GetStandingsResponse> | undefined): boolean {
    return proto3.util.equals(GetStandingsResponse, a, b);
  }
}

/**
 * コンテストに参加登録するときのリクエスト
 *
 * @generated from message backend.v1.RegisterMeRequest
 */
export class RegisterMeRequest extends Message<RegisterMeRequest> {
  /**
   * @generated from field: string contest_slug = 1;
   */
  contestSlug = "";

  constructor(data?: PartialMessage<RegisterMeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.RegisterMeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contest_slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMeRequest {
    return new RegisterMeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMeRequest {
    return new RegisterMeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMeRequest {
    return new RegisterMeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterMeRequest | PlainMessage<RegisterMeRequest> | undefined, b: RegisterMeRequest | PlainMessage<RegisterMeRequest> | undefined): boolean {
    return proto3.util.equals(RegisterMeRequest, a, b);
  }
}

/**
 * @generated from message backend.v1.RegisterMeResponse
 */
export class RegisterMeResponse extends Message<RegisterMeResponse> {
  constructor(data?: PartialMessage<RegisterMeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "backend.v1.RegisterMeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMeResponse {
    return new RegisterMeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMeResponse {
    return new RegisterMeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMeResponse {
    return new RegisterMeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterMeResponse | PlainMessage<RegisterMeResponse> | undefined, b: RegisterMeResponse | PlainMessage<RegisterMeResponse> | undefined): boolean {
    return proto3.util.equals(RegisterMeResponse, a, b);
  }
}

